<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ePrescription.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="T:ePrescription.Data.SqlClient.SqlVrEPresDetailProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.VrEPresDetail"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrEPresDetailProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrEPresDetailProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrEPresDetailProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VrEPresDetail objects.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrEPresDetailProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrEPresDetailProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrEPresDetailProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrEPresDetailProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrEPresDetailProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrEPresDetailProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrEPresDetailProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrEPresDetailProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrEPresDetail objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrEPresDetailProviderBase.Get(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrEPresDetail objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrEPresDetailProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VrEPresDetail objects.</returns>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrUnitTableProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.VrUnitTable"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrUnitTableProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrUnitTableProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VrUnitTable objects.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrUnitTable objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase.Get(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrUnitTable objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VrUnitTable objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase.Update(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            This method wraps the '_VR_UnitTable_Update' stored procedure. 
            </summary>
            <param name="unit"> A <c>System.String</c> instance.</param>
            <param name="unitVn"> A <c>System.String</c> instance.</param>
            <param name="dosageUnit"> A <c>System.String</c> instance.</param>
            <param name="dosageUnitVn"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlDiaglistProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.Diaglist"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlDiaglistProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlDiaglistProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.Diaglist"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlDiaglistProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlDiaglistProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.Delete(ePrescription.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_diagCode">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Diaglist objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.Diaglist objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Diaglist objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Diaglist objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.GetByDiagCode(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DIAG_LIST index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_diagCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.Diaglist"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.Diaglist})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.Diaglist object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.Diaglist)">
            <summary>
            	Inserts a ePrescription.Entities.Diaglist object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.Diaglist object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.Diaglist object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.Diaglist)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.Diaglist object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.Diaglist object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlEPrescriptionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.EPrescription"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlEPrescriptionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.EPrescription"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.Delete(ePrescription.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_prescriptionId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.EPrescription objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.EPrescription objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.EPrescription objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.EPrescription objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.GetByPrescriptionId(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ePrescription index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_prescriptionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.EPrescription"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.EPrescription})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.EPrescription object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.EPrescription)">
            <summary>
            	Inserts a ePrescription.Entities.EPrescription object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.EPrescription object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.EPrescription object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.EPrescription)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.EPrescription object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.EPrescription object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.EPrescriptionDetail"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.EPrescriptionDetail"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.Delete(ePrescription.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_prescriptionDetailId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.EPrescriptionDetail objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.EPrescriptionDetail objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.EPrescriptionDetail objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.EPrescriptionDetail objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.GetByPrescriptionId(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ePrescriptionDetail_ePrescription key.
            	FK_ePrescriptionDetail_ePrescription Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_prescriptionId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.EPrescriptionDetail objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.GetByPrescriptionDetailId(ePrescription.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ePrescriptionDetail index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_prescriptionDetailId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.EPrescriptionDetail"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.EPrescriptionDetail})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.EPrescriptionDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.EPrescriptionDetail)">
            <summary>
            	Inserts a ePrescription.Entities.EPrescriptionDetail object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.EPrescriptionDetail object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.EPrescriptionDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.EPrescriptionDetail)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.EPrescriptionDetail object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.EPrescriptionDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlFavoritDetailProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.FavoritDetail"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlFavoritDetailProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.FavoritDetail"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.Delete(ePrescription.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.FavoritDetail objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.FavoritDetail objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.FavoritDetail objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.FavoritDetail objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.GetByFavouriteId(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_FavoritDetail_ID key.
            	FK_FavoritDetail_ID Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_favouriteId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.FavoritDetail objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.GetById(ePrescription.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_FavoritDetail index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.FavoritDetail"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.FavoritDetail})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.FavoritDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.FavoritDetail)">
            <summary>
            	Inserts a ePrescription.Entities.FavoritDetail object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.FavoritDetail object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.FavoritDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.FavoritDetail)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.FavoritDetail object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.FavoritDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlFavoritMasterProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.FavoritMaster"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlFavoritMasterProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.FavoritMaster"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.Delete(ePrescription.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_favouriteId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.FavoritMaster objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.FavoritMaster objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.FavoritMaster objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.FavoritMaster objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.GetByFavouriteId(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_FavoritMaster index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_favouriteId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.FavoritMaster"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.FavoritMaster})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.FavoritMaster object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.FavoritMaster)">
            <summary>
            	Inserts a ePrescription.Entities.FavoritMaster object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.FavoritMaster object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.FavoritMaster object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.FavoritMaster)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.FavoritMaster object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.FavoritMaster object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlFrequencyProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.Frequency"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlFrequencyProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlFrequencyProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.Frequency"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlFrequencyProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlFrequencyProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.Delete(ePrescription.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_frequencyId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Frequency objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.Frequency objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Frequency objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Frequency objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.GetByFrequencyId(ePrescription.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Frequency index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_frequencyId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.Frequency"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.Frequency})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.Frequency object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.Frequency)">
            <summary>
            	Inserts a ePrescription.Entities.Frequency object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.Frequency object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.Frequency object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.Frequency)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.Frequency object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.Frequency object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlRouteProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.Route"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlRouteProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlRouteProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.Route"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlRouteProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlRouteProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlRouteProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlRouteProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlRouteProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProviderBase.Delete(ePrescription.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_routeId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Route objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.Route objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Route objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Route objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProviderBase.GetByRouteId(ePrescription.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Route index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_routeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.Route"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.Route})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.Route object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.Route)">
            <summary>
            	Inserts a ePrescription.Entities.Route object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.Route object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.Route object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.Route)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.Route object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.Route object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlUserRolesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.UserRoles"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlUserRolesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlUserRolesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.UserRoles"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlUserRolesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlUserRolesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.Delete(ePrescription.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_roleId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.UserRoles objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.UserRoles objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.UserRoles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.UserRoles objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.GetByRoleId(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UserRoles index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_roleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.UserRoles"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.UserRoles})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.UserRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.UserRoles)">
            <summary>
            	Inserts a ePrescription.Entities.UserRoles object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.UserRoles object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.UserRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.UserRoles)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.UserRoles object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.UserRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlUsersProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.Users"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlUsersProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlUsersProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.Users"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlUsersProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlUsersProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlUsersProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlUsersProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlUsersProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProviderBase.Delete(ePrescription.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_userName">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Users objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.Users objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Users objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Users objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProviderBase.GetByUserName(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Users index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_userName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.Users"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.Users})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.Users object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.Users)">
            <summary>
            	Inserts a ePrescription.Entities.Users object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.Users object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.Users object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.Users)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.Users object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.Users object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:ePrescription.Data.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <see cref="T:ePrescription.Data.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.RouteProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.Route"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlRouteProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlRouteProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.DiaglistProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.Diaglist"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlDiaglistProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlDiaglistProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.FrequencyProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.Frequency"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlFrequencyProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlFrequencyProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.UserRolesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.UserRoles"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlUserRolesProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlUserRolesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.FavoritMasterProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.FavoritMaster"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlFavoritMasterProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlFavoritMasterProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.EPrescriptionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.EPrescription"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlEPrescriptionProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlEPrescriptionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.FavoritDetailProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.FavoritDetail"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlFavoritDetailProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlFavoritDetailProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.UsersProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.Users"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlUsersProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlUsersProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.EPrescriptionDetailProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.EPrescriptionDetail"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlEPrescriptionDetailProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlEPrescriptionDetailProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.VrEPresDetailProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.VrEPresDetail"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrEPresDetailProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrEPresDetailProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.VrUnitTableProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.VrUnitTable"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrUnitTableProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrUnitTableProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(ePrescription.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(ePrescription.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(ePrescription.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(ePrescription.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(ePrescription.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(ePrescription.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(ePrescription.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(ePrescription.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(ePrescription.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(ePrescription.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(ePrescription.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(ePrescription.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="T:ePrescription.Data.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="P:ePrescription.Data.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:ePrescription.Data.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:ePrescription.Data.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:ePrescription.Data.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:ePrescription.Data.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:ePrescription.Data.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:ePrescription.Data.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:ePrescription.Data.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,ePrescription.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="T:ePrescription.Data.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="P:ePrescription.Data.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="T:ePrescription.Data.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:ePrescription.Data.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
    </members>
</doc>
