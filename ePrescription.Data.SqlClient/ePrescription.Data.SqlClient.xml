<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ePrescription.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="T:ePrescription.Data.SqlClient.SqlVrDoctorDoneProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.VrDoctorDone"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrDoctorDoneProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrDoctorDoneProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrDoctorDoneProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VrDoctorDone objects.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrDoctorDoneProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrDoctorDoneProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrDoctorDoneProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrDoctorDoneProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrDoctorDoneProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrDoctorDoneProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrDoctorDoneProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrDoctorDoneProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrDoctorDone objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrDoctorDoneProviderBase.Get(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrDoctorDone objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrDoctorDoneProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VrDoctorDone objects.</returns>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrDoctorwipProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.VrDoctorwip"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrDoctorwipProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrDoctorwipProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrDoctorwipProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VrDoctorwip objects.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrDoctorwipProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrDoctorwipProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrDoctorwipProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrDoctorwipProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrDoctorwipProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrDoctorwipProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrDoctorwipProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrDoctorwipProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrDoctorwip objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrDoctorwipProviderBase.Get(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrDoctorwip objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrDoctorwipProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VrDoctorwip objects.</returns>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrEPresDetailProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.VrEPresDetail"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrEPresDetailProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrEPresDetailProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrEPresDetailProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VrEPresDetail objects.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrEPresDetailProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrEPresDetailProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrEPresDetailProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrEPresDetailProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrEPresDetailProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrEPresDetailProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrEPresDetailProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrEPresDetailProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrEPresDetail objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrEPresDetailProviderBase.Get(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrEPresDetail objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrEPresDetailProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VrEPresDetail objects.</returns>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrLabProcessingProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.VrLabProcessing"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabProcessingProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrLabProcessingProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrLabProcessingProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VrLabProcessing objects.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabProcessingProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrLabProcessingProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabProcessingProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrLabProcessingProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrLabProcessingProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrLabProcessingProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrLabProcessingProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabProcessingProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrLabProcessing objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabProcessingProviderBase.Get(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrLabProcessing objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabProcessingProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VrLabProcessing objects.</returns>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrLabReceiveProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.VrLabReceive"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabReceiveProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrLabReceiveProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrLabReceiveProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VrLabReceive objects.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabReceiveProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrLabReceiveProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabReceiveProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrLabReceiveProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrLabReceiveProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrLabReceiveProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrLabReceiveProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabReceiveProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrLabReceive objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabReceiveProviderBase.Get(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrLabReceive objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabReceiveProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VrLabReceive objects.</returns>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrLabReqProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.VrLabReq"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabReqProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrLabReqProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrLabReqProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VrLabReq objects.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabReqProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrLabReqProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabReqProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrLabReqProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrLabReqProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrLabReqProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrLabReqProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabReqProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrLabReq objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabReqProviderBase.Get(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrLabReq objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabReqProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VrLabReq objects.</returns>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrLabResultProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.VrLabResult"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabResultProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrLabResultProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrLabResultProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VrLabResult objects.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabResultProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrLabResultProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabResultProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrLabResultProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrLabResultProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrLabResultProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrLabResultProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabResultProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrLabResult objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabResultProviderBase.Get(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrLabResult objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabResultProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VrLabResult objects.</returns>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrLabwipProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.VrLabwip"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabwipProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrLabwipProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrLabwipProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VrLabwip objects.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabwipProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrLabwipProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabwipProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrLabwipProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrLabwipProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrLabwipProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrLabwipProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabwipProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrLabwip objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabwipProviderBase.Get(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrLabwip objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrLabwipProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VrLabwip objects.</returns>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrMedProProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.VrMedPro"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrMedProProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrMedProProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrMedProProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VrMedPro objects.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrMedProProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrMedProProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrMedProProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrMedProProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrMedProProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrMedProProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrMedProProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrMedProProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrMedPro objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrMedProProviderBase.Get(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrMedPro objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrMedProProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VrMedPro objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrMedProProviderBase.GetByDescription(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the '_VR_MedPro_GetByDescription' stored procedure. 
            </summary>
            <param name="descriptiontion"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrNurseProcessedPatientsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.VrNurseProcessedPatients"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrNurseProcessedPatientsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrNurseProcessedPatientsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrNurseProcessedPatientsProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VrNurseProcessedPatients objects.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrNurseProcessedPatientsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrNurseProcessedPatientsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrNurseProcessedPatientsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrNurseProcessedPatientsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrNurseProcessedPatientsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrNurseProcessedPatientsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrNurseProcessedPatientsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrNurseProcessedPatientsProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrNurseProcessedPatients objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrNurseProcessedPatientsProviderBase.Get(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrNurseProcessedPatients objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrNurseProcessedPatientsProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VrNurseProcessedPatients objects.</returns>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrReceptionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.VrReception"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrReceptionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrReceptionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrReceptionProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VrReception objects.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrReceptionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrReceptionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrReceptionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrReceptionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrReceptionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrReceptionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrReceptionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrReceptionProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrReception objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrReceptionProviderBase.Get(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrReception objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrReceptionProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VrReception objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrReceptionProviderBase.UpdatePatCMS(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the '_VR_Reception_UpdatePatCMS' stored procedure. 
            </summary>
            <param name="tid"> A <c>System.String</c> instance.</param>
            <param name="reason"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrReceptionDoneProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.VrReceptionDone"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrReceptionDoneProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrReceptionDoneProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrReceptionDoneProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VrReceptionDone objects.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrReceptionDoneProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrReceptionDoneProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrReceptionDoneProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrReceptionDoneProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrReceptionDoneProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrReceptionDoneProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrReceptionDoneProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrReceptionDoneProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrReceptionDone objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrReceptionDoneProviderBase.Get(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrReceptionDone objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrReceptionDoneProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VrReceptionDone objects.</returns>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrReceptionStartProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.VrReceptionStart"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrReceptionStartProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrReceptionStartProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrReceptionStartProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VrReceptionStart objects.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrReceptionStartProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrReceptionStartProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrReceptionStartProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrReceptionStartProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrReceptionStartProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrReceptionStartProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrReceptionStartProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrReceptionStartProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrReceptionStart objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrReceptionStartProviderBase.Get(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrReceptionStart objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrReceptionStartProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VrReceptionStart objects.</returns>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrTidChargedCodeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.VrTidChargedCode"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrTidChargedCodeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrTidChargedCodeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrTidChargedCodeProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VrTidChargedCode objects.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrTidChargedCodeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrTidChargedCodeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrTidChargedCodeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrTidChargedCodeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrTidChargedCodeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrTidChargedCodeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrTidChargedCodeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrTidChargedCodeProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrTidChargedCode objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrTidChargedCodeProviderBase.Get(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrTidChargedCode objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrTidChargedCodeProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VrTidChargedCode objects.</returns>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrUnitTableProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.VrUnitTable"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrUnitTableProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrUnitTableProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VrUnitTable objects.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrUnitTable objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase.Get(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VrUnitTable objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VrUnitTable objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVrUnitTableProviderBase.Update(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            This method wraps the '_VR_UnitTable_Update' stored procedure. 
            </summary>
            <param name="unit"> A <c>System.String</c> instance.</param>
            <param name="unitVn"> A <c>System.String</c> instance.</param>
            <param name="dosageUnit"> A <c>System.String</c> instance.</param>
            <param name="dosageUnitVn"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlClinicalStatsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.ClinicalStats"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlClinicalStatsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlClinicalStatsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlClinicalStatsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.ClinicalStats"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlClinicalStatsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlClinicalStatsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlClinicalStatsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlClinicalStatsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlClinicalStatsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlClinicalStatsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlClinicalStatsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlClinicalStatsProviderBase.Delete(ePrescription.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_statId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlClinicalStatsProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.ClinicalStats objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlClinicalStatsProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.ClinicalStats objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlClinicalStatsProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.ClinicalStats objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlClinicalStatsProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.ClinicalStats objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlClinicalStatsProviderBase.GetByStatId(ePrescription.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ClinicalStats index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_statId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.ClinicalStats"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlClinicalStatsProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.ClinicalStats})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.ClinicalStats object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlClinicalStatsProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.ClinicalStats)">
            <summary>
            	Inserts a ePrescription.Entities.ClinicalStats object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.ClinicalStats object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.ClinicalStats object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlClinicalStatsProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.ClinicalStats)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.ClinicalStats object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.ClinicalStats object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlClinicalStatsProviderBase.UpdVitalSign(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the '_ClinicalStats_UpdVitalSign' stored procedure. 
            </summary>	
            <param name="tid"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlClinicalStatsProviderBase.ReceptComplete(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the '_ClinicalStats_ReceptComplete' stored procedure. 
            </summary>	
            <param name="tid"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlClinicalStatsProviderBase.GetByTID(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the '_ClinicalStats_GetByTID' stored procedure. 
            </summary>	
            <param name="tid"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlClinicalStatsProviderBase.UpdateLabDrReq(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the '_ClinicalStats_UpdateLabDrReq' stored procedure. 
            </summary>	
            <param name="tid"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlClinicalStatsProviderBase.AddRecept(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            This method wraps the '_ClinicalStats_AddRecept' stored procedure. 
            </summary>	
            <param name="patientCode"> A <c>System.String</c> instance.</param>
            <param name="tid"> A <c>System.String</c> instance.</param>
            <param name="firstName"> A <c>System.String</c> instance.</param>
            <param name="lastName"> A <c>System.String</c> instance.</param>
            <param name="dob"> A <c>System.DateTime?</c> instance.</param>
            <param name="sex"> A <c>System.String</c> instance.</param>
            <param name="nationality"> A <c>System.String</c> instance.</param>
            <param name="patientStart"> A <c>System.Boolean?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlClinicalStatsProviderBase.UpdateRecept(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the '_ClinicalStats_UpdateRecept' stored procedure. 
            </summary>	
            <param name="tid"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlDiaglistProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.Diaglist"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlDiaglistProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlDiaglistProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.Diaglist"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlDiaglistProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlDiaglistProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.Delete(ePrescription.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_diagCode">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Diaglist objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.Diaglist objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Diaglist objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Diaglist objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.GetByDiagCode(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DIAG_LIST index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_diagCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.Diaglist"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.Diaglist})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.Diaglist object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.Diaglist)">
            <summary>
            	Inserts a ePrescription.Entities.Diaglist object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.Diaglist object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.Diaglist object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDiaglistProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.Diaglist)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.Diaglist object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.Diaglist object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlDoctorRequestProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.DoctorRequest"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDoctorRequestProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlDoctorRequestProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlDoctorRequestProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.DoctorRequest"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDoctorRequestProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlDoctorRequestProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDoctorRequestProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlDoctorRequestProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlDoctorRequestProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlDoctorRequestProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlDoctorRequestProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDoctorRequestProviderBase.Delete(ePrescription.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDoctorRequestProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.DoctorRequest objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDoctorRequestProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.DoctorRequest objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDoctorRequestProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.DoctorRequest objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDoctorRequestProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.DoctorRequest objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDoctorRequestProviderBase.GetById(ePrescription.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Id index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.DoctorRequest"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDoctorRequestProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.DoctorRequest})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.DoctorRequest object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDoctorRequestProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.DoctorRequest)">
            <summary>
            	Inserts a ePrescription.Entities.DoctorRequest object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.DoctorRequest object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.DoctorRequest object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDoctorRequestProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.DoctorRequest)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.DoctorRequest object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.DoctorRequest object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDoctorRequestProviderBase.LabDone(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the '_DoctorRequest_LabDone' stored procedure. 
            </summary>	
            <param name="tid"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDoctorRequestProviderBase.UpdateStatus(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the '_DoctorRequest_UpdateStatus' stored procedure. 
            </summary>	
            <param name="reqStatus"> A <c>System.String</c> instance.</param>
            <param name="reqId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDoctorRequestProviderBase.Insert(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},System.String)">
            <summary>
            This method wraps the '_DoctorRequest_Insert' stored procedure. 
            </summary>	
            <param name="tid"> A <c>System.String</c> instance.</param>
            <param name="reqId"> A <c>System.String</c> instance.</param>
            <param name="code"> A <c>System.String</c> instance.</param>
            <param name="description"> A <c>System.String</c> instance.</param>
            <param name="reqDoctor"> A <c>System.String</c> instance.</param>
            <param name="reqDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="colDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="colTime"> A <c>System.TimeSpan?</c> instance.</param>
            <param name="reqStatus"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDoctorRequestProviderBase.GetByTID(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the '_DoctorRequest_GetByTID' stored procedure. 
            </summary>	
            <param name="tid"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDoctorRequestProviderBase.UpdNurse(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.String,System.Nullable{System.Boolean},System.String)">
            <summary>
            This method wraps the '_DoctorRequest_UpdNurse' stored procedure. 
            </summary>	
            <param name="code"> A <c>System.String</c> instance.</param>
            <param name="billable"> A <c>System.Boolean?</c> instance.</param>
            <param name="tid"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlDoctorRequestProviderBase.LabProcess(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the '_DoctorRequest_LabProcess' stored procedure. 
            </summary>	
            <param name="sample"> A <c>System.String</c> instance.</param>
            <param name="tid"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlEPrescriptionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.EPrescription"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlEPrescriptionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.EPrescription"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.Delete(ePrescription.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_prescriptionId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.EPrescription objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.EPrescription objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.EPrescription objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.EPrescription objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.GetByPrescriptionId(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ePrescription index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_prescriptionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.EPrescription"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.EPrescription})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.EPrescription object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.EPrescription)">
            <summary>
            	Inserts a ePrescription.Entities.EPrescription object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.EPrescription object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.EPrescription object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.EPrescription)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.EPrescription object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.EPrescription object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.EPrescriptionDetail"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.EPrescriptionDetail"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.Delete(ePrescription.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_prescriptionDetailId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.EPrescriptionDetail objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.EPrescriptionDetail objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.EPrescriptionDetail objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.EPrescriptionDetail objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.GetByPrescriptionId(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ePrescriptionDetail_ePrescription key.
            	FK_ePrescriptionDetail_ePrescription Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_prescriptionId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.EPrescriptionDetail objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.GetByPrescriptionDetailId(ePrescription.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ePrescriptionDetail index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_prescriptionDetailId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.EPrescriptionDetail"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.EPrescriptionDetail})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.EPrescriptionDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.EPrescriptionDetail)">
            <summary>
            	Inserts a ePrescription.Entities.EPrescriptionDetail object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.EPrescriptionDetail object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.EPrescriptionDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlEPrescriptionDetailProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.EPrescriptionDetail)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.EPrescriptionDetail object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.EPrescriptionDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlFavoritDetailProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.FavoritDetail"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlFavoritDetailProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.FavoritDetail"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.Delete(ePrescription.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.FavoritDetail objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.FavoritDetail objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.FavoritDetail objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.FavoritDetail objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.GetByFavouriteId(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_FavoritDetail_ID key.
            	FK_FavoritDetail_ID Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_favouriteId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.FavoritDetail objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.GetById(ePrescription.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_FavoritDetail index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.FavoritDetail"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.FavoritDetail})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.FavoritDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.FavoritDetail)">
            <summary>
            	Inserts a ePrescription.Entities.FavoritDetail object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.FavoritDetail object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.FavoritDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritDetailProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.FavoritDetail)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.FavoritDetail object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.FavoritDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlFavoritMasterProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.FavoritMaster"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlFavoritMasterProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.FavoritMaster"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.Delete(ePrescription.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_favouriteId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.FavoritMaster objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.FavoritMaster objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.FavoritMaster objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.FavoritMaster objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.GetByFavouriteId(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_FavoritMaster index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_favouriteId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.FavoritMaster"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.FavoritMaster})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.FavoritMaster object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.FavoritMaster)">
            <summary>
            	Inserts a ePrescription.Entities.FavoritMaster object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.FavoritMaster object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.FavoritMaster object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.FavoritMaster)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.FavoritMaster object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.FavoritMaster object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFavoritMasterProviderBase.Del(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the '_FavoritMaster_Del' stored procedure. 
            </summary>	
            <param name="favId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlFrequencyProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.Frequency"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlFrequencyProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlFrequencyProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.Frequency"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlFrequencyProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlFrequencyProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.Delete(ePrescription.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_frequencyId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Frequency objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.Frequency objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Frequency objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Frequency objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.GetByFrequencyId(ePrescription.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Frequency index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_frequencyId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.Frequency"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.Frequency})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.Frequency object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.Frequency)">
            <summary>
            	Inserts a ePrescription.Entities.Frequency object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.Frequency object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.Frequency object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlFrequencyProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.Frequency)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.Frequency object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.Frequency object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlMedReportProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.MedReport"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlMedReportProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlMedReportProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlMedReportProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.MedReport"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlMedReportProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlMedReportProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlMedReportProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlMedReportProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlMedReportProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlMedReportProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlMedReportProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlMedReportProviderBase.Delete(ePrescription.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_medId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlMedReportProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.MedReport objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlMedReportProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.MedReport objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlMedReportProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.MedReport objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlMedReportProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.MedReport objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlMedReportProviderBase.GetByMedId(ePrescription.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_MedReport index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_medId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.MedReport"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlMedReportProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.MedReport})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.MedReport object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlMedReportProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.MedReport)">
            <summary>
            	Inserts a ePrescription.Entities.MedReport object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.MedReport object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.MedReport object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlMedReportProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.MedReport)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.MedReport object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.MedReport object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlPackageProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.Package"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlPackageProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlPackageProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.Package"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlPackageProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlPackageProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlPackageProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlPackageProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlPackageProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageProviderBase.Delete(ePrescription.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_packageId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Package objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.Package objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Package objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Package objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageProviderBase.GetByPackageId(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Package index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_packageId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.Package"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.Package})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.Package object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.Package)">
            <summary>
            	Inserts a ePrescription.Entities.Package object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.Package object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.Package object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.Package)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.Package object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.Package object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlPackageDetailProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.PackageDetail"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageDetailProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlPackageDetailProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlPackageDetailProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.PackageDetail"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageDetailProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlPackageDetailProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageDetailProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlPackageDetailProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlPackageDetailProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlPackageDetailProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlPackageDetailProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageDetailProviderBase.Delete(ePrescription.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_packageDetailId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageDetailProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.PackageDetail objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageDetailProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.PackageDetail objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageDetailProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.PackageDetail objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageDetailProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.PackageDetail objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageDetailProviderBase.GetByPackageId(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_PackageDetail_Package key.
            	PK_PackageDetail_Package Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_packageId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.PackageDetail objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageDetailProviderBase.GetByPackageDetailId(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_PackageDetail index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_packageDetailId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.PackageDetail"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageDetailProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.PackageDetail})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.PackageDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageDetailProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.PackageDetail)">
            <summary>
            	Inserts a ePrescription.Entities.PackageDetail object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.PackageDetail object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.PackageDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlPackageDetailProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.PackageDetail)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.PackageDetail object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.PackageDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlRouteProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.Route"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlRouteProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlRouteProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.Route"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlRouteProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlRouteProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlRouteProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlRouteProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlRouteProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProviderBase.Delete(ePrescription.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_routeId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Route objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.Route objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Route objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Route objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProviderBase.GetByRouteId(ePrescription.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Route index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_routeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.Route"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.Route})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.Route object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.Route)">
            <summary>
            	Inserts a ePrescription.Entities.Route object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.Route object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.Route object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlRouteProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.Route)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.Route object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.Route object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlUserRolesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.UserRoles"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlUserRolesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlUserRolesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.UserRoles"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlUserRolesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlUserRolesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.Delete(ePrescription.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_roleId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.UserRoles objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.UserRoles objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.UserRoles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.UserRoles objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.GetByRoleId(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UserRoles index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_roleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.UserRoles"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.UserRoles})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.UserRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.UserRoles)">
            <summary>
            	Inserts a ePrescription.Entities.UserRoles object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.UserRoles object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.UserRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUserRolesProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.UserRoles)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.UserRoles object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.UserRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlUsersProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.Users"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlUsersProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlUsersProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.Users"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlUsersProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlUsersProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlUsersProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlUsersProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlUsersProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProviderBase.Delete(ePrescription.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_userName">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Users objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.Users objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Users objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.Users objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProviderBase.GetByUserName(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Users index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_userName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.Users"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.Users})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.Users object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.Users)">
            <summary>
            	Inserts a ePrescription.Entities.Users object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.Users object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.Users object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlUsersProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.Users)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.Users object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.Users object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVitalSignProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.VitalSign"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVitalSignProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVitalSignProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlVitalSignProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ePrescription.Entities.VitalSign"/> entity.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVitalSignProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVitalSignProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVitalSignProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.SqlVitalSignProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVitalSignProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVitalSignProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlVitalSignProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVitalSignProviderBase.Delete(ePrescription.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_vid">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVitalSignProviderBase.Find(ePrescription.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ePrescription.Entities.VitalSign objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVitalSignProviderBase.Find(ePrescription.Data.TransactionManager,ePrescription.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ePrescription.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ePrescription.Entities.VitalSign objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVitalSignProviderBase.GetAll(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.VitalSign objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVitalSignProviderBase.GetPaged(ePrescription.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ePrescription.Entities.VitalSign objects.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVitalSignProviderBase.GetByVid(ePrescription.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Vsign index.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="_vid"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ePrescription.Entities.VitalSign"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVitalSignProviderBase.BulkInsert(ePrescription.Data.TransactionManager,ePrescription.Entities.TList{ePrescription.Entities.VitalSign})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.VitalSign object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVitalSignProviderBase.Insert(ePrescription.Data.TransactionManager,ePrescription.Entities.VitalSign)">
            <summary>
            	Inserts a ePrescription.Entities.VitalSign object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.VitalSign object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ePrescription.Entities.VitalSign object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVitalSignProviderBase.Update(ePrescription.Data.TransactionManager,ePrescription.Entities.VitalSign)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object</param>
            <param name="entity">ePrescription.Entities.VitalSign object to update.</param>
            <remarks>
            	After updating the datasource, the ePrescription.Entities.VitalSign object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVitalSignProviderBase.GetByTid(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the '_VitalSign_GetByTid' stored procedure. 
            </summary>	
            <param name="tid"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:ePrescription.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVitalSignProviderBase.Update(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.String)">
            <summary>
            This method wraps the '_VitalSign_Update' stored procedure. 
            </summary>	
            <param name="tid"> A <c>System.String</c> instance.</param>
            <param name="temp"> A <c>System.String</c> instance.</param>
            <param name="pulse"> A <c>System.String</c> instance.</param>
            <param name="res"> A <c>System.String</c> instance.</param>
            <param name="press"> A <c>System.String</c> instance.</param>
            <param name="sato2"> A <c>System.String</c> instance.</param>
            <param name="gcs"> A <c>System.String</c> instance.</param>
            <param name="height"> A <c>System.String</c> instance.</param>
            <param name="weight"> A <c>System.String</c> instance.</param>
            <param name="createDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="user"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlVitalSignProviderBase.Insert(ePrescription.Data.TransactionManager,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.String)">
            <summary>
            This method wraps the '_VitalSign_Insert' stored procedure. 
            </summary>	
            <param name="tid"> A <c>System.String</c> instance.</param>
            <param name="patientCode"> A <c>System.String</c> instance.</param>
            <param name="temp"> A <c>System.String</c> instance.</param>
            <param name="pulse"> A <c>System.String</c> instance.</param>
            <param name="res"> A <c>System.String</c> instance.</param>
            <param name="press"> A <c>System.String</c> instance.</param>
            <param name="sato2"> A <c>System.String</c> instance.</param>
            <param name="gcs"> A <c>System.String</c> instance.</param>
            <param name="height"> A <c>System.String</c> instance.</param>
            <param name="weight"> A <c>System.String</c> instance.</param>
            <param name="createDate"> A <c>System.DateTime?</c> instance.</param>
            <param name="user"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ePrescription.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="T:ePrescription.Data.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:ePrescription.Data.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <see cref="T:ePrescription.Data.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.ClinicalStatsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.ClinicalStats"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlClinicalStatsProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlClinicalStatsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.PackageProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.Package"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlPackageProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlPackageProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.PackageDetailProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.PackageDetail"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlPackageDetailProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlPackageDetailProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.RouteProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.Route"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlRouteProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlRouteProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.UserRolesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.UserRoles"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlUserRolesProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlUserRolesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.UsersProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.Users"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlUsersProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlUsersProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.MedReportProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.MedReport"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlMedReportProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlMedReportProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.FrequencyProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.Frequency"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlFrequencyProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlFrequencyProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.FavoritMasterProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.FavoritMaster"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlFavoritMasterProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlFavoritMasterProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.DiaglistProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.Diaglist"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlDiaglistProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlDiaglistProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.DoctorRequestProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.DoctorRequest"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlDoctorRequestProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlDoctorRequestProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.EPrescriptionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.EPrescription"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlEPrescriptionProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlEPrescriptionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.EPrescriptionDetailProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.EPrescriptionDetail"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlEPrescriptionDetailProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlEPrescriptionDetailProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.FavoritDetailProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.FavoritDetail"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlFavoritDetailProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlFavoritDetailProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.VitalSignProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.VitalSign"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVitalSignProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVitalSignProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.VrDoctorDoneProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.VrDoctorDone"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrDoctorDoneProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrDoctorDoneProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.VrDoctorwipProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.VrDoctorwip"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrDoctorwipProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrDoctorwipProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.VrEPresDetailProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.VrEPresDetail"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrEPresDetailProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrEPresDetailProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.VrLabProcessingProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.VrLabProcessing"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrLabProcessingProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrLabProcessingProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.VrLabReceiveProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.VrLabReceive"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrLabReceiveProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrLabReceiveProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.VrLabReqProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.VrLabReq"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrLabReqProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrLabReqProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.VrLabResultProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.VrLabResult"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrLabResultProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrLabResultProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.VrLabwipProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.VrLabwip"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrLabwipProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrLabwipProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.VrMedProProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.VrMedPro"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrMedProProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrMedProProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.VrNurseProcessedPatientsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.VrNurseProcessedPatients"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrNurseProcessedPatientsProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrNurseProcessedPatientsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.VrReceptionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.VrReception"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrReceptionProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrReceptionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.VrReceptionDoneProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.VrReceptionDone"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrReceptionDoneProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrReceptionDoneProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.VrReceptionStartProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.VrReceptionStart"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrReceptionStartProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrReceptionStartProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.VrTidChargedCodeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.VrTidChargedCode"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrTidChargedCodeProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrTidChargedCodeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.VrUnitTableProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ePrescription.Entities.VrUnitTable"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrUnitTableProvider">
            <summary>
            Gets the current <see cref="P:ePrescription.Data.SqlClient.SqlNetTiersProvider.SqlVrUnitTableProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(ePrescription.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(ePrescription.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(ePrescription.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(ePrescription.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(ePrescription.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(ePrescription.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(ePrescription.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(ePrescription.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(ePrescription.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(ePrescription.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(ePrescription.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(ePrescription.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="T:ePrescription.Data.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="P:ePrescription.Data.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:ePrescription.Data.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:ePrescription.Data.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:ePrescription.Data.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:ePrescription.Data.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:ePrescription.Data.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:ePrescription.Data.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:ePrescription.Data.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:ePrescription.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,ePrescription.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="T:ePrescription.Data.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="P:ePrescription.Data.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="M:ePrescription.Data.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="T:ePrescription.Data.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:ePrescription.Data.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:ePrescription.Data.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:ePrescription.Data.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:ePrescription.Data.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
    </members>
</doc>
