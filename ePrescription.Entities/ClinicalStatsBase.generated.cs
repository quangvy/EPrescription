
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ClinicalStats.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using ePrescription.Entities.Validation;
#endregion

namespace ePrescription.Entities
{
	///<summary>
	/// An object representation of the 'ClinicalStats' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ClinicalStatsBase : EntityBase, IClinicalStats, IEntityId<ClinicalStatsKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ClinicalStatsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ClinicalStatsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ClinicalStatsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ClinicalStats> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ClinicalStatsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ClinicalStatsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ClinicalStatsBase"/> instance.
		///</summary>
		public ClinicalStatsBase()
		{
			this.entityData = new ClinicalStatsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ClinicalStatsBase"/> instance.
		///</summary>
		///<param name="_patientCode"></param>
		///<param name="_tid"></param>
		///<param name="_firstName"></param>
		///<param name="_lastName"></param>
		///<param name="_dob"></param>
		///<param name="_sex"></param>
		///<param name="_nationality"></param>
		///<param name="_patientStart"></param>
		///<param name="_vitalSign"></param>
		///<param name="_lab"></param>
		///<param name="_xray"></param>
		///<param name="_ultraSound"></param>
		///<param name="_cardiology"></param>
		///<param name="_medReport"></param>
		///<param name="_chargedCodes"></param>
		///<param name="_isCompleted"></param>
		///<param name="_createDate"></param>
		public ClinicalStatsBase(System.String _patientCode, System.String _tid, System.String _firstName, 
			System.String _lastName, System.DateTime _dob, System.String _sex, System.String _nationality, 
			System.Boolean? _patientStart, System.String _vitalSign, System.String _lab, System.String _xray, 
			System.String _ultraSound, System.String _cardiology, System.String _medReport, System.String _chargedCodes, 
			System.Boolean? _isCompleted, System.DateTime? _createDate)
		{
			this.entityData = new ClinicalStatsEntityData();
			this.backupData = null;

			this.PatientCode = _patientCode;
			this.Tid = _tid;
			this.FirstName = _firstName;
			this.LastName = _lastName;
			this.Dob = _dob;
			this.Sex = _sex;
			this.Nationality = _nationality;
			this.PatientStart = _patientStart;
			this.VitalSign = _vitalSign;
			this.Lab = _lab;
			this.Xray = _xray;
			this.UltraSound = _ultraSound;
			this.Cardiology = _cardiology;
			this.MedReport = _medReport;
			this.ChargedCodes = _chargedCodes;
			this.IsCompleted = _isCompleted;
			this.CreateDate = _createDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ClinicalStats"/> instance.
		///</summary>
		///<param name="_patientCode"></param>
		///<param name="_tid"></param>
		///<param name="_firstName"></param>
		///<param name="_lastName"></param>
		///<param name="_dob"></param>
		///<param name="_sex"></param>
		///<param name="_nationality"></param>
		///<param name="_patientStart"></param>
		///<param name="_vitalSign"></param>
		///<param name="_lab"></param>
		///<param name="_xray"></param>
		///<param name="_ultraSound"></param>
		///<param name="_cardiology"></param>
		///<param name="_medReport"></param>
		///<param name="_chargedCodes"></param>
		///<param name="_isCompleted"></param>
		///<param name="_createDate"></param>
		public static ClinicalStats CreateClinicalStats(System.String _patientCode, System.String _tid, System.String _firstName, 
			System.String _lastName, System.DateTime _dob, System.String _sex, System.String _nationality, 
			System.Boolean? _patientStart, System.String _vitalSign, System.String _lab, System.String _xray, 
			System.String _ultraSound, System.String _cardiology, System.String _medReport, System.String _chargedCodes, 
			System.Boolean? _isCompleted, System.DateTime? _createDate)
		{
			ClinicalStats newClinicalStats = new ClinicalStats();
			newClinicalStats.PatientCode = _patientCode;
			newClinicalStats.Tid = _tid;
			newClinicalStats.FirstName = _firstName;
			newClinicalStats.LastName = _lastName;
			newClinicalStats.Dob = _dob;
			newClinicalStats.Sex = _sex;
			newClinicalStats.Nationality = _nationality;
			newClinicalStats.PatientStart = _patientStart;
			newClinicalStats.VitalSign = _vitalSign;
			newClinicalStats.Lab = _lab;
			newClinicalStats.Xray = _xray;
			newClinicalStats.UltraSound = _ultraSound;
			newClinicalStats.Cardiology = _cardiology;
			newClinicalStats.MedReport = _medReport;
			newClinicalStats.ChargedCodes = _chargedCodes;
			newClinicalStats.IsCompleted = _isCompleted;
			newClinicalStats.CreateDate = _createDate;
			return newClinicalStats;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the StatId property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "StatId is required")]




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 StatId
		{
			get
			{
				return this.entityData.StatId; 
			}
			
			set
			{
				if (this.entityData.StatId == value)
					return;
				
                OnPropertyChanging("StatId");                    
				OnColumnChanging(ClinicalStatsColumn.StatId, this.entityData.StatId);
				this.entityData.StatId = value;
				this.EntityId.StatId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClinicalStatsColumn.StatId, this.entityData.StatId);
				OnPropertyChanged("StatId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PatientCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "PatientCode is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String PatientCode
		{
			get
			{
				return this.entityData.PatientCode; 
			}
			
			set
			{
				if (this.entityData.PatientCode == value)
					return;
				
                OnPropertyChanging("PatientCode");                    
				OnColumnChanging(ClinicalStatsColumn.PatientCode, this.entityData.PatientCode);
				this.entityData.PatientCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClinicalStatsColumn.PatientCode, this.entityData.PatientCode);
				OnPropertyChanged("PatientCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Tid property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "Tid is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Tid
		{
			get
			{
				return this.entityData.Tid; 
			}
			
			set
			{
				if (this.entityData.Tid == value)
					return;
				
                OnPropertyChanging("Tid");                    
				OnColumnChanging(ClinicalStatsColumn.Tid, this.entityData.Tid);
				this.entityData.Tid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClinicalStatsColumn.Tid, this.entityData.Tid);
				OnPropertyChanged("Tid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FirstName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "FirstName is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 30)]
		public virtual System.String FirstName
		{
			get
			{
				return this.entityData.FirstName; 
			}
			
			set
			{
				if (this.entityData.FirstName == value)
					return;
				
                OnPropertyChanging("FirstName");                    
				OnColumnChanging(ClinicalStatsColumn.FirstName, this.entityData.FirstName);
				this.entityData.FirstName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClinicalStatsColumn.FirstName, this.entityData.FirstName);
				OnPropertyChanged("FirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "LastName is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 30)]
		public virtual System.String LastName
		{
			get
			{
				return this.entityData.LastName; 
			}
			
			set
			{
				if (this.entityData.LastName == value)
					return;
				
                OnPropertyChanging("LastName");                    
				OnColumnChanging(ClinicalStatsColumn.LastName, this.entityData.LastName);
				this.entityData.LastName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClinicalStatsColumn.LastName, this.entityData.LastName);
				OnPropertyChanged("LastName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Dob property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "Dob is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime Dob
		{
			get
			{
				return this.entityData.Dob; 
			}
			
			set
			{
				if (this.entityData.Dob == value)
					return;
				
                OnPropertyChanging("Dob");                    
				OnColumnChanging(ClinicalStatsColumn.Dob, this.entityData.Dob);
				this.entityData.Dob = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClinicalStatsColumn.Dob, this.entityData.Dob);
				OnPropertyChanged("Dob");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Sex property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "Sex is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String Sex
		{
			get
			{
				return this.entityData.Sex; 
			}
			
			set
			{
				if (this.entityData.Sex == value)
					return;
				
                OnPropertyChanging("Sex");                    
				OnColumnChanging(ClinicalStatsColumn.Sex, this.entityData.Sex);
				this.entityData.Sex = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClinicalStatsColumn.Sex, this.entityData.Sex);
				OnPropertyChanged("Sex");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Nationality property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "Nationality is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Nationality
		{
			get
			{
				return this.entityData.Nationality; 
			}
			
			set
			{
				if (this.entityData.Nationality == value)
					return;
				
                OnPropertyChanging("Nationality");                    
				OnColumnChanging(ClinicalStatsColumn.Nationality, this.entityData.Nationality);
				this.entityData.Nationality = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClinicalStatsColumn.Nationality, this.entityData.Nationality);
				OnPropertyChanged("Nationality");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PatientStart property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? PatientStart
		{
			get
			{
				return this.entityData.PatientStart; 
			}
			
			set
			{
				if (this.entityData.PatientStart == value)
					return;
				
                OnPropertyChanging("PatientStart");                    
				OnColumnChanging(ClinicalStatsColumn.PatientStart, this.entityData.PatientStart);
				this.entityData.PatientStart = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClinicalStatsColumn.PatientStart, this.entityData.PatientStart);
				OnPropertyChanged("PatientStart");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the VitalSign property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String VitalSign
		{
			get
			{
				return this.entityData.VitalSign; 
			}
			
			set
			{
				if (this.entityData.VitalSign == value)
					return;
				
                OnPropertyChanging("VitalSign");                    
				OnColumnChanging(ClinicalStatsColumn.VitalSign, this.entityData.VitalSign);
				this.entityData.VitalSign = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClinicalStatsColumn.VitalSign, this.entityData.VitalSign);
				OnPropertyChanged("VitalSign");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Lab property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Lab
		{
			get
			{
				return this.entityData.Lab; 
			}
			
			set
			{
				if (this.entityData.Lab == value)
					return;
				
                OnPropertyChanging("Lab");                    
				OnColumnChanging(ClinicalStatsColumn.Lab, this.entityData.Lab);
				this.entityData.Lab = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClinicalStatsColumn.Lab, this.entityData.Lab);
				OnPropertyChanged("Lab");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Xray property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Xray
		{
			get
			{
				return this.entityData.Xray; 
			}
			
			set
			{
				if (this.entityData.Xray == value)
					return;
				
                OnPropertyChanging("Xray");                    
				OnColumnChanging(ClinicalStatsColumn.Xray, this.entityData.Xray);
				this.entityData.Xray = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClinicalStatsColumn.Xray, this.entityData.Xray);
				OnPropertyChanged("Xray");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UltraSound property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String UltraSound
		{
			get
			{
				return this.entityData.UltraSound; 
			}
			
			set
			{
				if (this.entityData.UltraSound == value)
					return;
				
                OnPropertyChanging("UltraSound");                    
				OnColumnChanging(ClinicalStatsColumn.UltraSound, this.entityData.UltraSound);
				this.entityData.UltraSound = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClinicalStatsColumn.UltraSound, this.entityData.UltraSound);
				OnPropertyChanged("UltraSound");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Cardiology property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Cardiology
		{
			get
			{
				return this.entityData.Cardiology; 
			}
			
			set
			{
				if (this.entityData.Cardiology == value)
					return;
				
                OnPropertyChanging("Cardiology");                    
				OnColumnChanging(ClinicalStatsColumn.Cardiology, this.entityData.Cardiology);
				this.entityData.Cardiology = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClinicalStatsColumn.Cardiology, this.entityData.Cardiology);
				OnPropertyChanged("Cardiology");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MedReport property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MedReport
		{
			get
			{
				return this.entityData.MedReport; 
			}
			
			set
			{
				if (this.entityData.MedReport == value)
					return;
				
                OnPropertyChanging("MedReport");                    
				OnColumnChanging(ClinicalStatsColumn.MedReport, this.entityData.MedReport);
				this.entityData.MedReport = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClinicalStatsColumn.MedReport, this.entityData.MedReport);
				OnPropertyChanged("MedReport");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ChargedCodes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String ChargedCodes
		{
			get
			{
				return this.entityData.ChargedCodes; 
			}
			
			set
			{
				if (this.entityData.ChargedCodes == value)
					return;
				
                OnPropertyChanging("ChargedCodes");                    
				OnColumnChanging(ClinicalStatsColumn.ChargedCodes, this.entityData.ChargedCodes);
				this.entityData.ChargedCodes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClinicalStatsColumn.ChargedCodes, this.entityData.ChargedCodes);
				OnPropertyChanged("ChargedCodes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsCompleted property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsCompleted
		{
			get
			{
				return this.entityData.IsCompleted; 
			}
			
			set
			{
				if (this.entityData.IsCompleted == value)
					return;
				
                OnPropertyChanging("IsCompleted");                    
				OnColumnChanging(ClinicalStatsColumn.IsCompleted, this.entityData.IsCompleted);
				this.entityData.IsCompleted = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClinicalStatsColumn.IsCompleted, this.entityData.IsCompleted);
				OnPropertyChanged("IsCompleted");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreateDate
		{
			get
			{
				return this.entityData.CreateDate; 
			}
			
			set
			{
				if (this.entityData.CreateDate == value)
					return;
				
                OnPropertyChanging("CreateDate");                    
				OnColumnChanging(ClinicalStatsColumn.CreateDate, this.entityData.CreateDate);
				this.entityData.CreateDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ClinicalStatsColumn.CreateDate, this.entityData.CreateDate);
				OnPropertyChanged("CreateDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("PatientCode", "Patient Code"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PatientCode", "Patient Code", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Tid", "Tid"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Tid", "Tid", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("FirstName", "First Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FirstName", "First Name", 30));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("LastName", "Last Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LastName", "Last Name", 30));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Sex", "Sex"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Sex", "Sex", 10));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Nationality", "Nationality"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Nationality", "Nationality", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("VitalSign", "Vital Sign", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Lab", "Lab", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Xray", "Xray", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UltraSound", "Ultra Sound", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Cardiology", "Cardiology", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MedReport", "Med Report", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ChargedCodes", "Charged Codes", 255));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ClinicalStats"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"StatId", "PatientCode", "TID", "FirstName", "LastName", "DOB", "Sex", "Nationality", "PatientStart", "VitalSign", "Lab", "Xray", "UltraSound", "Cardiology", "MedReport", "ChargedCodes", "IsCompleted", "CreateDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ClinicalStatsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ClinicalStats) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ClinicalStats>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ClinicalStats);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ClinicalStats Entity 
		///</summary>
		protected virtual ClinicalStats Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ClinicalStats copy = new ClinicalStats();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.StatId = this.StatId;
				copy.PatientCode = this.PatientCode;
				copy.Tid = this.Tid;
				copy.FirstName = this.FirstName;
				copy.LastName = this.LastName;
				copy.Dob = this.Dob;
				copy.Sex = this.Sex;
				copy.Nationality = this.Nationality;
				copy.PatientStart = this.PatientStart;
				copy.VitalSign = this.VitalSign;
				copy.Lab = this.Lab;
				copy.Xray = this.Xray;
				copy.UltraSound = this.UltraSound;
				copy.Cardiology = this.Cardiology;
				copy.MedReport = this.MedReport;
				copy.ChargedCodes = this.ChargedCodes;
				copy.IsCompleted = this.IsCompleted;
				copy.CreateDate = this.CreateDate;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ClinicalStats Entity 
		///</summary>
		public virtual ClinicalStats Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ClinicalStats Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ClinicalStats DeepCopy()
		{
			return EntityHelper.Clone<ClinicalStats>(this as ClinicalStats);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ClinicalStatsEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ClinicalStatsEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ClinicalStatsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ClinicalStatsColumn column)
		{
			switch(column)
			{
					case ClinicalStatsColumn.StatId:
					return entityData.StatId != _originalData.StatId;
					case ClinicalStatsColumn.PatientCode:
					return entityData.PatientCode != _originalData.PatientCode;
					case ClinicalStatsColumn.Tid:
					return entityData.Tid != _originalData.Tid;
					case ClinicalStatsColumn.FirstName:
					return entityData.FirstName != _originalData.FirstName;
					case ClinicalStatsColumn.LastName:
					return entityData.LastName != _originalData.LastName;
					case ClinicalStatsColumn.Dob:
					return entityData.Dob != _originalData.Dob;
					case ClinicalStatsColumn.Sex:
					return entityData.Sex != _originalData.Sex;
					case ClinicalStatsColumn.Nationality:
					return entityData.Nationality != _originalData.Nationality;
					case ClinicalStatsColumn.PatientStart:
					return entityData.PatientStart != _originalData.PatientStart;
					case ClinicalStatsColumn.VitalSign:
					return entityData.VitalSign != _originalData.VitalSign;
					case ClinicalStatsColumn.Lab:
					return entityData.Lab != _originalData.Lab;
					case ClinicalStatsColumn.Xray:
					return entityData.Xray != _originalData.Xray;
					case ClinicalStatsColumn.UltraSound:
					return entityData.UltraSound != _originalData.UltraSound;
					case ClinicalStatsColumn.Cardiology:
					return entityData.Cardiology != _originalData.Cardiology;
					case ClinicalStatsColumn.MedReport:
					return entityData.MedReport != _originalData.MedReport;
					case ClinicalStatsColumn.ChargedCodes:
					return entityData.ChargedCodes != _originalData.ChargedCodes;
					case ClinicalStatsColumn.IsCompleted:
					return entityData.IsCompleted != _originalData.IsCompleted;
					case ClinicalStatsColumn.CreateDate:
					return entityData.CreateDate != _originalData.CreateDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ClinicalStatsColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.StatId != _originalData.StatId;
			result = result || entityData.PatientCode != _originalData.PatientCode;
			result = result || entityData.Tid != _originalData.Tid;
			result = result || entityData.FirstName != _originalData.FirstName;
			result = result || entityData.LastName != _originalData.LastName;
			result = result || entityData.Dob != _originalData.Dob;
			result = result || entityData.Sex != _originalData.Sex;
			result = result || entityData.Nationality != _originalData.Nationality;
			result = result || entityData.PatientStart != _originalData.PatientStart;
			result = result || entityData.VitalSign != _originalData.VitalSign;
			result = result || entityData.Lab != _originalData.Lab;
			result = result || entityData.Xray != _originalData.Xray;
			result = result || entityData.UltraSound != _originalData.UltraSound;
			result = result || entityData.Cardiology != _originalData.Cardiology;
			result = result || entityData.MedReport != _originalData.MedReport;
			result = result || entityData.ChargedCodes != _originalData.ChargedCodes;
			result = result || entityData.IsCompleted != _originalData.IsCompleted;
			result = result || entityData.CreateDate != _originalData.CreateDate;
			return result;
		}	
		
		///<summary>
		///  Returns a ClinicalStats Entity with the original data.
		///</summary>
		public ClinicalStats GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateClinicalStats(
				_originalData.PatientCode,
				_originalData.Tid,
				_originalData.FirstName,
				_originalData.LastName,
				_originalData.Dob,
				_originalData.Sex,
				_originalData.Nationality,
				_originalData.PatientStart,
				_originalData.VitalSign,
				_originalData.Lab,
				_originalData.Xray,
				_originalData.UltraSound,
				_originalData.Cardiology,
				_originalData.MedReport,
				_originalData.ChargedCodes,
				_originalData.IsCompleted,
				_originalData.CreateDate
				);
				
			return (ClinicalStats)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ClinicalStatsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ClinicalStatsBase)
				return ValueEquals(this, (ClinicalStatsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ClinicalStatsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.StatId.GetHashCode() ^ 
					this.PatientCode.GetHashCode() ^ 
					this.Tid.GetHashCode() ^ 
					this.FirstName.GetHashCode() ^ 
					this.LastName.GetHashCode() ^ 
					this.Dob.GetHashCode() ^ 
					this.Sex.GetHashCode() ^ 
					this.Nationality.GetHashCode() ^ 
					((this.PatientStart == null) ? string.Empty : this.PatientStart.ToString()).GetHashCode() ^ 
					((this.VitalSign == null) ? string.Empty : this.VitalSign.ToString()).GetHashCode() ^ 
					((this.Lab == null) ? string.Empty : this.Lab.ToString()).GetHashCode() ^ 
					((this.Xray == null) ? string.Empty : this.Xray.ToString()).GetHashCode() ^ 
					((this.UltraSound == null) ? string.Empty : this.UltraSound.ToString()).GetHashCode() ^ 
					((this.Cardiology == null) ? string.Empty : this.Cardiology.ToString()).GetHashCode() ^ 
					((this.MedReport == null) ? string.Empty : this.MedReport.ToString()).GetHashCode() ^ 
					((this.ChargedCodes == null) ? string.Empty : this.ChargedCodes.ToString()).GetHashCode() ^ 
					((this.IsCompleted == null) ? string.Empty : this.IsCompleted.ToString()).GetHashCode() ^ 
					((this.CreateDate == null) ? string.Empty : this.CreateDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ClinicalStatsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ClinicalStatsBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ClinicalStatsBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ClinicalStatsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ClinicalStatsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ClinicalStatsBase Object1, ClinicalStatsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.StatId != Object2.StatId)
				equal = false;
			if (Object1.PatientCode != Object2.PatientCode)
				equal = false;
			if (Object1.Tid != Object2.Tid)
				equal = false;
			if (Object1.FirstName != Object2.FirstName)
				equal = false;
			if (Object1.LastName != Object2.LastName)
				equal = false;
			if (Object1.Dob != Object2.Dob)
				equal = false;
			if (Object1.Sex != Object2.Sex)
				equal = false;
			if (Object1.Nationality != Object2.Nationality)
				equal = false;
			if ( Object1.PatientStart != null && Object2.PatientStart != null )
			{
				if (Object1.PatientStart != Object2.PatientStart)
					equal = false;
			}
			else if (Object1.PatientStart == null ^ Object2.PatientStart == null )
			{
				equal = false;
			}
			if ( Object1.VitalSign != null && Object2.VitalSign != null )
			{
				if (Object1.VitalSign != Object2.VitalSign)
					equal = false;
			}
			else if (Object1.VitalSign == null ^ Object2.VitalSign == null )
			{
				equal = false;
			}
			if ( Object1.Lab != null && Object2.Lab != null )
			{
				if (Object1.Lab != Object2.Lab)
					equal = false;
			}
			else if (Object1.Lab == null ^ Object2.Lab == null )
			{
				equal = false;
			}
			if ( Object1.Xray != null && Object2.Xray != null )
			{
				if (Object1.Xray != Object2.Xray)
					equal = false;
			}
			else if (Object1.Xray == null ^ Object2.Xray == null )
			{
				equal = false;
			}
			if ( Object1.UltraSound != null && Object2.UltraSound != null )
			{
				if (Object1.UltraSound != Object2.UltraSound)
					equal = false;
			}
			else if (Object1.UltraSound == null ^ Object2.UltraSound == null )
			{
				equal = false;
			}
			if ( Object1.Cardiology != null && Object2.Cardiology != null )
			{
				if (Object1.Cardiology != Object2.Cardiology)
					equal = false;
			}
			else if (Object1.Cardiology == null ^ Object2.Cardiology == null )
			{
				equal = false;
			}
			if ( Object1.MedReport != null && Object2.MedReport != null )
			{
				if (Object1.MedReport != Object2.MedReport)
					equal = false;
			}
			else if (Object1.MedReport == null ^ Object2.MedReport == null )
			{
				equal = false;
			}
			if ( Object1.ChargedCodes != null && Object2.ChargedCodes != null )
			{
				if (Object1.ChargedCodes != Object2.ChargedCodes)
					equal = false;
			}
			else if (Object1.ChargedCodes == null ^ Object2.ChargedCodes == null )
			{
				equal = false;
			}
			if ( Object1.IsCompleted != null && Object2.IsCompleted != null )
			{
				if (Object1.IsCompleted != Object2.IsCompleted)
					equal = false;
			}
			else if (Object1.IsCompleted == null ^ Object2.IsCompleted == null )
			{
				equal = false;
			}
			if ( Object1.CreateDate != null && Object2.CreateDate != null )
			{
				if (Object1.CreateDate != Object2.CreateDate)
					equal = false;
			}
			else if (Object1.CreateDate == null ^ Object2.CreateDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ClinicalStatsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ClinicalStatsComparer GetComparer()
        {
            return new ClinicalStatsComparer();
        }
        */

        // Comparer delegates back to ClinicalStats
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ClinicalStats rhs, ClinicalStatsColumn which)
        {
            switch (which)
            {
            	
            	
            	case ClinicalStatsColumn.StatId:
            		return this.StatId.CompareTo(rhs.StatId);
            		
            		                 
            	
            	
            	case ClinicalStatsColumn.PatientCode:
            		return this.PatientCode.CompareTo(rhs.PatientCode);
            		
            		                 
            	
            	
            	case ClinicalStatsColumn.Tid:
            		return this.Tid.CompareTo(rhs.Tid);
            		
            		                 
            	
            	
            	case ClinicalStatsColumn.FirstName:
            		return this.FirstName.CompareTo(rhs.FirstName);
            		
            		                 
            	
            	
            	case ClinicalStatsColumn.LastName:
            		return this.LastName.CompareTo(rhs.LastName);
            		
            		                 
            	
            	
            	case ClinicalStatsColumn.Dob:
            		return this.Dob.CompareTo(rhs.Dob);
            		
            		                 
            	
            	
            	case ClinicalStatsColumn.Sex:
            		return this.Sex.CompareTo(rhs.Sex);
            		
            		                 
            	
            	
            	case ClinicalStatsColumn.Nationality:
            		return this.Nationality.CompareTo(rhs.Nationality);
            		
            		                 
            	
            	
            	case ClinicalStatsColumn.PatientStart:
            		return this.PatientStart.Value.CompareTo(rhs.PatientStart.Value);
            		
            		                 
            	
            	
            	case ClinicalStatsColumn.VitalSign:
            		return this.VitalSign.CompareTo(rhs.VitalSign);
            		
            		                 
            	
            	
            	case ClinicalStatsColumn.Lab:
            		return this.Lab.CompareTo(rhs.Lab);
            		
            		                 
            	
            	
            	case ClinicalStatsColumn.Xray:
            		return this.Xray.CompareTo(rhs.Xray);
            		
            		                 
            	
            	
            	case ClinicalStatsColumn.UltraSound:
            		return this.UltraSound.CompareTo(rhs.UltraSound);
            		
            		                 
            	
            	
            	case ClinicalStatsColumn.Cardiology:
            		return this.Cardiology.CompareTo(rhs.Cardiology);
            		
            		                 
            	
            	
            	case ClinicalStatsColumn.MedReport:
            		return this.MedReport.CompareTo(rhs.MedReport);
            		
            		                 
            	
            	
            	case ClinicalStatsColumn.ChargedCodes:
            		return this.ChargedCodes.CompareTo(rhs.ChargedCodes);
            		
            		                 
            	
            	
            	case ClinicalStatsColumn.IsCompleted:
            		return this.IsCompleted.Value.CompareTo(rhs.IsCompleted.Value);
            		
            		                 
            	
            	
            	case ClinicalStatsColumn.CreateDate:
            		return this.CreateDate.Value.CompareTo(rhs.CreateDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ClinicalStatsKey> Members
		
		// member variable for the EntityId property
		private ClinicalStatsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ClinicalStatsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ClinicalStatsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ClinicalStats")
					.Append("|").Append( this.StatId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{19}{18}- StatId: {0}{18}- PatientCode: {1}{18}- Tid: {2}{18}- FirstName: {3}{18}- LastName: {4}{18}- Dob: {5}{18}- Sex: {6}{18}- Nationality: {7}{18}- PatientStart: {8}{18}- VitalSign: {9}{18}- Lab: {10}{18}- Xray: {11}{18}- UltraSound: {12}{18}- Cardiology: {13}{18}- MedReport: {14}{18}- ChargedCodes: {15}{18}- IsCompleted: {16}{18}- CreateDate: {17}{18}{20}", 
				this.StatId,
				this.PatientCode,
				this.Tid,
				this.FirstName,
				this.LastName,
				this.Dob,
				this.Sex,
				this.Nationality,
				(this.PatientStart == null) ? string.Empty : this.PatientStart.ToString(),
				(this.VitalSign == null) ? string.Empty : this.VitalSign.ToString(),
				(this.Lab == null) ? string.Empty : this.Lab.ToString(),
				(this.Xray == null) ? string.Empty : this.Xray.ToString(),
				(this.UltraSound == null) ? string.Empty : this.UltraSound.ToString(),
				(this.Cardiology == null) ? string.Empty : this.Cardiology.ToString(),
				(this.MedReport == null) ? string.Empty : this.MedReport.ToString(),
				(this.ChargedCodes == null) ? string.Empty : this.ChargedCodes.ToString(),
				(this.IsCompleted == null) ? string.Empty : this.IsCompleted.ToString(),
				(this.CreateDate == null) ? string.Empty : this.CreateDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ClinicalStats' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ClinicalStatsEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// StatId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ClinicalStats"</remarks>
		public System.Int64 StatId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// PatientCode : 
		/// </summary>
		public System.String PatientCode = string.Empty;
		
		/// <summary>
		/// TID : 
		/// </summary>
		public System.String Tid = string.Empty;
		
		/// <summary>
		/// FirstName : 
		/// </summary>
		public System.String FirstName = string.Empty;
		
		/// <summary>
		/// LastName : 
		/// </summary>
		public System.String LastName = string.Empty;
		
		/// <summary>
		/// DOB : 
		/// </summary>
		public System.DateTime Dob = DateTime.MinValue;
		
		/// <summary>
		/// Sex : 
		/// </summary>
		public System.String Sex = string.Empty;
		
		/// <summary>
		/// Nationality : 
		/// </summary>
		public System.String Nationality = string.Empty;
		
		/// <summary>
		/// PatientStart : 
		/// </summary>
		public System.Boolean? PatientStart = null;
		
		/// <summary>
		/// VitalSign : 
		/// </summary>
		public System.String VitalSign = null;
		
		/// <summary>
		/// Lab : 
		/// </summary>
		public System.String Lab = null;
		
		/// <summary>
		/// Xray : 
		/// </summary>
		public System.String Xray = null;
		
		/// <summary>
		/// UltraSound : 
		/// </summary>
		public System.String UltraSound = null;
		
		/// <summary>
		/// Cardiology : 
		/// </summary>
		public System.String Cardiology = null;
		
		/// <summary>
		/// MedReport : 
		/// </summary>
		public System.String MedReport = null;
		
		/// <summary>
		/// ChargedCodes : 
		/// </summary>
		public System.String ChargedCodes = null;
		
		/// <summary>
		/// IsCompleted : 
		/// </summary>
		public System.Boolean? IsCompleted = null;
		
		/// <summary>
		/// CreateDate : 
		/// </summary>
		public System.DateTime? CreateDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ClinicalStatsEntityData _tmp = new ClinicalStatsEntityData();
						
			_tmp.StatId = this.StatId;
			
			_tmp.PatientCode = this.PatientCode;
			_tmp.Tid = this.Tid;
			_tmp.FirstName = this.FirstName;
			_tmp.LastName = this.LastName;
			_tmp.Dob = this.Dob;
			_tmp.Sex = this.Sex;
			_tmp.Nationality = this.Nationality;
			_tmp.PatientStart = this.PatientStart;
			_tmp.VitalSign = this.VitalSign;
			_tmp.Lab = this.Lab;
			_tmp.Xray = this.Xray;
			_tmp.UltraSound = this.UltraSound;
			_tmp.Cardiology = this.Cardiology;
			_tmp.MedReport = this.MedReport;
			_tmp.ChargedCodes = this.ChargedCodes;
			_tmp.IsCompleted = this.IsCompleted;
			_tmp.CreateDate = this.CreateDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ClinicalStatsEntityData _tmp = new ClinicalStatsEntityData();
						
			_tmp.StatId = this.StatId;
			
			_tmp.PatientCode = this.PatientCode;
			_tmp.Tid = this.Tid;
			_tmp.FirstName = this.FirstName;
			_tmp.LastName = this.LastName;
			_tmp.Dob = this.Dob;
			_tmp.Sex = this.Sex;
			_tmp.Nationality = this.Nationality;
			_tmp.PatientStart = this.PatientStart;
			_tmp.VitalSign = this.VitalSign;
			_tmp.Lab = this.Lab;
			_tmp.Xray = this.Xray;
			_tmp.UltraSound = this.UltraSound;
			_tmp.Cardiology = this.Cardiology;
			_tmp.MedReport = this.MedReport;
			_tmp.ChargedCodes = this.ChargedCodes;
			_tmp.IsCompleted = this.IsCompleted;
			_tmp.CreateDate = this.CreateDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClinicalStatsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ClinicalStatsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClinicalStatsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ClinicalStatsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClinicalStatsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ClinicalStatsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				ClinicalStatsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ClinicalStatsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ClinicalStatsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ClinicalStatsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ClinicalStatsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ClinicalStatsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ClinicalStatsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ClinicalStats"/> object.
	/// </remarks>
	public class ClinicalStatsEventArgs : System.EventArgs
	{
		private ClinicalStatsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ClinicalStatsEventArgs class.
		///</summary>
		public ClinicalStatsEventArgs(ClinicalStatsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ClinicalStatsEventArgs class.
		///</summary>
		public ClinicalStatsEventArgs(ClinicalStatsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ClinicalStatsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ClinicalStatsColumn" />
		public ClinicalStatsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ClinicalStats related events.
	///</summary>
	public delegate void ClinicalStatsEventHandler(object sender, ClinicalStatsEventArgs e);
	
	#region ClinicalStatsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ClinicalStatsComparer : System.Collections.Generic.IComparer<ClinicalStats>
	{
		ClinicalStatsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ClinicalStatsComparer"/> class.
        /// </summary>
		public ClinicalStatsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ClinicalStatsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ClinicalStatsComparer(ClinicalStatsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="ClinicalStats"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="ClinicalStats"/> to compare.</param>
        /// <param name="b">The second <c>ClinicalStats</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ClinicalStats a, ClinicalStats b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ClinicalStats entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ClinicalStats a, ClinicalStats b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ClinicalStatsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ClinicalStatsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ClinicalStats"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ClinicalStatsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ClinicalStatsKey class.
		/// </summary>
		public ClinicalStatsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ClinicalStatsKey class.
		/// </summary>
		public ClinicalStatsKey(ClinicalStatsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.StatId = entity.StatId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ClinicalStatsKey class.
		/// </summary>
		public ClinicalStatsKey(System.Int64 _statId)
		{
			#region Init Properties

			this.StatId = _statId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ClinicalStatsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ClinicalStatsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the StatId property
		private System.Int64 _statId;
		
		/// <summary>
		/// Gets or sets the StatId property.
		/// </summary>
		public System.Int64 StatId
		{
			get { return _statId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.StatId = value;
				
				_statId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				StatId = ( values["StatId"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["StatId"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("StatId", StatId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("StatId: {0}{1}",
								StatId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ClinicalStatsColumn Enum
	
	/// <summary>
	/// Enumerate the ClinicalStats columns.
	/// </summary>
	[Serializable]
	public enum ClinicalStatsColumn : int
	{
		/// <summary>
		/// StatId : 
		/// </summary>
		[EnumTextValue("Stat Id")]
		[ColumnEnum("StatId", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		StatId = 1,
		/// <summary>
		/// PatientCode : 
		/// </summary>
		[EnumTextValue("Patient Code")]
		[ColumnEnum("PatientCode", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		PatientCode = 2,
		/// <summary>
		/// Tid : 
		/// </summary>
		[EnumTextValue("Tid")]
		[ColumnEnum("TID", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Tid = 3,
		/// <summary>
		/// FirstName : 
		/// </summary>
		[EnumTextValue("First Name")]
		[ColumnEnum("FirstName", typeof(System.String), System.Data.DbType.String, false, false, false, 30)]
		FirstName = 4,
		/// <summary>
		/// LastName : 
		/// </summary>
		[EnumTextValue("Last Name")]
		[ColumnEnum("LastName", typeof(System.String), System.Data.DbType.String, false, false, false, 30)]
		LastName = 5,
		/// <summary>
		/// Dob : 
		/// </summary>
		[EnumTextValue("Dob")]
		[ColumnEnum("DOB", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		Dob = 6,
		/// <summary>
		/// Sex : 
		/// </summary>
		[EnumTextValue("Sex")]
		[ColumnEnum("Sex", typeof(System.String), System.Data.DbType.String, false, false, false, 10)]
		Sex = 7,
		/// <summary>
		/// Nationality : 
		/// </summary>
		[EnumTextValue("Nationality")]
		[ColumnEnum("Nationality", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Nationality = 8,
		/// <summary>
		/// PatientStart : 
		/// </summary>
		[EnumTextValue("Patient Start")]
		[ColumnEnum("PatientStart", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		PatientStart = 9,
		/// <summary>
		/// VitalSign : 
		/// </summary>
		[EnumTextValue("Vital Sign")]
		[ColumnEnum("VitalSign", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		VitalSign = 10,
		/// <summary>
		/// Lab : 
		/// </summary>
		[EnumTextValue("Lab")]
		[ColumnEnum("Lab", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Lab = 11,
		/// <summary>
		/// Xray : 
		/// </summary>
		[EnumTextValue("Xray")]
		[ColumnEnum("Xray", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Xray = 12,
		/// <summary>
		/// UltraSound : 
		/// </summary>
		[EnumTextValue("Ultra Sound")]
		[ColumnEnum("UltraSound", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		UltraSound = 13,
		/// <summary>
		/// Cardiology : 
		/// </summary>
		[EnumTextValue("Cardiology")]
		[ColumnEnum("Cardiology", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Cardiology = 14,
		/// <summary>
		/// MedReport : 
		/// </summary>
		[EnumTextValue("Med Report")]
		[ColumnEnum("MedReport", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		MedReport = 15,
		/// <summary>
		/// ChargedCodes : 
		/// </summary>
		[EnumTextValue("Charged Codes")]
		[ColumnEnum("ChargedCodes", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		ChargedCodes = 16,
		/// <summary>
		/// IsCompleted : 
		/// </summary>
		[EnumTextValue("Is Completed")]
		[ColumnEnum("IsCompleted", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsCompleted = 17,
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[EnumTextValue("Create Date")]
		[ColumnEnum("CreateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreateDate = 18
	}//End enum

	#endregion ClinicalStatsColumn Enum

} // end namespace
