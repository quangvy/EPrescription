
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EPrescription.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using ePrescription.Entities.Validation;
#endregion

namespace ePrescription.Entities
{
	///<summary>
	/// An object representation of the 'ePrescription' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EPrescriptionBase : EntityBase, IEPrescription, IEntityId<EPrescriptionKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EPrescriptionEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EPrescriptionEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EPrescriptionEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EPrescription> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EPrescriptionEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EPrescriptionEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EPrescriptionBase"/> instance.
		///</summary>
		public EPrescriptionBase()
		{
			this.entityData = new EPrescriptionEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EPrescriptionBase"/> instance.
		///</summary>
		///<param name="_prescriptionId"></param>
		///<param name="_transactionId"></param>
		///<param name="_patientCode"></param>
		///<param name="_firstName"></param>
		///<param name="_lastName"></param>
		///<param name="_deliveryDate"></param>
		///<param name="_createDate"></param>
		///<param name="_address"></param>
		///<param name="_dateOfBirth"></param>
		///<param name="_age"></param>
		///<param name="_weight"></param>
		///<param name="_diagnosis"></param>
		///<param name="_diagnosisVn"></param>
		///<param name="_diagCode"></param>
		///<param name="_prescribingDoctor"></param>
		///<param name="_sex"></param>
		///<param name="_remark"></param>
		///<param name="_isComplete"></param>
		public EPrescriptionBase(System.String _prescriptionId, System.String _transactionId, 
			System.String _patientCode, System.String _firstName, System.String _lastName, System.DateTime _deliveryDate, 
			System.DateTime _createDate, System.String _address, System.DateTime? _dateOfBirth, 
			System.String _age, System.String _weight, System.String _diagnosis, System.String _diagnosisVn, 
			System.String _diagCode, System.String _prescribingDoctor, System.String _sex, System.String _remark, 
			System.Boolean _isComplete)
		{
			this.entityData = new EPrescriptionEntityData();
			this.backupData = null;

			this.PrescriptionId = _prescriptionId;
			this.TransactionId = _transactionId;
			this.PatientCode = _patientCode;
			this.FirstName = _firstName;
			this.LastName = _lastName;
			this.DeliveryDate = _deliveryDate;
			this.CreateDate = _createDate;
			this.Address = _address;
			this.DateOfBirth = _dateOfBirth;
			this.Age = _age;
			this.Weight = _weight;
			this.Diagnosis = _diagnosis;
			this.DiagnosisVn = _diagnosisVn;
			this.DiagCode = _diagCode;
			this.PrescribingDoctor = _prescribingDoctor;
			this.Sex = _sex;
			this.Remark = _remark;
			this.IsComplete = _isComplete;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EPrescription"/> instance.
		///</summary>
		///<param name="_prescriptionId"></param>
		///<param name="_transactionId"></param>
		///<param name="_patientCode"></param>
		///<param name="_firstName"></param>
		///<param name="_lastName"></param>
		///<param name="_deliveryDate"></param>
		///<param name="_createDate"></param>
		///<param name="_address"></param>
		///<param name="_dateOfBirth"></param>
		///<param name="_age"></param>
		///<param name="_weight"></param>
		///<param name="_diagnosis"></param>
		///<param name="_diagnosisVn"></param>
		///<param name="_diagCode"></param>
		///<param name="_prescribingDoctor"></param>
		///<param name="_sex"></param>
		///<param name="_remark"></param>
		///<param name="_isComplete"></param>
		public static EPrescription CreateEPrescription(System.String _prescriptionId, System.String _transactionId, 
			System.String _patientCode, System.String _firstName, System.String _lastName, System.DateTime _deliveryDate, 
			System.DateTime _createDate, System.String _address, System.DateTime? _dateOfBirth, 
			System.String _age, System.String _weight, System.String _diagnosis, System.String _diagnosisVn, 
			System.String _diagCode, System.String _prescribingDoctor, System.String _sex, System.String _remark, 
			System.Boolean _isComplete)
		{
			EPrescription newEPrescription = new EPrescription();
			newEPrescription.PrescriptionId = _prescriptionId;
			newEPrescription.TransactionId = _transactionId;
			newEPrescription.PatientCode = _patientCode;
			newEPrescription.FirstName = _firstName;
			newEPrescription.LastName = _lastName;
			newEPrescription.DeliveryDate = _deliveryDate;
			newEPrescription.CreateDate = _createDate;
			newEPrescription.Address = _address;
			newEPrescription.DateOfBirth = _dateOfBirth;
			newEPrescription.Age = _age;
			newEPrescription.Weight = _weight;
			newEPrescription.Diagnosis = _diagnosis;
			newEPrescription.DiagnosisVn = _diagnosisVn;
			newEPrescription.DiagCode = _diagCode;
			newEPrescription.PrescribingDoctor = _prescribingDoctor;
			newEPrescription.Sex = _sex;
			newEPrescription.Remark = _remark;
			newEPrescription.IsComplete = _isComplete;
			return newEPrescription;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the PrescriptionId property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "PrescriptionId is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 20)]
		public virtual System.String PrescriptionId
		{
			get
			{
				return this.entityData.PrescriptionId; 
			}
			
			set
			{
				if (this.entityData.PrescriptionId == value)
					return;
				
                OnPropertyChanging("PrescriptionId");                    
				OnColumnChanging(EPrescriptionColumn.PrescriptionId, this.entityData.PrescriptionId);
				this.entityData.PrescriptionId = value;
				this.EntityId.PrescriptionId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EPrescriptionColumn.PrescriptionId, this.entityData.PrescriptionId);
				OnPropertyChanged("PrescriptionId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the PrescriptionID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the PrescriptionID property.</remarks>
		/// <value>This type is nvarchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalPrescriptionId
		{
			get { return this.entityData.OriginalPrescriptionId; }
			set { this.entityData.OriginalPrescriptionId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the TransactionId property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String TransactionId
		{
			get
			{
				return this.entityData.TransactionId; 
			}
			
			set
			{
				if (this.entityData.TransactionId == value)
					return;
				
                OnPropertyChanging("TransactionId");                    
				OnColumnChanging(EPrescriptionColumn.TransactionId, this.entityData.TransactionId);
				this.entityData.TransactionId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EPrescriptionColumn.TransactionId, this.entityData.TransactionId);
				OnPropertyChanged("TransactionId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PatientCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "PatientCode is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String PatientCode
		{
			get
			{
				return this.entityData.PatientCode; 
			}
			
			set
			{
				if (this.entityData.PatientCode == value)
					return;
				
                OnPropertyChanging("PatientCode");                    
				OnColumnChanging(EPrescriptionColumn.PatientCode, this.entityData.PatientCode);
				this.entityData.PatientCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EPrescriptionColumn.PatientCode, this.entityData.PatientCode);
				OnPropertyChanged("PatientCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FirstName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "FirstName is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 30)]
		public virtual System.String FirstName
		{
			get
			{
				return this.entityData.FirstName; 
			}
			
			set
			{
				if (this.entityData.FirstName == value)
					return;
				
                OnPropertyChanging("FirstName");                    
				OnColumnChanging(EPrescriptionColumn.FirstName, this.entityData.FirstName);
				this.entityData.FirstName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EPrescriptionColumn.FirstName, this.entityData.FirstName);
				OnPropertyChanged("FirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "LastName is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 30)]
		public virtual System.String LastName
		{
			get
			{
				return this.entityData.LastName; 
			}
			
			set
			{
				if (this.entityData.LastName == value)
					return;
				
                OnPropertyChanging("LastName");                    
				OnColumnChanging(EPrescriptionColumn.LastName, this.entityData.LastName);
				this.entityData.LastName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EPrescriptionColumn.LastName, this.entityData.LastName);
				OnPropertyChanged("LastName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeliveryDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "DeliveryDate is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime DeliveryDate
		{
			get
			{
				return this.entityData.DeliveryDate; 
			}
			
			set
			{
				if (this.entityData.DeliveryDate == value)
					return;
				
                OnPropertyChanging("DeliveryDate");                    
				OnColumnChanging(EPrescriptionColumn.DeliveryDate, this.entityData.DeliveryDate);
				this.entityData.DeliveryDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EPrescriptionColumn.DeliveryDate, this.entityData.DeliveryDate);
				OnPropertyChanged("DeliveryDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "CreateDate is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreateDate
		{
			get
			{
				return this.entityData.CreateDate; 
			}
			
			set
			{
				if (this.entityData.CreateDate == value)
					return;
				
                OnPropertyChanging("CreateDate");                    
				OnColumnChanging(EPrescriptionColumn.CreateDate, this.entityData.CreateDate);
				this.entityData.CreateDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EPrescriptionColumn.CreateDate, this.entityData.CreateDate);
				OnPropertyChanged("CreateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String Address
		{
			get
			{
				return this.entityData.Address; 
			}
			
			set
			{
				if (this.entityData.Address == value)
					return;
				
                OnPropertyChanging("Address");                    
				OnColumnChanging(EPrescriptionColumn.Address, this.entityData.Address);
				this.entityData.Address = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EPrescriptionColumn.Address, this.entityData.Address);
				OnPropertyChanged("Address");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DateOfBirth property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DateOfBirth
		{
			get
			{
				return this.entityData.DateOfBirth; 
			}
			
			set
			{
				if (this.entityData.DateOfBirth == value)
					return;
				
                OnPropertyChanging("DateOfBirth");                    
				OnColumnChanging(EPrescriptionColumn.DateOfBirth, this.entityData.DateOfBirth);
				this.entityData.DateOfBirth = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EPrescriptionColumn.DateOfBirth, this.entityData.DateOfBirth);
				OnPropertyChanged("DateOfBirth");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Age property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String Age
		{
			get
			{
				return this.entityData.Age; 
			}
			
			set
			{
				if (this.entityData.Age == value)
					return;
				
                OnPropertyChanging("Age");                    
				OnColumnChanging(EPrescriptionColumn.Age, this.entityData.Age);
				this.entityData.Age = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EPrescriptionColumn.Age, this.entityData.Age);
				OnPropertyChanged("Age");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Weight property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String Weight
		{
			get
			{
				return this.entityData.Weight; 
			}
			
			set
			{
				if (this.entityData.Weight == value)
					return;
				
                OnPropertyChanging("Weight");                    
				OnColumnChanging(EPrescriptionColumn.Weight, this.entityData.Weight);
				this.entityData.Weight = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EPrescriptionColumn.Weight, this.entityData.Weight);
				OnPropertyChanged("Weight");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Diagnosis property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String Diagnosis
		{
			get
			{
				return this.entityData.Diagnosis; 
			}
			
			set
			{
				if (this.entityData.Diagnosis == value)
					return;
				
                OnPropertyChanging("Diagnosis");                    
				OnColumnChanging(EPrescriptionColumn.Diagnosis, this.entityData.Diagnosis);
				this.entityData.Diagnosis = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EPrescriptionColumn.Diagnosis, this.entityData.Diagnosis);
				OnPropertyChanged("Diagnosis");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiagnosisVn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String DiagnosisVn
		{
			get
			{
				return this.entityData.DiagnosisVn; 
			}
			
			set
			{
				if (this.entityData.DiagnosisVn == value)
					return;
				
                OnPropertyChanging("DiagnosisVn");                    
				OnColumnChanging(EPrescriptionColumn.DiagnosisVn, this.entityData.DiagnosisVn);
				this.entityData.DiagnosisVn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EPrescriptionColumn.DiagnosisVn, this.entityData.DiagnosisVn);
				OnPropertyChanged("DiagnosisVn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiagCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String DiagCode
		{
			get
			{
				return this.entityData.DiagCode; 
			}
			
			set
			{
				if (this.entityData.DiagCode == value)
					return;
				
                OnPropertyChanging("DiagCode");                    
				OnColumnChanging(EPrescriptionColumn.DiagCode, this.entityData.DiagCode);
				this.entityData.DiagCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EPrescriptionColumn.DiagCode, this.entityData.DiagCode);
				OnPropertyChanged("DiagCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrescribingDoctor property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String PrescribingDoctor
		{
			get
			{
				return this.entityData.PrescribingDoctor; 
			}
			
			set
			{
				if (this.entityData.PrescribingDoctor == value)
					return;
				
                OnPropertyChanging("PrescribingDoctor");                    
				OnColumnChanging(EPrescriptionColumn.PrescribingDoctor, this.entityData.PrescribingDoctor);
				this.entityData.PrescribingDoctor = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EPrescriptionColumn.PrescribingDoctor, this.entityData.PrescribingDoctor);
				OnPropertyChanged("PrescribingDoctor");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Sex property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String Sex
		{
			get
			{
				return this.entityData.Sex; 
			}
			
			set
			{
				if (this.entityData.Sex == value)
					return;
				
                OnPropertyChanging("Sex");                    
				OnColumnChanging(EPrescriptionColumn.Sex, this.entityData.Sex);
				this.entityData.Sex = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EPrescriptionColumn.Sex, this.entityData.Sex);
				OnPropertyChanged("Sex");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Remark property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String Remark
		{
			get
			{
				return this.entityData.Remark; 
			}
			
			set
			{
				if (this.entityData.Remark == value)
					return;
				
                OnPropertyChanging("Remark");                    
				OnColumnChanging(EPrescriptionColumn.Remark, this.entityData.Remark);
				this.entityData.Remark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EPrescriptionColumn.Remark, this.entityData.Remark);
				OnPropertyChanged("Remark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsComplete property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "IsComplete is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean IsComplete
		{
			get
			{
				return this.entityData.IsComplete; 
			}
			
			set
			{
				if (this.entityData.IsComplete == value)
					return;
				
                OnPropertyChanging("IsComplete");                    
				OnColumnChanging(EPrescriptionColumn.IsComplete, this.entityData.IsComplete);
				this.entityData.IsComplete = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EPrescriptionColumn.IsComplete, this.entityData.IsComplete);
				OnPropertyChanged("IsComplete");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EPrescriptionDetail objects
		///	which are related to this object through the relation FK_ePrescriptionDetail_ePrescription
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EPrescriptionDetail> EPrescriptionDetailCollection
		{
			get { return entityData.EPrescriptionDetailCollection; }
			set { entityData.EPrescriptionDetailCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("PrescriptionId", "Prescription Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PrescriptionId", "Prescription Id", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TransactionId", "Transaction Id", 15));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("PatientCode", "Patient Code"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PatientCode", "Patient Code", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("FirstName", "First Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FirstName", "First Name", 30));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("LastName", "Last Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LastName", "Last Name", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Address", "Address", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Age", "Age", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Weight", "Weight", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Diagnosis", "Diagnosis", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DiagnosisVn", "Diagnosis Vn", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DiagCode", "Diag Code", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PrescribingDoctor", "Prescribing Doctor", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Sex", "Sex", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Remark", "Remark", 250));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ePrescription"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"PrescriptionID", "TransactionID", "PatientCode", "FirstName", "LastName", "DeliveryDate", "CreateDate", "Address", "DateOfBirth", "Age", "Weight", "Diagnosis", "DiagnosisVN", "DiagCode", "PrescribingDoctor", "Sex", "Remark", "IsComplete"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EPrescriptionEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EPrescription) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EPrescription>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EPrescription);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EPrescription Entity 
		///</summary>
		protected virtual EPrescription Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EPrescription copy = new EPrescription();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.PrescriptionId = this.PrescriptionId;
					copy.OriginalPrescriptionId = this.OriginalPrescriptionId;
				copy.TransactionId = this.TransactionId;
				copy.PatientCode = this.PatientCode;
				copy.FirstName = this.FirstName;
				copy.LastName = this.LastName;
				copy.DeliveryDate = this.DeliveryDate;
				copy.CreateDate = this.CreateDate;
				copy.Address = this.Address;
				copy.DateOfBirth = this.DateOfBirth;
				copy.Age = this.Age;
				copy.Weight = this.Weight;
				copy.Diagnosis = this.Diagnosis;
				copy.DiagnosisVn = this.DiagnosisVn;
				copy.DiagCode = this.DiagCode;
				copy.PrescribingDoctor = this.PrescribingDoctor;
				copy.Sex = this.Sex;
				copy.Remark = this.Remark;
				copy.IsComplete = this.IsComplete;
			
		
			//deep copy nested objects
			copy.EPrescriptionDetailCollection = (TList<EPrescriptionDetail>) MakeCopyOf(this.EPrescriptionDetailCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EPrescription Entity 
		///</summary>
		public virtual EPrescription Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EPrescription Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EPrescription DeepCopy()
		{
			return EntityHelper.Clone<EPrescription>(this as EPrescription);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EPrescriptionEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EPrescriptionEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EPrescriptionEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EPrescriptionColumn column)
		{
			switch(column)
			{
					case EPrescriptionColumn.PrescriptionId:
					return entityData.PrescriptionId != _originalData.PrescriptionId;
					case EPrescriptionColumn.TransactionId:
					return entityData.TransactionId != _originalData.TransactionId;
					case EPrescriptionColumn.PatientCode:
					return entityData.PatientCode != _originalData.PatientCode;
					case EPrescriptionColumn.FirstName:
					return entityData.FirstName != _originalData.FirstName;
					case EPrescriptionColumn.LastName:
					return entityData.LastName != _originalData.LastName;
					case EPrescriptionColumn.DeliveryDate:
					return entityData.DeliveryDate != _originalData.DeliveryDate;
					case EPrescriptionColumn.CreateDate:
					return entityData.CreateDate != _originalData.CreateDate;
					case EPrescriptionColumn.Address:
					return entityData.Address != _originalData.Address;
					case EPrescriptionColumn.DateOfBirth:
					return entityData.DateOfBirth != _originalData.DateOfBirth;
					case EPrescriptionColumn.Age:
					return entityData.Age != _originalData.Age;
					case EPrescriptionColumn.Weight:
					return entityData.Weight != _originalData.Weight;
					case EPrescriptionColumn.Diagnosis:
					return entityData.Diagnosis != _originalData.Diagnosis;
					case EPrescriptionColumn.DiagnosisVn:
					return entityData.DiagnosisVn != _originalData.DiagnosisVn;
					case EPrescriptionColumn.DiagCode:
					return entityData.DiagCode != _originalData.DiagCode;
					case EPrescriptionColumn.PrescribingDoctor:
					return entityData.PrescribingDoctor != _originalData.PrescribingDoctor;
					case EPrescriptionColumn.Sex:
					return entityData.Sex != _originalData.Sex;
					case EPrescriptionColumn.Remark:
					return entityData.Remark != _originalData.Remark;
					case EPrescriptionColumn.IsComplete:
					return entityData.IsComplete != _originalData.IsComplete;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EPrescriptionColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.PrescriptionId != _originalData.PrescriptionId;
			result = result || entityData.TransactionId != _originalData.TransactionId;
			result = result || entityData.PatientCode != _originalData.PatientCode;
			result = result || entityData.FirstName != _originalData.FirstName;
			result = result || entityData.LastName != _originalData.LastName;
			result = result || entityData.DeliveryDate != _originalData.DeliveryDate;
			result = result || entityData.CreateDate != _originalData.CreateDate;
			result = result || entityData.Address != _originalData.Address;
			result = result || entityData.DateOfBirth != _originalData.DateOfBirth;
			result = result || entityData.Age != _originalData.Age;
			result = result || entityData.Weight != _originalData.Weight;
			result = result || entityData.Diagnosis != _originalData.Diagnosis;
			result = result || entityData.DiagnosisVn != _originalData.DiagnosisVn;
			result = result || entityData.DiagCode != _originalData.DiagCode;
			result = result || entityData.PrescribingDoctor != _originalData.PrescribingDoctor;
			result = result || entityData.Sex != _originalData.Sex;
			result = result || entityData.Remark != _originalData.Remark;
			result = result || entityData.IsComplete != _originalData.IsComplete;
			return result;
		}	
		
		///<summary>
		///  Returns a EPrescription Entity with the original data.
		///</summary>
		public EPrescription GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEPrescription(
				_originalData.PrescriptionId,
				_originalData.TransactionId,
				_originalData.PatientCode,
				_originalData.FirstName,
				_originalData.LastName,
				_originalData.DeliveryDate,
				_originalData.CreateDate,
				_originalData.Address,
				_originalData.DateOfBirth,
				_originalData.Age,
				_originalData.Weight,
				_originalData.Diagnosis,
				_originalData.DiagnosisVn,
				_originalData.DiagCode,
				_originalData.PrescribingDoctor,
				_originalData.Sex,
				_originalData.Remark,
				_originalData.IsComplete
				);
				
			return (EPrescription)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EPrescriptionBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EPrescriptionBase)
				return ValueEquals(this, (EPrescriptionBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EPrescriptionBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.PrescriptionId.GetHashCode() ^ 
					((this.TransactionId == null) ? string.Empty : this.TransactionId.ToString()).GetHashCode() ^ 
					this.PatientCode.GetHashCode() ^ 
					this.FirstName.GetHashCode() ^ 
					this.LastName.GetHashCode() ^ 
					this.DeliveryDate.GetHashCode() ^ 
					this.CreateDate.GetHashCode() ^ 
					((this.Address == null) ? string.Empty : this.Address.ToString()).GetHashCode() ^ 
					((this.DateOfBirth == null) ? string.Empty : this.DateOfBirth.ToString()).GetHashCode() ^ 
					((this.Age == null) ? string.Empty : this.Age.ToString()).GetHashCode() ^ 
					((this.Weight == null) ? string.Empty : this.Weight.ToString()).GetHashCode() ^ 
					((this.Diagnosis == null) ? string.Empty : this.Diagnosis.ToString()).GetHashCode() ^ 
					((this.DiagnosisVn == null) ? string.Empty : this.DiagnosisVn.ToString()).GetHashCode() ^ 
					((this.DiagCode == null) ? string.Empty : this.DiagCode.ToString()).GetHashCode() ^ 
					((this.PrescribingDoctor == null) ? string.Empty : this.PrescribingDoctor.ToString()).GetHashCode() ^ 
					((this.Sex == null) ? string.Empty : this.Sex.ToString()).GetHashCode() ^ 
					((this.Remark == null) ? string.Empty : this.Remark.ToString()).GetHashCode() ^ 
					this.IsComplete.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EPrescriptionBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EPrescriptionBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EPrescriptionBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EPrescriptionBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EPrescriptionBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EPrescriptionBase Object1, EPrescriptionBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.PrescriptionId != Object2.PrescriptionId)
				equal = false;
			if ( Object1.TransactionId != null && Object2.TransactionId != null )
			{
				if (Object1.TransactionId != Object2.TransactionId)
					equal = false;
			}
			else if (Object1.TransactionId == null ^ Object2.TransactionId == null )
			{
				equal = false;
			}
			if (Object1.PatientCode != Object2.PatientCode)
				equal = false;
			if (Object1.FirstName != Object2.FirstName)
				equal = false;
			if (Object1.LastName != Object2.LastName)
				equal = false;
			if (Object1.DeliveryDate != Object2.DeliveryDate)
				equal = false;
			if (Object1.CreateDate != Object2.CreateDate)
				equal = false;
			if ( Object1.Address != null && Object2.Address != null )
			{
				if (Object1.Address != Object2.Address)
					equal = false;
			}
			else if (Object1.Address == null ^ Object2.Address == null )
			{
				equal = false;
			}
			if ( Object1.DateOfBirth != null && Object2.DateOfBirth != null )
			{
				if (Object1.DateOfBirth != Object2.DateOfBirth)
					equal = false;
			}
			else if (Object1.DateOfBirth == null ^ Object2.DateOfBirth == null )
			{
				equal = false;
			}
			if ( Object1.Age != null && Object2.Age != null )
			{
				if (Object1.Age != Object2.Age)
					equal = false;
			}
			else if (Object1.Age == null ^ Object2.Age == null )
			{
				equal = false;
			}
			if ( Object1.Weight != null && Object2.Weight != null )
			{
				if (Object1.Weight != Object2.Weight)
					equal = false;
			}
			else if (Object1.Weight == null ^ Object2.Weight == null )
			{
				equal = false;
			}
			if ( Object1.Diagnosis != null && Object2.Diagnosis != null )
			{
				if (Object1.Diagnosis != Object2.Diagnosis)
					equal = false;
			}
			else if (Object1.Diagnosis == null ^ Object2.Diagnosis == null )
			{
				equal = false;
			}
			if ( Object1.DiagnosisVn != null && Object2.DiagnosisVn != null )
			{
				if (Object1.DiagnosisVn != Object2.DiagnosisVn)
					equal = false;
			}
			else if (Object1.DiagnosisVn == null ^ Object2.DiagnosisVn == null )
			{
				equal = false;
			}
			if ( Object1.DiagCode != null && Object2.DiagCode != null )
			{
				if (Object1.DiagCode != Object2.DiagCode)
					equal = false;
			}
			else if (Object1.DiagCode == null ^ Object2.DiagCode == null )
			{
				equal = false;
			}
			if ( Object1.PrescribingDoctor != null && Object2.PrescribingDoctor != null )
			{
				if (Object1.PrescribingDoctor != Object2.PrescribingDoctor)
					equal = false;
			}
			else if (Object1.PrescribingDoctor == null ^ Object2.PrescribingDoctor == null )
			{
				equal = false;
			}
			if ( Object1.Sex != null && Object2.Sex != null )
			{
				if (Object1.Sex != Object2.Sex)
					equal = false;
			}
			else if (Object1.Sex == null ^ Object2.Sex == null )
			{
				equal = false;
			}
			if ( Object1.Remark != null && Object2.Remark != null )
			{
				if (Object1.Remark != Object2.Remark)
					equal = false;
			}
			else if (Object1.Remark == null ^ Object2.Remark == null )
			{
				equal = false;
			}
			if (Object1.IsComplete != Object2.IsComplete)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EPrescriptionBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EPrescriptionComparer GetComparer()
        {
            return new EPrescriptionComparer();
        }
        */

        // Comparer delegates back to EPrescription
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EPrescription rhs, EPrescriptionColumn which)
        {
            switch (which)
            {
            	
            	
            	case EPrescriptionColumn.PrescriptionId:
            		return this.PrescriptionId.CompareTo(rhs.PrescriptionId);
            		
            		                 
            	
            	
            	case EPrescriptionColumn.TransactionId:
            		return this.TransactionId.CompareTo(rhs.TransactionId);
            		
            		                 
            	
            	
            	case EPrescriptionColumn.PatientCode:
            		return this.PatientCode.CompareTo(rhs.PatientCode);
            		
            		                 
            	
            	
            	case EPrescriptionColumn.FirstName:
            		return this.FirstName.CompareTo(rhs.FirstName);
            		
            		                 
            	
            	
            	case EPrescriptionColumn.LastName:
            		return this.LastName.CompareTo(rhs.LastName);
            		
            		                 
            	
            	
            	case EPrescriptionColumn.DeliveryDate:
            		return this.DeliveryDate.CompareTo(rhs.DeliveryDate);
            		
            		                 
            	
            	
            	case EPrescriptionColumn.CreateDate:
            		return this.CreateDate.CompareTo(rhs.CreateDate);
            		
            		                 
            	
            	
            	case EPrescriptionColumn.Address:
            		return this.Address.CompareTo(rhs.Address);
            		
            		                 
            	
            	
            	case EPrescriptionColumn.DateOfBirth:
            		return this.DateOfBirth.Value.CompareTo(rhs.DateOfBirth.Value);
            		
            		                 
            	
            	
            	case EPrescriptionColumn.Age:
            		return this.Age.CompareTo(rhs.Age);
            		
            		                 
            	
            	
            	case EPrescriptionColumn.Weight:
            		return this.Weight.CompareTo(rhs.Weight);
            		
            		                 
            	
            	
            	case EPrescriptionColumn.Diagnosis:
            		return this.Diagnosis.CompareTo(rhs.Diagnosis);
            		
            		                 
            	
            	
            	case EPrescriptionColumn.DiagnosisVn:
            		return this.DiagnosisVn.CompareTo(rhs.DiagnosisVn);
            		
            		                 
            	
            	
            	case EPrescriptionColumn.DiagCode:
            		return this.DiagCode.CompareTo(rhs.DiagCode);
            		
            		                 
            	
            	
            	case EPrescriptionColumn.PrescribingDoctor:
            		return this.PrescribingDoctor.CompareTo(rhs.PrescribingDoctor);
            		
            		                 
            	
            	
            	case EPrescriptionColumn.Sex:
            		return this.Sex.CompareTo(rhs.Sex);
            		
            		                 
            	
            	
            	case EPrescriptionColumn.Remark:
            		return this.Remark.CompareTo(rhs.Remark);
            		
            		                 
            	
            	
            	case EPrescriptionColumn.IsComplete:
            		return this.IsComplete.CompareTo(rhs.IsComplete);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EPrescriptionKey> Members
		
		// member variable for the EntityId property
		private EPrescriptionKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EPrescriptionKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EPrescriptionKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EPrescription")
					.Append("|").Append( this.PrescriptionId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{19}{18}- PrescriptionId: {0}{18}- TransactionId: {1}{18}- PatientCode: {2}{18}- FirstName: {3}{18}- LastName: {4}{18}- DeliveryDate: {5}{18}- CreateDate: {6}{18}- Address: {7}{18}- DateOfBirth: {8}{18}- Age: {9}{18}- Weight: {10}{18}- Diagnosis: {11}{18}- DiagnosisVn: {12}{18}- DiagCode: {13}{18}- PrescribingDoctor: {14}{18}- Sex: {15}{18}- Remark: {16}{18}- IsComplete: {17}{18}{20}", 
				this.PrescriptionId,
				(this.TransactionId == null) ? string.Empty : this.TransactionId.ToString(),
				this.PatientCode,
				this.FirstName,
				this.LastName,
				this.DeliveryDate,
				this.CreateDate,
				(this.Address == null) ? string.Empty : this.Address.ToString(),
				(this.DateOfBirth == null) ? string.Empty : this.DateOfBirth.ToString(),
				(this.Age == null) ? string.Empty : this.Age.ToString(),
				(this.Weight == null) ? string.Empty : this.Weight.ToString(),
				(this.Diagnosis == null) ? string.Empty : this.Diagnosis.ToString(),
				(this.DiagnosisVn == null) ? string.Empty : this.DiagnosisVn.ToString(),
				(this.DiagCode == null) ? string.Empty : this.DiagCode.ToString(),
				(this.PrescribingDoctor == null) ? string.Empty : this.PrescribingDoctor.ToString(),
				(this.Sex == null) ? string.Empty : this.Sex.ToString(),
				(this.Remark == null) ? string.Empty : this.Remark.ToString(),
				this.IsComplete,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ePrescription' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EPrescriptionEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// PrescriptionID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ePrescription"</remarks>
		public System.String PrescriptionId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalPrescriptionId;
		
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// TransactionID : 
		/// </summary>
		public System.String TransactionId = null;
		
		/// <summary>
		/// PatientCode : 
		/// </summary>
		public System.String PatientCode = string.Empty;
		
		/// <summary>
		/// FirstName : 
		/// </summary>
		public System.String FirstName = string.Empty;
		
		/// <summary>
		/// LastName : 
		/// </summary>
		public System.String LastName = string.Empty;
		
		/// <summary>
		/// DeliveryDate : 
		/// </summary>
		public System.DateTime DeliveryDate = DateTime.MinValue;
		
		/// <summary>
		/// CreateDate : 
		/// </summary>
		public System.DateTime CreateDate = DateTime.MinValue;
		
		/// <summary>
		/// Address : 
		/// </summary>
		public System.String Address = null;
		
		/// <summary>
		/// DateOfBirth : 
		/// </summary>
		public System.DateTime? DateOfBirth = null;
		
		/// <summary>
		/// Age : 
		/// </summary>
		public System.String Age = null;
		
		/// <summary>
		/// Weight : 
		/// </summary>
		public System.String Weight = null;
		
		/// <summary>
		/// Diagnosis : 
		/// </summary>
		public System.String Diagnosis = null;
		
		/// <summary>
		/// DiagnosisVN : 
		/// </summary>
		public System.String DiagnosisVn = null;
		
		/// <summary>
		/// DiagCode : 
		/// </summary>
		public System.String DiagCode = null;
		
		/// <summary>
		/// PrescribingDoctor : 
		/// </summary>
		public System.String PrescribingDoctor = null;
		
		/// <summary>
		/// Sex : 
		/// </summary>
		public System.String Sex = null;
		
		/// <summary>
		/// Remark : 
		/// </summary>
		public System.String Remark = null;
		
		/// <summary>
		/// IsComplete : 
		/// </summary>
		public System.Boolean IsComplete = false;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region EPrescriptionDetailCollection
		
		private TList<EPrescriptionDetail> _ePrescriptionDetailPrescriptionId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _ePrescriptionDetailPrescriptionId
		/// </summary>
		
		public TList<EPrescriptionDetail> EPrescriptionDetailCollection
		{
			get
			{
				if (_ePrescriptionDetailPrescriptionId == null)
				{
				_ePrescriptionDetailPrescriptionId = new TList<EPrescriptionDetail>();
				}
	
				return _ePrescriptionDetailPrescriptionId;
			}
			set { _ePrescriptionDetailPrescriptionId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EPrescriptionEntityData _tmp = new EPrescriptionEntityData();
						
			_tmp.PrescriptionId = this.PrescriptionId;
			_tmp.OriginalPrescriptionId = this.OriginalPrescriptionId;
			
			_tmp.TransactionId = this.TransactionId;
			_tmp.PatientCode = this.PatientCode;
			_tmp.FirstName = this.FirstName;
			_tmp.LastName = this.LastName;
			_tmp.DeliveryDate = this.DeliveryDate;
			_tmp.CreateDate = this.CreateDate;
			_tmp.Address = this.Address;
			_tmp.DateOfBirth = this.DateOfBirth;
			_tmp.Age = this.Age;
			_tmp.Weight = this.Weight;
			_tmp.Diagnosis = this.Diagnosis;
			_tmp.DiagnosisVn = this.DiagnosisVn;
			_tmp.DiagCode = this.DiagCode;
			_tmp.PrescribingDoctor = this.PrescribingDoctor;
			_tmp.Sex = this.Sex;
			_tmp.Remark = this.Remark;
			_tmp.IsComplete = this.IsComplete;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._ePrescriptionDetailPrescriptionId != null)
				_tmp.EPrescriptionDetailCollection = (TList<EPrescriptionDetail>) MakeCopyOf(this.EPrescriptionDetailCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EPrescriptionEntityData _tmp = new EPrescriptionEntityData();
						
			_tmp.PrescriptionId = this.PrescriptionId;
			_tmp.OriginalPrescriptionId = this.OriginalPrescriptionId;
			
			_tmp.TransactionId = this.TransactionId;
			_tmp.PatientCode = this.PatientCode;
			_tmp.FirstName = this.FirstName;
			_tmp.LastName = this.LastName;
			_tmp.DeliveryDate = this.DeliveryDate;
			_tmp.CreateDate = this.CreateDate;
			_tmp.Address = this.Address;
			_tmp.DateOfBirth = this.DateOfBirth;
			_tmp.Age = this.Age;
			_tmp.Weight = this.Weight;
			_tmp.Diagnosis = this.Diagnosis;
			_tmp.DiagnosisVn = this.DiagnosisVn;
			_tmp.DiagCode = this.DiagCode;
			_tmp.PrescribingDoctor = this.PrescribingDoctor;
			_tmp.Sex = this.Sex;
			_tmp.Remark = this.Remark;
			_tmp.IsComplete = this.IsComplete;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EPrescriptionDetailCollection = (TList<EPrescriptionDetail>) MakeCopyOf(this.EPrescriptionDetailCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EPrescriptionColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EPrescriptionColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EPrescriptionColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EPrescriptionColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EPrescriptionColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EPrescriptionColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				EPrescriptionEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EPrescriptionEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EPrescriptionColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EPrescriptionColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EPrescriptionEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EPrescriptionEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EPrescriptionEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EPrescription"/> object.
	/// </remarks>
	public class EPrescriptionEventArgs : System.EventArgs
	{
		private EPrescriptionColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EPrescriptionEventArgs class.
		///</summary>
		public EPrescriptionEventArgs(EPrescriptionColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EPrescriptionEventArgs class.
		///</summary>
		public EPrescriptionEventArgs(EPrescriptionColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EPrescriptionColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EPrescriptionColumn" />
		public EPrescriptionColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EPrescription related events.
	///</summary>
	public delegate void EPrescriptionEventHandler(object sender, EPrescriptionEventArgs e);
	
	#region EPrescriptionComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EPrescriptionComparer : System.Collections.Generic.IComparer<EPrescription>
	{
		EPrescriptionColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EPrescriptionComparer"/> class.
        /// </summary>
		public EPrescriptionComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EPrescriptionComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EPrescriptionComparer(EPrescriptionColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="EPrescription"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="EPrescription"/> to compare.</param>
        /// <param name="b">The second <c>EPrescription</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EPrescription a, EPrescription b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EPrescription entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EPrescription a, EPrescription b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EPrescriptionColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EPrescriptionKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EPrescription"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EPrescriptionKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EPrescriptionKey class.
		/// </summary>
		public EPrescriptionKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EPrescriptionKey class.
		/// </summary>
		public EPrescriptionKey(EPrescriptionBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.PrescriptionId = entity.PrescriptionId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EPrescriptionKey class.
		/// </summary>
		public EPrescriptionKey(System.String _prescriptionId)
		{
			#region Init Properties

			this.PrescriptionId = _prescriptionId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EPrescriptionBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EPrescriptionBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the PrescriptionId property
		private System.String _prescriptionId;
		
		/// <summary>
		/// Gets or sets the PrescriptionId property.
		/// </summary>
		public System.String PrescriptionId
		{
			get { return _prescriptionId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.PrescriptionId = value;
				
				_prescriptionId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				PrescriptionId = ( values["PrescriptionId"] != null ) ? (System.String) EntityUtil.ChangeType(values["PrescriptionId"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("PrescriptionId", PrescriptionId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("PrescriptionId: {0}{1}",
								PrescriptionId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EPrescriptionColumn Enum
	
	/// <summary>
	/// Enumerate the EPrescription columns.
	/// </summary>
	[Serializable]
	public enum EPrescriptionColumn : int
	{
		/// <summary>
		/// PrescriptionId : 
		/// </summary>
		[EnumTextValue("Prescription Id")]
		[ColumnEnum("PrescriptionID", typeof(System.String), System.Data.DbType.String, true, false, false, 20)]
		PrescriptionId = 1,
		/// <summary>
		/// TransactionId : 
		/// </summary>
		[EnumTextValue("Transaction Id")]
		[ColumnEnum("TransactionID", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		TransactionId = 2,
		/// <summary>
		/// PatientCode : 
		/// </summary>
		[EnumTextValue("Patient Code")]
		[ColumnEnum("PatientCode", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		PatientCode = 3,
		/// <summary>
		/// FirstName : 
		/// </summary>
		[EnumTextValue("First Name")]
		[ColumnEnum("FirstName", typeof(System.String), System.Data.DbType.String, false, false, false, 30)]
		FirstName = 4,
		/// <summary>
		/// LastName : 
		/// </summary>
		[EnumTextValue("Last Name")]
		[ColumnEnum("LastName", typeof(System.String), System.Data.DbType.String, false, false, false, 30)]
		LastName = 5,
		/// <summary>
		/// DeliveryDate : 
		/// </summary>
		[EnumTextValue("Delivery Date")]
		[ColumnEnum("DeliveryDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		DeliveryDate = 6,
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[EnumTextValue("Create Date")]
		[ColumnEnum("CreateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreateDate = 7,
		/// <summary>
		/// Address : 
		/// </summary>
		[EnumTextValue("Address")]
		[ColumnEnum("Address", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		Address = 8,
		/// <summary>
		/// DateOfBirth : 
		/// </summary>
		[EnumTextValue("Date Of Birth")]
		[ColumnEnum("DateOfBirth", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DateOfBirth = 9,
		/// <summary>
		/// Age : 
		/// </summary>
		[EnumTextValue("Age")]
		[ColumnEnum("Age", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		Age = 10,
		/// <summary>
		/// Weight : 
		/// </summary>
		[EnumTextValue("Weight")]
		[ColumnEnum("Weight", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		Weight = 11,
		/// <summary>
		/// Diagnosis : 
		/// </summary>
		[EnumTextValue("Diagnosis")]
		[ColumnEnum("Diagnosis", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		Diagnosis = 12,
		/// <summary>
		/// DiagnosisVn : 
		/// </summary>
		[EnumTextValue("Diagnosis Vn")]
		[ColumnEnum("DiagnosisVN", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		DiagnosisVn = 13,
		/// <summary>
		/// DiagCode : 
		/// </summary>
		[EnumTextValue("Diag Code")]
		[ColumnEnum("DiagCode", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		DiagCode = 14,
		/// <summary>
		/// PrescribingDoctor : 
		/// </summary>
		[EnumTextValue("Prescribing Doctor")]
		[ColumnEnum("PrescribingDoctor", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		PrescribingDoctor = 15,
		/// <summary>
		/// Sex : 
		/// </summary>
		[EnumTextValue("Sex")]
		[ColumnEnum("Sex", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		Sex = 16,
		/// <summary>
		/// Remark : 
		/// </summary>
		[EnumTextValue("Remark")]
		[ColumnEnum("Remark", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Remark = 17,
		/// <summary>
		/// IsComplete : 
		/// </summary>
		[EnumTextValue("Is Complete")]
		[ColumnEnum("IsComplete", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		IsComplete = 18
	}//End enum

	#endregion EPrescriptionColumn Enum

} // end namespace
