
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file FavoritDetail.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using ePrescription.Entities.Validation;
#endregion

namespace ePrescription.Entities
{
	///<summary>
	/// An object representation of the 'FavoritDetail' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FavoritDetailBase : EntityBase, IFavoritDetail, IEntityId<FavoritDetailKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FavoritDetailEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FavoritDetailEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FavoritDetailEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<FavoritDetail> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FavoritDetailEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FavoritDetailEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FavoritDetailBase"/> instance.
		///</summary>
		public FavoritDetailBase()
		{
			this.entityData = new FavoritDetailEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FavoritDetailBase"/> instance.
		///</summary>
		///<param name="_favouriteId"></param>
		///<param name="_drugId"></param>
		///<param name="_drugName"></param>
		///<param name="_routeType"></param>
		///<param name="_routeTypeVn"></param>
		///<param name="_dosage"></param>
		///<param name="_dosageUnit"></param>
		///<param name="_dosageUnitVn"></param>
		///<param name="_frequency"></param>
		///<param name="_frequencyVn"></param>
		///<param name="_duration"></param>
		///<param name="_durationUnit"></param>
		///<param name="_durationUnitVn"></param>
		///<param name="_totalUnit"></param>
		public FavoritDetailBase(System.String _favouriteId, System.String _drugId, System.String _drugName, 
			System.String _routeType, System.String _routeTypeVn, System.String _dosage, System.String _dosageUnit, 
			System.String _dosageUnitVn, System.String _frequency, System.String _frequencyVn, 
			System.String _duration, System.String _durationUnit, System.String _durationUnitVn, 
			System.String _totalUnit)
		{
			this.entityData = new FavoritDetailEntityData();
			this.backupData = null;

			this.FavouriteId = _favouriteId;
			this.DrugId = _drugId;
			this.DrugName = _drugName;
			this.RouteType = _routeType;
			this.RouteTypeVn = _routeTypeVn;
			this.Dosage = _dosage;
			this.DosageUnit = _dosageUnit;
			this.DosageUnitVn = _dosageUnitVn;
			this.Frequency = _frequency;
			this.FrequencyVn = _frequencyVn;
			this.Duration = _duration;
			this.DurationUnit = _durationUnit;
			this.DurationUnitVn = _durationUnitVn;
			this.TotalUnit = _totalUnit;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="FavoritDetail"/> instance.
		///</summary>
		///<param name="_favouriteId"></param>
		///<param name="_drugId"></param>
		///<param name="_drugName"></param>
		///<param name="_routeType"></param>
		///<param name="_routeTypeVn"></param>
		///<param name="_dosage"></param>
		///<param name="_dosageUnit"></param>
		///<param name="_dosageUnitVn"></param>
		///<param name="_frequency"></param>
		///<param name="_frequencyVn"></param>
		///<param name="_duration"></param>
		///<param name="_durationUnit"></param>
		///<param name="_durationUnitVn"></param>
		///<param name="_totalUnit"></param>
		public static FavoritDetail CreateFavoritDetail(System.String _favouriteId, System.String _drugId, System.String _drugName, 
			System.String _routeType, System.String _routeTypeVn, System.String _dosage, System.String _dosageUnit, 
			System.String _dosageUnitVn, System.String _frequency, System.String _frequencyVn, 
			System.String _duration, System.String _durationUnit, System.String _durationUnitVn, 
			System.String _totalUnit)
		{
			FavoritDetail newFavoritDetail = new FavoritDetail();
			newFavoritDetail.FavouriteId = _favouriteId;
			newFavoritDetail.DrugId = _drugId;
			newFavoritDetail.DrugName = _drugName;
			newFavoritDetail.RouteType = _routeType;
			newFavoritDetail.RouteTypeVn = _routeTypeVn;
			newFavoritDetail.Dosage = _dosage;
			newFavoritDetail.DosageUnit = _dosageUnit;
			newFavoritDetail.DosageUnitVn = _dosageUnitVn;
			newFavoritDetail.Frequency = _frequency;
			newFavoritDetail.FrequencyVn = _frequencyVn;
			newFavoritDetail.Duration = _duration;
			newFavoritDetail.DurationUnit = _durationUnit;
			newFavoritDetail.DurationUnitVn = _durationUnitVn;
			newFavoritDetail.TotalUnit = _totalUnit;
			return newFavoritDetail;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "Id is required")]




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(FavoritDetailColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FavoritDetailColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FavouriteId property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "FavouriteId is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String FavouriteId
		{
			get
			{
				return this.entityData.FavouriteId; 
			}
			
			set
			{
				if (this.entityData.FavouriteId == value)
					return;
				
                OnPropertyChanging("FavouriteId");                    
				OnColumnChanging(FavoritDetailColumn.FavouriteId, this.entityData.FavouriteId);
				this.entityData.FavouriteId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FavoritDetailColumn.FavouriteId, this.entityData.FavouriteId);
				OnPropertyChanged("FavouriteId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DrugId property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String DrugId
		{
			get
			{
				return this.entityData.DrugId; 
			}
			
			set
			{
				if (this.entityData.DrugId == value)
					return;
				
                OnPropertyChanging("DrugId");                    
				OnColumnChanging(FavoritDetailColumn.DrugId, this.entityData.DrugId);
				this.entityData.DrugId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FavoritDetailColumn.DrugId, this.entityData.DrugId);
				OnPropertyChanged("DrugId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DrugName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String DrugName
		{
			get
			{
				return this.entityData.DrugName; 
			}
			
			set
			{
				if (this.entityData.DrugName == value)
					return;
				
                OnPropertyChanging("DrugName");                    
				OnColumnChanging(FavoritDetailColumn.DrugName, this.entityData.DrugName);
				this.entityData.DrugName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FavoritDetailColumn.DrugName, this.entityData.DrugName);
				OnPropertyChanged("DrugName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RouteType property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String RouteType
		{
			get
			{
				return this.entityData.RouteType; 
			}
			
			set
			{
				if (this.entityData.RouteType == value)
					return;
				
                OnPropertyChanging("RouteType");                    
				OnColumnChanging(FavoritDetailColumn.RouteType, this.entityData.RouteType);
				this.entityData.RouteType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FavoritDetailColumn.RouteType, this.entityData.RouteType);
				OnPropertyChanged("RouteType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RouteTypeVn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String RouteTypeVn
		{
			get
			{
				return this.entityData.RouteTypeVn; 
			}
			
			set
			{
				if (this.entityData.RouteTypeVn == value)
					return;
				
                OnPropertyChanging("RouteTypeVn");                    
				OnColumnChanging(FavoritDetailColumn.RouteTypeVn, this.entityData.RouteTypeVn);
				this.entityData.RouteTypeVn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FavoritDetailColumn.RouteTypeVn, this.entityData.RouteTypeVn);
				OnPropertyChanged("RouteTypeVn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Dosage property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String Dosage
		{
			get
			{
				return this.entityData.Dosage; 
			}
			
			set
			{
				if (this.entityData.Dosage == value)
					return;
				
                OnPropertyChanging("Dosage");                    
				OnColumnChanging(FavoritDetailColumn.Dosage, this.entityData.Dosage);
				this.entityData.Dosage = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FavoritDetailColumn.Dosage, this.entityData.Dosage);
				OnPropertyChanged("Dosage");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DosageUnit property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String DosageUnit
		{
			get
			{
				return this.entityData.DosageUnit; 
			}
			
			set
			{
				if (this.entityData.DosageUnit == value)
					return;
				
                OnPropertyChanging("DosageUnit");                    
				OnColumnChanging(FavoritDetailColumn.DosageUnit, this.entityData.DosageUnit);
				this.entityData.DosageUnit = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FavoritDetailColumn.DosageUnit, this.entityData.DosageUnit);
				OnPropertyChanged("DosageUnit");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DosageUnitVn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String DosageUnitVn
		{
			get
			{
				return this.entityData.DosageUnitVn; 
			}
			
			set
			{
				if (this.entityData.DosageUnitVn == value)
					return;
				
                OnPropertyChanging("DosageUnitVn");                    
				OnColumnChanging(FavoritDetailColumn.DosageUnitVn, this.entityData.DosageUnitVn);
				this.entityData.DosageUnitVn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FavoritDetailColumn.DosageUnitVn, this.entityData.DosageUnitVn);
				OnPropertyChanged("DosageUnitVn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Frequency property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String Frequency
		{
			get
			{
				return this.entityData.Frequency; 
			}
			
			set
			{
				if (this.entityData.Frequency == value)
					return;
				
                OnPropertyChanging("Frequency");                    
				OnColumnChanging(FavoritDetailColumn.Frequency, this.entityData.Frequency);
				this.entityData.Frequency = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FavoritDetailColumn.Frequency, this.entityData.Frequency);
				OnPropertyChanged("Frequency");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FrequencyVn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String FrequencyVn
		{
			get
			{
				return this.entityData.FrequencyVn; 
			}
			
			set
			{
				if (this.entityData.FrequencyVn == value)
					return;
				
                OnPropertyChanging("FrequencyVn");                    
				OnColumnChanging(FavoritDetailColumn.FrequencyVn, this.entityData.FrequencyVn);
				this.entityData.FrequencyVn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FavoritDetailColumn.FrequencyVn, this.entityData.FrequencyVn);
				OnPropertyChanged("FrequencyVn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Duration property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Duration
		{
			get
			{
				return this.entityData.Duration; 
			}
			
			set
			{
				if (this.entityData.Duration == value)
					return;
				
                OnPropertyChanging("Duration");                    
				OnColumnChanging(FavoritDetailColumn.Duration, this.entityData.Duration);
				this.entityData.Duration = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FavoritDetailColumn.Duration, this.entityData.Duration);
				OnPropertyChanged("Duration");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DurationUnit property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String DurationUnit
		{
			get
			{
				return this.entityData.DurationUnit; 
			}
			
			set
			{
				if (this.entityData.DurationUnit == value)
					return;
				
                OnPropertyChanging("DurationUnit");                    
				OnColumnChanging(FavoritDetailColumn.DurationUnit, this.entityData.DurationUnit);
				this.entityData.DurationUnit = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FavoritDetailColumn.DurationUnit, this.entityData.DurationUnit);
				OnPropertyChanged("DurationUnit");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DurationUnitVn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String DurationUnitVn
		{
			get
			{
				return this.entityData.DurationUnitVn; 
			}
			
			set
			{
				if (this.entityData.DurationUnitVn == value)
					return;
				
                OnPropertyChanging("DurationUnitVn");                    
				OnColumnChanging(FavoritDetailColumn.DurationUnitVn, this.entityData.DurationUnitVn);
				this.entityData.DurationUnitVn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FavoritDetailColumn.DurationUnitVn, this.entityData.DurationUnitVn);
				OnPropertyChanged("DurationUnitVn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalUnit property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String TotalUnit
		{
			get
			{
				return this.entityData.TotalUnit; 
			}
			
			set
			{
				if (this.entityData.TotalUnit == value)
					return;
				
                OnPropertyChanging("TotalUnit");                    
				OnColumnChanging(FavoritDetailColumn.TotalUnit, this.entityData.TotalUnit);
				this.entityData.TotalUnit = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FavoritDetailColumn.TotalUnit, this.entityData.TotalUnit);
				OnPropertyChanged("TotalUnit");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="FavoritMaster"/>.
		/// </summary>
		/// <value>The source FavoritMaster for FavouriteId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FavoritMaster FavouriteIdSource
      	{
            get { return entityData.FavouriteIdSource; }
            set { entityData.FavouriteIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("FavouriteId", "Favourite Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FavouriteId", "Favourite Id", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DrugId", "Drug Id", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DrugName", "Drug Name", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RouteType", "Route Type", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RouteTypeVn", "Route Type Vn", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Dosage", "Dosage", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DosageUnit", "Dosage Unit", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DosageUnitVn", "Dosage Unit Vn", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Frequency", "Frequency", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FrequencyVn", "Frequency Vn", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Duration", "Duration", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DurationUnit", "Duration Unit", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DurationUnitVn", "Duration Unit Vn", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TotalUnit", "Total Unit", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "FavoritDetail"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "FavouriteID", "DrugID", "DrugName", "RouteType", "RouteTypeVN", "Dosage", "DosageUnit", "DosageUnitVN", "Frequency", "FrequencyVN", "Duration", "DurationUnit", "DurationUnitVN", "TotalUnit"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FavoritDetailEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (FavoritDetail) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<FavoritDetail>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as FavoritDetail);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed FavoritDetail Entity 
		///</summary>
		protected virtual FavoritDetail Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			FavoritDetail copy = new FavoritDetail();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.FavouriteId = this.FavouriteId;
				copy.DrugId = this.DrugId;
				copy.DrugName = this.DrugName;
				copy.RouteType = this.RouteType;
				copy.RouteTypeVn = this.RouteTypeVn;
				copy.Dosage = this.Dosage;
				copy.DosageUnit = this.DosageUnit;
				copy.DosageUnitVn = this.DosageUnitVn;
				copy.Frequency = this.Frequency;
				copy.FrequencyVn = this.FrequencyVn;
				copy.Duration = this.Duration;
				copy.DurationUnit = this.DurationUnit;
				copy.DurationUnitVn = this.DurationUnitVn;
				copy.TotalUnit = this.TotalUnit;
			
			if (this.FavouriteIdSource != null && existingCopies.Contains(this.FavouriteIdSource))
				copy.FavouriteIdSource = existingCopies[this.FavouriteIdSource] as FavoritMaster;
			else
				copy.FavouriteIdSource = MakeCopyOf(this.FavouriteIdSource, existingCopies) as FavoritMaster;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed FavoritDetail Entity 
		///</summary>
		public virtual FavoritDetail Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed FavoritDetail Entity which is a deep copy of the current entity.
		///</summary>
		public virtual FavoritDetail DeepCopy()
		{
			return EntityHelper.Clone<FavoritDetail>(this as FavoritDetail);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FavoritDetailEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FavoritDetailEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FavoritDetailEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FavoritDetailColumn column)
		{
			switch(column)
			{
					case FavoritDetailColumn.Id:
					return entityData.Id != _originalData.Id;
					case FavoritDetailColumn.FavouriteId:
					return entityData.FavouriteId != _originalData.FavouriteId;
					case FavoritDetailColumn.DrugId:
					return entityData.DrugId != _originalData.DrugId;
					case FavoritDetailColumn.DrugName:
					return entityData.DrugName != _originalData.DrugName;
					case FavoritDetailColumn.RouteType:
					return entityData.RouteType != _originalData.RouteType;
					case FavoritDetailColumn.RouteTypeVn:
					return entityData.RouteTypeVn != _originalData.RouteTypeVn;
					case FavoritDetailColumn.Dosage:
					return entityData.Dosage != _originalData.Dosage;
					case FavoritDetailColumn.DosageUnit:
					return entityData.DosageUnit != _originalData.DosageUnit;
					case FavoritDetailColumn.DosageUnitVn:
					return entityData.DosageUnitVn != _originalData.DosageUnitVn;
					case FavoritDetailColumn.Frequency:
					return entityData.Frequency != _originalData.Frequency;
					case FavoritDetailColumn.FrequencyVn:
					return entityData.FrequencyVn != _originalData.FrequencyVn;
					case FavoritDetailColumn.Duration:
					return entityData.Duration != _originalData.Duration;
					case FavoritDetailColumn.DurationUnit:
					return entityData.DurationUnit != _originalData.DurationUnit;
					case FavoritDetailColumn.DurationUnitVn:
					return entityData.DurationUnitVn != _originalData.DurationUnitVn;
					case FavoritDetailColumn.TotalUnit:
					return entityData.TotalUnit != _originalData.TotalUnit;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FavoritDetailColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.FavouriteId != _originalData.FavouriteId;
			result = result || entityData.DrugId != _originalData.DrugId;
			result = result || entityData.DrugName != _originalData.DrugName;
			result = result || entityData.RouteType != _originalData.RouteType;
			result = result || entityData.RouteTypeVn != _originalData.RouteTypeVn;
			result = result || entityData.Dosage != _originalData.Dosage;
			result = result || entityData.DosageUnit != _originalData.DosageUnit;
			result = result || entityData.DosageUnitVn != _originalData.DosageUnitVn;
			result = result || entityData.Frequency != _originalData.Frequency;
			result = result || entityData.FrequencyVn != _originalData.FrequencyVn;
			result = result || entityData.Duration != _originalData.Duration;
			result = result || entityData.DurationUnit != _originalData.DurationUnit;
			result = result || entityData.DurationUnitVn != _originalData.DurationUnitVn;
			result = result || entityData.TotalUnit != _originalData.TotalUnit;
			return result;
		}	
		
		///<summary>
		///  Returns a FavoritDetail Entity with the original data.
		///</summary>
		public FavoritDetail GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFavoritDetail(
				_originalData.FavouriteId,
				_originalData.DrugId,
				_originalData.DrugName,
				_originalData.RouteType,
				_originalData.RouteTypeVn,
				_originalData.Dosage,
				_originalData.DosageUnit,
				_originalData.DosageUnitVn,
				_originalData.Frequency,
				_originalData.FrequencyVn,
				_originalData.Duration,
				_originalData.DurationUnit,
				_originalData.DurationUnitVn,
				_originalData.TotalUnit
				);
				
			return (FavoritDetail)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FavoritDetailBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FavoritDetailBase)
				return ValueEquals(this, (FavoritDetailBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FavoritDetailBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.FavouriteId.GetHashCode() ^ 
					((this.DrugId == null) ? string.Empty : this.DrugId.ToString()).GetHashCode() ^ 
					((this.DrugName == null) ? string.Empty : this.DrugName.ToString()).GetHashCode() ^ 
					((this.RouteType == null) ? string.Empty : this.RouteType.ToString()).GetHashCode() ^ 
					((this.RouteTypeVn == null) ? string.Empty : this.RouteTypeVn.ToString()).GetHashCode() ^ 
					((this.Dosage == null) ? string.Empty : this.Dosage.ToString()).GetHashCode() ^ 
					((this.DosageUnit == null) ? string.Empty : this.DosageUnit.ToString()).GetHashCode() ^ 
					((this.DosageUnitVn == null) ? string.Empty : this.DosageUnitVn.ToString()).GetHashCode() ^ 
					((this.Frequency == null) ? string.Empty : this.Frequency.ToString()).GetHashCode() ^ 
					((this.FrequencyVn == null) ? string.Empty : this.FrequencyVn.ToString()).GetHashCode() ^ 
					((this.Duration == null) ? string.Empty : this.Duration.ToString()).GetHashCode() ^ 
					((this.DurationUnit == null) ? string.Empty : this.DurationUnit.ToString()).GetHashCode() ^ 
					((this.DurationUnitVn == null) ? string.Empty : this.DurationUnitVn.ToString()).GetHashCode() ^ 
					((this.TotalUnit == null) ? string.Empty : this.TotalUnit.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FavoritDetailBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FavoritDetailBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FavoritDetailBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FavoritDetailBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FavoritDetailBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FavoritDetailBase Object1, FavoritDetailBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.FavouriteId != Object2.FavouriteId)
				equal = false;
			if ( Object1.DrugId != null && Object2.DrugId != null )
			{
				if (Object1.DrugId != Object2.DrugId)
					equal = false;
			}
			else if (Object1.DrugId == null ^ Object2.DrugId == null )
			{
				equal = false;
			}
			if ( Object1.DrugName != null && Object2.DrugName != null )
			{
				if (Object1.DrugName != Object2.DrugName)
					equal = false;
			}
			else if (Object1.DrugName == null ^ Object2.DrugName == null )
			{
				equal = false;
			}
			if ( Object1.RouteType != null && Object2.RouteType != null )
			{
				if (Object1.RouteType != Object2.RouteType)
					equal = false;
			}
			else if (Object1.RouteType == null ^ Object2.RouteType == null )
			{
				equal = false;
			}
			if ( Object1.RouteTypeVn != null && Object2.RouteTypeVn != null )
			{
				if (Object1.RouteTypeVn != Object2.RouteTypeVn)
					equal = false;
			}
			else if (Object1.RouteTypeVn == null ^ Object2.RouteTypeVn == null )
			{
				equal = false;
			}
			if ( Object1.Dosage != null && Object2.Dosage != null )
			{
				if (Object1.Dosage != Object2.Dosage)
					equal = false;
			}
			else if (Object1.Dosage == null ^ Object2.Dosage == null )
			{
				equal = false;
			}
			if ( Object1.DosageUnit != null && Object2.DosageUnit != null )
			{
				if (Object1.DosageUnit != Object2.DosageUnit)
					equal = false;
			}
			else if (Object1.DosageUnit == null ^ Object2.DosageUnit == null )
			{
				equal = false;
			}
			if ( Object1.DosageUnitVn != null && Object2.DosageUnitVn != null )
			{
				if (Object1.DosageUnitVn != Object2.DosageUnitVn)
					equal = false;
			}
			else if (Object1.DosageUnitVn == null ^ Object2.DosageUnitVn == null )
			{
				equal = false;
			}
			if ( Object1.Frequency != null && Object2.Frequency != null )
			{
				if (Object1.Frequency != Object2.Frequency)
					equal = false;
			}
			else if (Object1.Frequency == null ^ Object2.Frequency == null )
			{
				equal = false;
			}
			if ( Object1.FrequencyVn != null && Object2.FrequencyVn != null )
			{
				if (Object1.FrequencyVn != Object2.FrequencyVn)
					equal = false;
			}
			else if (Object1.FrequencyVn == null ^ Object2.FrequencyVn == null )
			{
				equal = false;
			}
			if ( Object1.Duration != null && Object2.Duration != null )
			{
				if (Object1.Duration != Object2.Duration)
					equal = false;
			}
			else if (Object1.Duration == null ^ Object2.Duration == null )
			{
				equal = false;
			}
			if ( Object1.DurationUnit != null && Object2.DurationUnit != null )
			{
				if (Object1.DurationUnit != Object2.DurationUnit)
					equal = false;
			}
			else if (Object1.DurationUnit == null ^ Object2.DurationUnit == null )
			{
				equal = false;
			}
			if ( Object1.DurationUnitVn != null && Object2.DurationUnitVn != null )
			{
				if (Object1.DurationUnitVn != Object2.DurationUnitVn)
					equal = false;
			}
			else if (Object1.DurationUnitVn == null ^ Object2.DurationUnitVn == null )
			{
				equal = false;
			}
			if ( Object1.TotalUnit != null && Object2.TotalUnit != null )
			{
				if (Object1.TotalUnit != Object2.TotalUnit)
					equal = false;
			}
			else if (Object1.TotalUnit == null ^ Object2.TotalUnit == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FavoritDetailBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FavoritDetailComparer GetComparer()
        {
            return new FavoritDetailComparer();
        }
        */

        // Comparer delegates back to FavoritDetail
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(FavoritDetail rhs, FavoritDetailColumn which)
        {
            switch (which)
            {
            	
            	
            	case FavoritDetailColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case FavoritDetailColumn.FavouriteId:
            		return this.FavouriteId.CompareTo(rhs.FavouriteId);
            		
            		                 
            	
            	
            	case FavoritDetailColumn.DrugId:
            		return this.DrugId.CompareTo(rhs.DrugId);
            		
            		                 
            	
            	
            	case FavoritDetailColumn.DrugName:
            		return this.DrugName.CompareTo(rhs.DrugName);
            		
            		                 
            	
            	
            	case FavoritDetailColumn.RouteType:
            		return this.RouteType.CompareTo(rhs.RouteType);
            		
            		                 
            	
            	
            	case FavoritDetailColumn.RouteTypeVn:
            		return this.RouteTypeVn.CompareTo(rhs.RouteTypeVn);
            		
            		                 
            	
            	
            	case FavoritDetailColumn.Dosage:
            		return this.Dosage.CompareTo(rhs.Dosage);
            		
            		                 
            	
            	
            	case FavoritDetailColumn.DosageUnit:
            		return this.DosageUnit.CompareTo(rhs.DosageUnit);
            		
            		                 
            	
            	
            	case FavoritDetailColumn.DosageUnitVn:
            		return this.DosageUnitVn.CompareTo(rhs.DosageUnitVn);
            		
            		                 
            	
            	
            	case FavoritDetailColumn.Frequency:
            		return this.Frequency.CompareTo(rhs.Frequency);
            		
            		                 
            	
            	
            	case FavoritDetailColumn.FrequencyVn:
            		return this.FrequencyVn.CompareTo(rhs.FrequencyVn);
            		
            		                 
            	
            	
            	case FavoritDetailColumn.Duration:
            		return this.Duration.CompareTo(rhs.Duration);
            		
            		                 
            	
            	
            	case FavoritDetailColumn.DurationUnit:
            		return this.DurationUnit.CompareTo(rhs.DurationUnit);
            		
            		                 
            	
            	
            	case FavoritDetailColumn.DurationUnitVn:
            		return this.DurationUnitVn.CompareTo(rhs.DurationUnitVn);
            		
            		                 
            	
            	
            	case FavoritDetailColumn.TotalUnit:
            		return this.TotalUnit.CompareTo(rhs.TotalUnit);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FavoritDetailKey> Members
		
		// member variable for the EntityId property
		private FavoritDetailKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FavoritDetailKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FavoritDetailKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("FavoritDetail")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{16}{15}- Id: {0}{15}- FavouriteId: {1}{15}- DrugId: {2}{15}- DrugName: {3}{15}- RouteType: {4}{15}- RouteTypeVn: {5}{15}- Dosage: {6}{15}- DosageUnit: {7}{15}- DosageUnitVn: {8}{15}- Frequency: {9}{15}- FrequencyVn: {10}{15}- Duration: {11}{15}- DurationUnit: {12}{15}- DurationUnitVn: {13}{15}- TotalUnit: {14}{15}{17}", 
				this.Id,
				this.FavouriteId,
				(this.DrugId == null) ? string.Empty : this.DrugId.ToString(),
				(this.DrugName == null) ? string.Empty : this.DrugName.ToString(),
				(this.RouteType == null) ? string.Empty : this.RouteType.ToString(),
				(this.RouteTypeVn == null) ? string.Empty : this.RouteTypeVn.ToString(),
				(this.Dosage == null) ? string.Empty : this.Dosage.ToString(),
				(this.DosageUnit == null) ? string.Empty : this.DosageUnit.ToString(),
				(this.DosageUnitVn == null) ? string.Empty : this.DosageUnitVn.ToString(),
				(this.Frequency == null) ? string.Empty : this.Frequency.ToString(),
				(this.FrequencyVn == null) ? string.Empty : this.FrequencyVn.ToString(),
				(this.Duration == null) ? string.Empty : this.Duration.ToString(),
				(this.DurationUnit == null) ? string.Empty : this.DurationUnit.ToString(),
				(this.DurationUnitVn == null) ? string.Empty : this.DurationUnitVn.ToString(),
				(this.TotalUnit == null) ? string.Empty : this.TotalUnit.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'FavoritDetail' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FavoritDetailEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "FavoritDetail"</remarks>
		public System.Int64 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// FavouriteID : 
		/// </summary>
		public System.String FavouriteId = string.Empty;
		
		/// <summary>
		/// DrugID : 
		/// </summary>
		public System.String DrugId = null;
		
		/// <summary>
		/// DrugName : 
		/// </summary>
		public System.String DrugName = null;
		
		/// <summary>
		/// RouteType : 
		/// </summary>
		public System.String RouteType = null;
		
		/// <summary>
		/// RouteTypeVN : 
		/// </summary>
		public System.String RouteTypeVn = null;
		
		/// <summary>
		/// Dosage : 
		/// </summary>
		public System.String Dosage = null;
		
		/// <summary>
		/// DosageUnit : 
		/// </summary>
		public System.String DosageUnit = null;
		
		/// <summary>
		/// DosageUnitVN : 
		/// </summary>
		public System.String DosageUnitVn = null;
		
		/// <summary>
		/// Frequency : 
		/// </summary>
		public System.String Frequency = null;
		
		/// <summary>
		/// FrequencyVN : 
		/// </summary>
		public System.String FrequencyVn = null;
		
		/// <summary>
		/// Duration : 
		/// </summary>
		public System.String Duration = null;
		
		/// <summary>
		/// DurationUnit : 
		/// </summary>
		public System.String DurationUnit = null;
		
		/// <summary>
		/// DurationUnitVN : 
		/// </summary>
		public System.String DurationUnitVn = null;
		
		/// <summary>
		/// TotalUnit : 
		/// </summary>
		public System.String TotalUnit = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private FavoritMaster _favouriteIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FavoritMaster"/>.
		/// </summary>
		/// <value>The source FavoritMaster for FavouriteId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FavoritMaster FavouriteIdSource
      	{
            get { return this._favouriteIdSource; }
            set { this._favouriteIdSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FavoritDetailEntityData _tmp = new FavoritDetailEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.FavouriteId = this.FavouriteId;
			_tmp.DrugId = this.DrugId;
			_tmp.DrugName = this.DrugName;
			_tmp.RouteType = this.RouteType;
			_tmp.RouteTypeVn = this.RouteTypeVn;
			_tmp.Dosage = this.Dosage;
			_tmp.DosageUnit = this.DosageUnit;
			_tmp.DosageUnitVn = this.DosageUnitVn;
			_tmp.Frequency = this.Frequency;
			_tmp.FrequencyVn = this.FrequencyVn;
			_tmp.Duration = this.Duration;
			_tmp.DurationUnit = this.DurationUnit;
			_tmp.DurationUnitVn = this.DurationUnitVn;
			_tmp.TotalUnit = this.TotalUnit;
			
			#region Source Parent Composite Entities
			if (this.FavouriteIdSource != null)
				_tmp.FavouriteIdSource = MakeCopyOf(this.FavouriteIdSource) as FavoritMaster;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FavoritDetailEntityData _tmp = new FavoritDetailEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.FavouriteId = this.FavouriteId;
			_tmp.DrugId = this.DrugId;
			_tmp.DrugName = this.DrugName;
			_tmp.RouteType = this.RouteType;
			_tmp.RouteTypeVn = this.RouteTypeVn;
			_tmp.Dosage = this.Dosage;
			_tmp.DosageUnit = this.DosageUnit;
			_tmp.DosageUnitVn = this.DosageUnitVn;
			_tmp.Frequency = this.Frequency;
			_tmp.FrequencyVn = this.FrequencyVn;
			_tmp.Duration = this.Duration;
			_tmp.DurationUnit = this.DurationUnit;
			_tmp.DurationUnitVn = this.DurationUnitVn;
			_tmp.TotalUnit = this.TotalUnit;
			
			#region Source Parent Composite Entities
			if (this.FavouriteIdSource != null && existingCopies.Contains(this.FavouriteIdSource))
				_tmp.FavouriteIdSource = existingCopies[this.FavouriteIdSource] as FavoritMaster;
			else
				_tmp.FavouriteIdSource = MakeCopyOf(this.FavouriteIdSource, existingCopies) as FavoritMaster;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FavoritDetailColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FavoritDetailColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FavoritDetailColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FavoritDetailColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FavoritDetailColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FavoritDetailColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				FavoritDetailEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FavoritDetailEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FavoritDetailColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FavoritDetailColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FavoritDetailEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FavoritDetailEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FavoritDetailEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="FavoritDetail"/> object.
	/// </remarks>
	public class FavoritDetailEventArgs : System.EventArgs
	{
		private FavoritDetailColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FavoritDetailEventArgs class.
		///</summary>
		public FavoritDetailEventArgs(FavoritDetailColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FavoritDetailEventArgs class.
		///</summary>
		public FavoritDetailEventArgs(FavoritDetailColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FavoritDetailColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FavoritDetailColumn" />
		public FavoritDetailColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all FavoritDetail related events.
	///</summary>
	public delegate void FavoritDetailEventHandler(object sender, FavoritDetailEventArgs e);
	
	#region FavoritDetailComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FavoritDetailComparer : System.Collections.Generic.IComparer<FavoritDetail>
	{
		FavoritDetailColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FavoritDetailComparer"/> class.
        /// </summary>
		public FavoritDetailComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FavoritDetailComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FavoritDetailComparer(FavoritDetailColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="FavoritDetail"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="FavoritDetail"/> to compare.</param>
        /// <param name="b">The second <c>FavoritDetail</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(FavoritDetail a, FavoritDetail b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(FavoritDetail entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(FavoritDetail a, FavoritDetail b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FavoritDetailColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FavoritDetailKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="FavoritDetail"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FavoritDetailKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FavoritDetailKey class.
		/// </summary>
		public FavoritDetailKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FavoritDetailKey class.
		/// </summary>
		public FavoritDetailKey(FavoritDetailBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FavoritDetailKey class.
		/// </summary>
		public FavoritDetailKey(System.Int64 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FavoritDetailBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FavoritDetailBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int64 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int64 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["Id"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FavoritDetailColumn Enum
	
	/// <summary>
	/// Enumerate the FavoritDetail columns.
	/// </summary>
	[Serializable]
	public enum FavoritDetailColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("ID", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		Id = 1,
		/// <summary>
		/// FavouriteId : 
		/// </summary>
		[EnumTextValue("Favourite Id")]
		[ColumnEnum("FavouriteID", typeof(System.String), System.Data.DbType.String, false, false, false, 10)]
		FavouriteId = 2,
		/// <summary>
		/// DrugId : 
		/// </summary>
		[EnumTextValue("Drug Id")]
		[ColumnEnum("DrugID", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		DrugId = 3,
		/// <summary>
		/// DrugName : 
		/// </summary>
		[EnumTextValue("Drug Name")]
		[ColumnEnum("DrugName", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		DrugName = 4,
		/// <summary>
		/// RouteType : 
		/// </summary>
		[EnumTextValue("Route Type")]
		[ColumnEnum("RouteType", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		RouteType = 5,
		/// <summary>
		/// RouteTypeVn : 
		/// </summary>
		[EnumTextValue("Route Type Vn")]
		[ColumnEnum("RouteTypeVN", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		RouteTypeVn = 6,
		/// <summary>
		/// Dosage : 
		/// </summary>
		[EnumTextValue("Dosage")]
		[ColumnEnum("Dosage", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		Dosage = 7,
		/// <summary>
		/// DosageUnit : 
		/// </summary>
		[EnumTextValue("Dosage Unit")]
		[ColumnEnum("DosageUnit", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		DosageUnit = 8,
		/// <summary>
		/// DosageUnitVn : 
		/// </summary>
		[EnumTextValue("Dosage Unit Vn")]
		[ColumnEnum("DosageUnitVN", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		DosageUnitVn = 9,
		/// <summary>
		/// Frequency : 
		/// </summary>
		[EnumTextValue("Frequency")]
		[ColumnEnum("Frequency", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		Frequency = 10,
		/// <summary>
		/// FrequencyVn : 
		/// </summary>
		[EnumTextValue("Frequency Vn")]
		[ColumnEnum("FrequencyVN", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		FrequencyVn = 11,
		/// <summary>
		/// Duration : 
		/// </summary>
		[EnumTextValue("Duration")]
		[ColumnEnum("Duration", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Duration = 12,
		/// <summary>
		/// DurationUnit : 
		/// </summary>
		[EnumTextValue("Duration Unit")]
		[ColumnEnum("DurationUnit", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		DurationUnit = 13,
		/// <summary>
		/// DurationUnitVn : 
		/// </summary>
		[EnumTextValue("Duration Unit Vn")]
		[ColumnEnum("DurationUnitVN", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		DurationUnitVn = 14,
		/// <summary>
		/// TotalUnit : 
		/// </summary>
		[EnumTextValue("Total Unit")]
		[ColumnEnum("TotalUnit", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		TotalUnit = 15
	}//End enum

	#endregion FavoritDetailColumn Enum

} // end namespace
