
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file MedReport.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using ePrescription.Entities.Validation;
#endregion

namespace ePrescription.Entities
{
	///<summary>
	/// An object representation of the 'MedReport' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class MedReportBase : EntityBase, IMedReport, IEntityId<MedReportKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private MedReportEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private MedReportEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private MedReportEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<MedReport> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MedReportEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MedReportEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="MedReportBase"/> instance.
		///</summary>
		public MedReportBase()
		{
			this.entityData = new MedReportEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="MedReportBase"/> instance.
		///</summary>
		///<param name="_patientCode"></param>
		///<param name="_tid"></param>
		///<param name="_onsetDate"></param>
		///<param name="_firstConsultDate"></param>
		///<param name="_deceaseHistory"></param>
		///<param name="_deceaseHistoryVn"></param>
		///<param name="_symptoms"></param>
		///<param name="_symptomsVn"></param>
		///<param name="_pastMedHistory"></param>
		///<param name="_pastMedHistoryVn"></param>
		///<param name="_currentMedications"></param>
		///<param name="_physicalExam"></param>
		///<param name="_physicalExamVn"></param>
		///<param name="_investigations"></param>
		///<param name="_investigationsVn"></param>
		///<param name="_diagnosisDetail"></param>
		///<param name="_diagnosisDetailVn"></param>
		///<param name="_treatment"></param>
		///<param name="_treatmentVn"></param>
		///<param name="_reviewPlan"></param>
		///<param name="_reviewPlanVn"></param>
		///<param name="_createDate"></param>
		///<param name="_createUser"></param>
		///<param name="_updateDate"></param>
		///<param name="_updateUser"></param>
		public MedReportBase(System.String _patientCode, System.String _tid, System.DateTime? _onsetDate, 
			System.DateTime? _firstConsultDate, System.String _deceaseHistory, System.String _deceaseHistoryVn, 
			System.String _symptoms, System.String _symptomsVn, System.String _pastMedHistory, System.String _pastMedHistoryVn, 
			System.String _currentMedications, System.String _physicalExam, System.String _physicalExamVn, 
			System.String _investigations, System.String _investigationsVn, System.String _diagnosisDetail, 
			System.String _diagnosisDetailVn, System.String _treatment, System.String _treatmentVn, System.String _reviewPlan, 
			System.String _reviewPlanVn, System.DateTime? _createDate, System.String _createUser, System.DateTime? _updateDate, 
			System.String _updateUser)
		{
			this.entityData = new MedReportEntityData();
			this.backupData = null;

			this.PatientCode = _patientCode;
			this.Tid = _tid;
			this.OnsetDate = _onsetDate;
			this.FirstConsultDate = _firstConsultDate;
			this.DeceaseHistory = _deceaseHistory;
			this.DeceaseHistoryVn = _deceaseHistoryVn;
			this.Symptoms = _symptoms;
			this.SymptomsVn = _symptomsVn;
			this.PastMedHistory = _pastMedHistory;
			this.PastMedHistoryVn = _pastMedHistoryVn;
			this.CurrentMedications = _currentMedications;
			this.PhysicalExam = _physicalExam;
			this.PhysicalExamVn = _physicalExamVn;
			this.Investigations = _investigations;
			this.InvestigationsVn = _investigationsVn;
			this.DiagnosisDetail = _diagnosisDetail;
			this.DiagnosisDetailVn = _diagnosisDetailVn;
			this.Treatment = _treatment;
			this.TreatmentVn = _treatmentVn;
			this.ReviewPlan = _reviewPlan;
			this.ReviewPlanVn = _reviewPlanVn;
			this.CreateDate = _createDate;
			this.CreateUser = _createUser;
			this.UpdateDate = _updateDate;
			this.UpdateUser = _updateUser;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="MedReport"/> instance.
		///</summary>
		///<param name="_patientCode"></param>
		///<param name="_tid"></param>
		///<param name="_onsetDate"></param>
		///<param name="_firstConsultDate"></param>
		///<param name="_deceaseHistory"></param>
		///<param name="_deceaseHistoryVn"></param>
		///<param name="_symptoms"></param>
		///<param name="_symptomsVn"></param>
		///<param name="_pastMedHistory"></param>
		///<param name="_pastMedHistoryVn"></param>
		///<param name="_currentMedications"></param>
		///<param name="_physicalExam"></param>
		///<param name="_physicalExamVn"></param>
		///<param name="_investigations"></param>
		///<param name="_investigationsVn"></param>
		///<param name="_diagnosisDetail"></param>
		///<param name="_diagnosisDetailVn"></param>
		///<param name="_treatment"></param>
		///<param name="_treatmentVn"></param>
		///<param name="_reviewPlan"></param>
		///<param name="_reviewPlanVn"></param>
		///<param name="_createDate"></param>
		///<param name="_createUser"></param>
		///<param name="_updateDate"></param>
		///<param name="_updateUser"></param>
		public static MedReport CreateMedReport(System.String _patientCode, System.String _tid, System.DateTime? _onsetDate, 
			System.DateTime? _firstConsultDate, System.String _deceaseHistory, System.String _deceaseHistoryVn, 
			System.String _symptoms, System.String _symptomsVn, System.String _pastMedHistory, System.String _pastMedHistoryVn, 
			System.String _currentMedications, System.String _physicalExam, System.String _physicalExamVn, 
			System.String _investigations, System.String _investigationsVn, System.String _diagnosisDetail, 
			System.String _diagnosisDetailVn, System.String _treatment, System.String _treatmentVn, System.String _reviewPlan, 
			System.String _reviewPlanVn, System.DateTime? _createDate, System.String _createUser, System.DateTime? _updateDate, 
			System.String _updateUser)
		{
			MedReport newMedReport = new MedReport();
			newMedReport.PatientCode = _patientCode;
			newMedReport.Tid = _tid;
			newMedReport.OnsetDate = _onsetDate;
			newMedReport.FirstConsultDate = _firstConsultDate;
			newMedReport.DeceaseHistory = _deceaseHistory;
			newMedReport.DeceaseHistoryVn = _deceaseHistoryVn;
			newMedReport.Symptoms = _symptoms;
			newMedReport.SymptomsVn = _symptomsVn;
			newMedReport.PastMedHistory = _pastMedHistory;
			newMedReport.PastMedHistoryVn = _pastMedHistoryVn;
			newMedReport.CurrentMedications = _currentMedications;
			newMedReport.PhysicalExam = _physicalExam;
			newMedReport.PhysicalExamVn = _physicalExamVn;
			newMedReport.Investigations = _investigations;
			newMedReport.InvestigationsVn = _investigationsVn;
			newMedReport.DiagnosisDetail = _diagnosisDetail;
			newMedReport.DiagnosisDetailVn = _diagnosisDetailVn;
			newMedReport.Treatment = _treatment;
			newMedReport.TreatmentVn = _treatmentVn;
			newMedReport.ReviewPlan = _reviewPlan;
			newMedReport.ReviewPlanVn = _reviewPlanVn;
			newMedReport.CreateDate = _createDate;
			newMedReport.CreateUser = _createUser;
			newMedReport.UpdateDate = _updateDate;
			newMedReport.UpdateUser = _updateUser;
			return newMedReport;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MedId property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "MedId is required")]




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 MedId
		{
			get
			{
				return this.entityData.MedId; 
			}
			
			set
			{
				if (this.entityData.MedId == value)
					return;
				
                OnPropertyChanging("MedId");                    
				OnColumnChanging(MedReportColumn.MedId, this.entityData.MedId);
				this.entityData.MedId = value;
				this.EntityId.MedId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.MedId, this.entityData.MedId);
				OnPropertyChanged("MedId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PatientCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "PatientCode is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String PatientCode
		{
			get
			{
				return this.entityData.PatientCode; 
			}
			
			set
			{
				if (this.entityData.PatientCode == value)
					return;
				
                OnPropertyChanging("PatientCode");                    
				OnColumnChanging(MedReportColumn.PatientCode, this.entityData.PatientCode);
				this.entityData.PatientCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.PatientCode, this.entityData.PatientCode);
				OnPropertyChanged("PatientCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Tid property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "Tid is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 15)]
		public virtual System.String Tid
		{
			get
			{
				return this.entityData.Tid; 
			}
			
			set
			{
				if (this.entityData.Tid == value)
					return;
				
                OnPropertyChanging("Tid");                    
				OnColumnChanging(MedReportColumn.Tid, this.entityData.Tid);
				this.entityData.Tid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.Tid, this.entityData.Tid);
				OnPropertyChanged("Tid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OnsetDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? OnsetDate
		{
			get
			{
				return this.entityData.OnsetDate; 
			}
			
			set
			{
				if (this.entityData.OnsetDate == value)
					return;
				
                OnPropertyChanging("OnsetDate");                    
				OnColumnChanging(MedReportColumn.OnsetDate, this.entityData.OnsetDate);
				this.entityData.OnsetDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.OnsetDate, this.entityData.OnsetDate);
				OnPropertyChanged("OnsetDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FirstConsultDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? FirstConsultDate
		{
			get
			{
				return this.entityData.FirstConsultDate; 
			}
			
			set
			{
				if (this.entityData.FirstConsultDate == value)
					return;
				
                OnPropertyChanging("FirstConsultDate");                    
				OnColumnChanging(MedReportColumn.FirstConsultDate, this.entityData.FirstConsultDate);
				this.entityData.FirstConsultDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.FirstConsultDate, this.entityData.FirstConsultDate);
				OnPropertyChanged("FirstConsultDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeceaseHistory property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String DeceaseHistory
		{
			get
			{
				return this.entityData.DeceaseHistory; 
			}
			
			set
			{
				if (this.entityData.DeceaseHistory == value)
					return;
				
                OnPropertyChanging("DeceaseHistory");                    
				OnColumnChanging(MedReportColumn.DeceaseHistory, this.entityData.DeceaseHistory);
				this.entityData.DeceaseHistory = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.DeceaseHistory, this.entityData.DeceaseHistory);
				OnPropertyChanged("DeceaseHistory");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeceaseHistoryVn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String DeceaseHistoryVn
		{
			get
			{
				return this.entityData.DeceaseHistoryVn; 
			}
			
			set
			{
				if (this.entityData.DeceaseHistoryVn == value)
					return;
				
                OnPropertyChanging("DeceaseHistoryVn");                    
				OnColumnChanging(MedReportColumn.DeceaseHistoryVn, this.entityData.DeceaseHistoryVn);
				this.entityData.DeceaseHistoryVn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.DeceaseHistoryVn, this.entityData.DeceaseHistoryVn);
				OnPropertyChanged("DeceaseHistoryVn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Symptoms property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String Symptoms
		{
			get
			{
				return this.entityData.Symptoms; 
			}
			
			set
			{
				if (this.entityData.Symptoms == value)
					return;
				
                OnPropertyChanging("Symptoms");                    
				OnColumnChanging(MedReportColumn.Symptoms, this.entityData.Symptoms);
				this.entityData.Symptoms = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.Symptoms, this.entityData.Symptoms);
				OnPropertyChanged("Symptoms");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SymptomsVn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String SymptomsVn
		{
			get
			{
				return this.entityData.SymptomsVn; 
			}
			
			set
			{
				if (this.entityData.SymptomsVn == value)
					return;
				
                OnPropertyChanging("SymptomsVn");                    
				OnColumnChanging(MedReportColumn.SymptomsVn, this.entityData.SymptomsVn);
				this.entityData.SymptomsVn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.SymptomsVn, this.entityData.SymptomsVn);
				OnPropertyChanged("SymptomsVn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PastMedHistory property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String PastMedHistory
		{
			get
			{
				return this.entityData.PastMedHistory; 
			}
			
			set
			{
				if (this.entityData.PastMedHistory == value)
					return;
				
                OnPropertyChanging("PastMedHistory");                    
				OnColumnChanging(MedReportColumn.PastMedHistory, this.entityData.PastMedHistory);
				this.entityData.PastMedHistory = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.PastMedHistory, this.entityData.PastMedHistory);
				OnPropertyChanged("PastMedHistory");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PastMedHistoryVn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String PastMedHistoryVn
		{
			get
			{
				return this.entityData.PastMedHistoryVn; 
			}
			
			set
			{
				if (this.entityData.PastMedHistoryVn == value)
					return;
				
                OnPropertyChanging("PastMedHistoryVn");                    
				OnColumnChanging(MedReportColumn.PastMedHistoryVn, this.entityData.PastMedHistoryVn);
				this.entityData.PastMedHistoryVn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.PastMedHistoryVn, this.entityData.PastMedHistoryVn);
				OnPropertyChanged("PastMedHistoryVn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrentMedications property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String CurrentMedications
		{
			get
			{
				return this.entityData.CurrentMedications; 
			}
			
			set
			{
				if (this.entityData.CurrentMedications == value)
					return;
				
                OnPropertyChanging("CurrentMedications");                    
				OnColumnChanging(MedReportColumn.CurrentMedications, this.entityData.CurrentMedications);
				this.entityData.CurrentMedications = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.CurrentMedications, this.entityData.CurrentMedications);
				OnPropertyChanged("CurrentMedications");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PhysicalExam property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String PhysicalExam
		{
			get
			{
				return this.entityData.PhysicalExam; 
			}
			
			set
			{
				if (this.entityData.PhysicalExam == value)
					return;
				
                OnPropertyChanging("PhysicalExam");                    
				OnColumnChanging(MedReportColumn.PhysicalExam, this.entityData.PhysicalExam);
				this.entityData.PhysicalExam = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.PhysicalExam, this.entityData.PhysicalExam);
				OnPropertyChanged("PhysicalExam");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PhysicalExamVn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String PhysicalExamVn
		{
			get
			{
				return this.entityData.PhysicalExamVn; 
			}
			
			set
			{
				if (this.entityData.PhysicalExamVn == value)
					return;
				
                OnPropertyChanging("PhysicalExamVn");                    
				OnColumnChanging(MedReportColumn.PhysicalExamVn, this.entityData.PhysicalExamVn);
				this.entityData.PhysicalExamVn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.PhysicalExamVn, this.entityData.PhysicalExamVn);
				OnPropertyChanged("PhysicalExamVn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Investigations property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String Investigations
		{
			get
			{
				return this.entityData.Investigations; 
			}
			
			set
			{
				if (this.entityData.Investigations == value)
					return;
				
                OnPropertyChanging("Investigations");                    
				OnColumnChanging(MedReportColumn.Investigations, this.entityData.Investigations);
				this.entityData.Investigations = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.Investigations, this.entityData.Investigations);
				OnPropertyChanged("Investigations");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InvestigationsVn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String InvestigationsVn
		{
			get
			{
				return this.entityData.InvestigationsVn; 
			}
			
			set
			{
				if (this.entityData.InvestigationsVn == value)
					return;
				
                OnPropertyChanging("InvestigationsVn");                    
				OnColumnChanging(MedReportColumn.InvestigationsVn, this.entityData.InvestigationsVn);
				this.entityData.InvestigationsVn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.InvestigationsVn, this.entityData.InvestigationsVn);
				OnPropertyChanged("InvestigationsVn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiagnosisDetail property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String DiagnosisDetail
		{
			get
			{
				return this.entityData.DiagnosisDetail; 
			}
			
			set
			{
				if (this.entityData.DiagnosisDetail == value)
					return;
				
                OnPropertyChanging("DiagnosisDetail");                    
				OnColumnChanging(MedReportColumn.DiagnosisDetail, this.entityData.DiagnosisDetail);
				this.entityData.DiagnosisDetail = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.DiagnosisDetail, this.entityData.DiagnosisDetail);
				OnPropertyChanged("DiagnosisDetail");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiagnosisDetailVn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String DiagnosisDetailVn
		{
			get
			{
				return this.entityData.DiagnosisDetailVn; 
			}
			
			set
			{
				if (this.entityData.DiagnosisDetailVn == value)
					return;
				
                OnPropertyChanging("DiagnosisDetailVn");                    
				OnColumnChanging(MedReportColumn.DiagnosisDetailVn, this.entityData.DiagnosisDetailVn);
				this.entityData.DiagnosisDetailVn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.DiagnosisDetailVn, this.entityData.DiagnosisDetailVn);
				OnPropertyChanged("DiagnosisDetailVn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Treatment property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String Treatment
		{
			get
			{
				return this.entityData.Treatment; 
			}
			
			set
			{
				if (this.entityData.Treatment == value)
					return;
				
                OnPropertyChanging("Treatment");                    
				OnColumnChanging(MedReportColumn.Treatment, this.entityData.Treatment);
				this.entityData.Treatment = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.Treatment, this.entityData.Treatment);
				OnPropertyChanged("Treatment");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TreatmentVn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String TreatmentVn
		{
			get
			{
				return this.entityData.TreatmentVn; 
			}
			
			set
			{
				if (this.entityData.TreatmentVn == value)
					return;
				
                OnPropertyChanging("TreatmentVn");                    
				OnColumnChanging(MedReportColumn.TreatmentVn, this.entityData.TreatmentVn);
				this.entityData.TreatmentVn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.TreatmentVn, this.entityData.TreatmentVn);
				OnPropertyChanged("TreatmentVn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReviewPlan property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String ReviewPlan
		{
			get
			{
				return this.entityData.ReviewPlan; 
			}
			
			set
			{
				if (this.entityData.ReviewPlan == value)
					return;
				
                OnPropertyChanging("ReviewPlan");                    
				OnColumnChanging(MedReportColumn.ReviewPlan, this.entityData.ReviewPlan);
				this.entityData.ReviewPlan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.ReviewPlan, this.entityData.ReviewPlan);
				OnPropertyChanged("ReviewPlan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReviewPlanVn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String ReviewPlanVn
		{
			get
			{
				return this.entityData.ReviewPlanVn; 
			}
			
			set
			{
				if (this.entityData.ReviewPlanVn == value)
					return;
				
                OnPropertyChanging("ReviewPlanVn");                    
				OnColumnChanging(MedReportColumn.ReviewPlanVn, this.entityData.ReviewPlanVn);
				this.entityData.ReviewPlanVn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.ReviewPlanVn, this.entityData.ReviewPlanVn);
				OnPropertyChanged("ReviewPlanVn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreateDate
		{
			get
			{
				return this.entityData.CreateDate; 
			}
			
			set
			{
				if (this.entityData.CreateDate == value)
					return;
				
                OnPropertyChanging("CreateDate");                    
				OnColumnChanging(MedReportColumn.CreateDate, this.entityData.CreateDate);
				this.entityData.CreateDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.CreateDate, this.entityData.CreateDate);
				OnPropertyChanged("CreateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateUser property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String CreateUser
		{
			get
			{
				return this.entityData.CreateUser; 
			}
			
			set
			{
				if (this.entityData.CreateUser == value)
					return;
				
                OnPropertyChanging("CreateUser");                    
				OnColumnChanging(MedReportColumn.CreateUser, this.entityData.CreateUser);
				this.entityData.CreateUser = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.CreateUser, this.entityData.CreateUser);
				OnPropertyChanged("CreateUser");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdateDate
		{
			get
			{
				return this.entityData.UpdateDate; 
			}
			
			set
			{
				if (this.entityData.UpdateDate == value)
					return;
				
                OnPropertyChanging("UpdateDate");                    
				OnColumnChanging(MedReportColumn.UpdateDate, this.entityData.UpdateDate);
				this.entityData.UpdateDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.UpdateDate, this.entityData.UpdateDate);
				OnPropertyChanged("UpdateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateUser property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String UpdateUser
		{
			get
			{
				return this.entityData.UpdateUser; 
			}
			
			set
			{
				if (this.entityData.UpdateUser == value)
					return;
				
                OnPropertyChanging("UpdateUser");                    
				OnColumnChanging(MedReportColumn.UpdateUser, this.entityData.UpdateUser);
				this.entityData.UpdateUser = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MedReportColumn.UpdateUser, this.entityData.UpdateUser);
				OnPropertyChanged("UpdateUser");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("PatientCode", "Patient Code"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PatientCode", "Patient Code", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Tid", "Tid"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Tid", "Tid", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DeceaseHistory", "Decease History", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DeceaseHistoryVn", "Decease History Vn", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Symptoms", "Symptoms", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SymptomsVn", "Symptoms Vn", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PastMedHistory", "Past Med History", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PastMedHistoryVn", "Past Med History Vn", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CurrentMedications", "Current Medications", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PhysicalExam", "Physical Exam", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PhysicalExamVn", "Physical Exam Vn", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Investigations", "Investigations", 1000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("InvestigationsVn", "Investigations Vn", 1000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DiagnosisDetail", "Diagnosis Detail", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DiagnosisDetailVn", "Diagnosis Detail Vn", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Treatment", "Treatment", 1000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TreatmentVn", "Treatment Vn", 1000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ReviewPlan", "Review Plan", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ReviewPlanVn", "Review Plan Vn", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CreateUser", "Create User", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UpdateUser", "Update User", 20));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "MedReport"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MedId", "PatientCode", "TID", "OnsetDate", "FirstConsultDate", "DeceaseHistory", "DeceaseHistoryVN", "Symptoms", "SymptomsVN", "PastMedHistory", "PastMedHistoryVN", "CurrentMedications", "PhysicalExam", "PhysicalExamVN", "Investigations", "InvestigationsVN", "DiagnosisDetail", "DiagnosisDetailVN", "Treatment", "TreatmentVN", "ReviewPlan", "ReviewPlanVN", "CreateDate", "CreateUser", "UpdateDate", "UpdateUser"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as MedReportEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (MedReport) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<MedReport>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as MedReport);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed MedReport Entity 
		///</summary>
		protected virtual MedReport Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			MedReport copy = new MedReport();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MedId = this.MedId;
				copy.PatientCode = this.PatientCode;
				copy.Tid = this.Tid;
				copy.OnsetDate = this.OnsetDate;
				copy.FirstConsultDate = this.FirstConsultDate;
				copy.DeceaseHistory = this.DeceaseHistory;
				copy.DeceaseHistoryVn = this.DeceaseHistoryVn;
				copy.Symptoms = this.Symptoms;
				copy.SymptomsVn = this.SymptomsVn;
				copy.PastMedHistory = this.PastMedHistory;
				copy.PastMedHistoryVn = this.PastMedHistoryVn;
				copy.CurrentMedications = this.CurrentMedications;
				copy.PhysicalExam = this.PhysicalExam;
				copy.PhysicalExamVn = this.PhysicalExamVn;
				copy.Investigations = this.Investigations;
				copy.InvestigationsVn = this.InvestigationsVn;
				copy.DiagnosisDetail = this.DiagnosisDetail;
				copy.DiagnosisDetailVn = this.DiagnosisDetailVn;
				copy.Treatment = this.Treatment;
				copy.TreatmentVn = this.TreatmentVn;
				copy.ReviewPlan = this.ReviewPlan;
				copy.ReviewPlanVn = this.ReviewPlanVn;
				copy.CreateDate = this.CreateDate;
				copy.CreateUser = this.CreateUser;
				copy.UpdateDate = this.UpdateDate;
				copy.UpdateUser = this.UpdateUser;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed MedReport Entity 
		///</summary>
		public virtual MedReport Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed MedReport Entity which is a deep copy of the current entity.
		///</summary>
		public virtual MedReport DeepCopy()
		{
			return EntityHelper.Clone<MedReport>(this as MedReport);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as MedReportEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new MedReportEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as MedReportEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(MedReportColumn column)
		{
			switch(column)
			{
					case MedReportColumn.MedId:
					return entityData.MedId != _originalData.MedId;
					case MedReportColumn.PatientCode:
					return entityData.PatientCode != _originalData.PatientCode;
					case MedReportColumn.Tid:
					return entityData.Tid != _originalData.Tid;
					case MedReportColumn.OnsetDate:
					return entityData.OnsetDate != _originalData.OnsetDate;
					case MedReportColumn.FirstConsultDate:
					return entityData.FirstConsultDate != _originalData.FirstConsultDate;
					case MedReportColumn.DeceaseHistory:
					return entityData.DeceaseHistory != _originalData.DeceaseHistory;
					case MedReportColumn.DeceaseHistoryVn:
					return entityData.DeceaseHistoryVn != _originalData.DeceaseHistoryVn;
					case MedReportColumn.Symptoms:
					return entityData.Symptoms != _originalData.Symptoms;
					case MedReportColumn.SymptomsVn:
					return entityData.SymptomsVn != _originalData.SymptomsVn;
					case MedReportColumn.PastMedHistory:
					return entityData.PastMedHistory != _originalData.PastMedHistory;
					case MedReportColumn.PastMedHistoryVn:
					return entityData.PastMedHistoryVn != _originalData.PastMedHistoryVn;
					case MedReportColumn.CurrentMedications:
					return entityData.CurrentMedications != _originalData.CurrentMedications;
					case MedReportColumn.PhysicalExam:
					return entityData.PhysicalExam != _originalData.PhysicalExam;
					case MedReportColumn.PhysicalExamVn:
					return entityData.PhysicalExamVn != _originalData.PhysicalExamVn;
					case MedReportColumn.Investigations:
					return entityData.Investigations != _originalData.Investigations;
					case MedReportColumn.InvestigationsVn:
					return entityData.InvestigationsVn != _originalData.InvestigationsVn;
					case MedReportColumn.DiagnosisDetail:
					return entityData.DiagnosisDetail != _originalData.DiagnosisDetail;
					case MedReportColumn.DiagnosisDetailVn:
					return entityData.DiagnosisDetailVn != _originalData.DiagnosisDetailVn;
					case MedReportColumn.Treatment:
					return entityData.Treatment != _originalData.Treatment;
					case MedReportColumn.TreatmentVn:
					return entityData.TreatmentVn != _originalData.TreatmentVn;
					case MedReportColumn.ReviewPlan:
					return entityData.ReviewPlan != _originalData.ReviewPlan;
					case MedReportColumn.ReviewPlanVn:
					return entityData.ReviewPlanVn != _originalData.ReviewPlanVn;
					case MedReportColumn.CreateDate:
					return entityData.CreateDate != _originalData.CreateDate;
					case MedReportColumn.CreateUser:
					return entityData.CreateUser != _originalData.CreateUser;
					case MedReportColumn.UpdateDate:
					return entityData.UpdateDate != _originalData.UpdateDate;
					case MedReportColumn.UpdateUser:
					return entityData.UpdateUser != _originalData.UpdateUser;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< MedReportColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MedId != _originalData.MedId;
			result = result || entityData.PatientCode != _originalData.PatientCode;
			result = result || entityData.Tid != _originalData.Tid;
			result = result || entityData.OnsetDate != _originalData.OnsetDate;
			result = result || entityData.FirstConsultDate != _originalData.FirstConsultDate;
			result = result || entityData.DeceaseHistory != _originalData.DeceaseHistory;
			result = result || entityData.DeceaseHistoryVn != _originalData.DeceaseHistoryVn;
			result = result || entityData.Symptoms != _originalData.Symptoms;
			result = result || entityData.SymptomsVn != _originalData.SymptomsVn;
			result = result || entityData.PastMedHistory != _originalData.PastMedHistory;
			result = result || entityData.PastMedHistoryVn != _originalData.PastMedHistoryVn;
			result = result || entityData.CurrentMedications != _originalData.CurrentMedications;
			result = result || entityData.PhysicalExam != _originalData.PhysicalExam;
			result = result || entityData.PhysicalExamVn != _originalData.PhysicalExamVn;
			result = result || entityData.Investigations != _originalData.Investigations;
			result = result || entityData.InvestigationsVn != _originalData.InvestigationsVn;
			result = result || entityData.DiagnosisDetail != _originalData.DiagnosisDetail;
			result = result || entityData.DiagnosisDetailVn != _originalData.DiagnosisDetailVn;
			result = result || entityData.Treatment != _originalData.Treatment;
			result = result || entityData.TreatmentVn != _originalData.TreatmentVn;
			result = result || entityData.ReviewPlan != _originalData.ReviewPlan;
			result = result || entityData.ReviewPlanVn != _originalData.ReviewPlanVn;
			result = result || entityData.CreateDate != _originalData.CreateDate;
			result = result || entityData.CreateUser != _originalData.CreateUser;
			result = result || entityData.UpdateDate != _originalData.UpdateDate;
			result = result || entityData.UpdateUser != _originalData.UpdateUser;
			return result;
		}	
		
		///<summary>
		///  Returns a MedReport Entity with the original data.
		///</summary>
		public MedReport GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateMedReport(
				_originalData.PatientCode,
				_originalData.Tid,
				_originalData.OnsetDate,
				_originalData.FirstConsultDate,
				_originalData.DeceaseHistory,
				_originalData.DeceaseHistoryVn,
				_originalData.Symptoms,
				_originalData.SymptomsVn,
				_originalData.PastMedHistory,
				_originalData.PastMedHistoryVn,
				_originalData.CurrentMedications,
				_originalData.PhysicalExam,
				_originalData.PhysicalExamVn,
				_originalData.Investigations,
				_originalData.InvestigationsVn,
				_originalData.DiagnosisDetail,
				_originalData.DiagnosisDetailVn,
				_originalData.Treatment,
				_originalData.TreatmentVn,
				_originalData.ReviewPlan,
				_originalData.ReviewPlanVn,
				_originalData.CreateDate,
				_originalData.CreateUser,
				_originalData.UpdateDate,
				_originalData.UpdateUser
				);
				
			return (MedReport)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="MedReportBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is MedReportBase)
				return ValueEquals(this, (MedReportBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="MedReportBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MedId.GetHashCode() ^ 
					this.PatientCode.GetHashCode() ^ 
					this.Tid.GetHashCode() ^ 
					((this.OnsetDate == null) ? string.Empty : this.OnsetDate.ToString()).GetHashCode() ^ 
					((this.FirstConsultDate == null) ? string.Empty : this.FirstConsultDate.ToString()).GetHashCode() ^ 
					((this.DeceaseHistory == null) ? string.Empty : this.DeceaseHistory.ToString()).GetHashCode() ^ 
					((this.DeceaseHistoryVn == null) ? string.Empty : this.DeceaseHistoryVn.ToString()).GetHashCode() ^ 
					((this.Symptoms == null) ? string.Empty : this.Symptoms.ToString()).GetHashCode() ^ 
					((this.SymptomsVn == null) ? string.Empty : this.SymptomsVn.ToString()).GetHashCode() ^ 
					((this.PastMedHistory == null) ? string.Empty : this.PastMedHistory.ToString()).GetHashCode() ^ 
					((this.PastMedHistoryVn == null) ? string.Empty : this.PastMedHistoryVn.ToString()).GetHashCode() ^ 
					((this.CurrentMedications == null) ? string.Empty : this.CurrentMedications.ToString()).GetHashCode() ^ 
					((this.PhysicalExam == null) ? string.Empty : this.PhysicalExam.ToString()).GetHashCode() ^ 
					((this.PhysicalExamVn == null) ? string.Empty : this.PhysicalExamVn.ToString()).GetHashCode() ^ 
					((this.Investigations == null) ? string.Empty : this.Investigations.ToString()).GetHashCode() ^ 
					((this.InvestigationsVn == null) ? string.Empty : this.InvestigationsVn.ToString()).GetHashCode() ^ 
					((this.DiagnosisDetail == null) ? string.Empty : this.DiagnosisDetail.ToString()).GetHashCode() ^ 
					((this.DiagnosisDetailVn == null) ? string.Empty : this.DiagnosisDetailVn.ToString()).GetHashCode() ^ 
					((this.Treatment == null) ? string.Empty : this.Treatment.ToString()).GetHashCode() ^ 
					((this.TreatmentVn == null) ? string.Empty : this.TreatmentVn.ToString()).GetHashCode() ^ 
					((this.ReviewPlan == null) ? string.Empty : this.ReviewPlan.ToString()).GetHashCode() ^ 
					((this.ReviewPlanVn == null) ? string.Empty : this.ReviewPlanVn.ToString()).GetHashCode() ^ 
					((this.CreateDate == null) ? string.Empty : this.CreateDate.ToString()).GetHashCode() ^ 
					((this.CreateUser == null) ? string.Empty : this.CreateUser.ToString()).GetHashCode() ^ 
					((this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString()).GetHashCode() ^ 
					((this.UpdateUser == null) ? string.Empty : this.UpdateUser.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="MedReportBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(MedReportBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="MedReportBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="MedReportBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="MedReportBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(MedReportBase Object1, MedReportBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MedId != Object2.MedId)
				equal = false;
			if (Object1.PatientCode != Object2.PatientCode)
				equal = false;
			if (Object1.Tid != Object2.Tid)
				equal = false;
			if ( Object1.OnsetDate != null && Object2.OnsetDate != null )
			{
				if (Object1.OnsetDate != Object2.OnsetDate)
					equal = false;
			}
			else if (Object1.OnsetDate == null ^ Object2.OnsetDate == null )
			{
				equal = false;
			}
			if ( Object1.FirstConsultDate != null && Object2.FirstConsultDate != null )
			{
				if (Object1.FirstConsultDate != Object2.FirstConsultDate)
					equal = false;
			}
			else if (Object1.FirstConsultDate == null ^ Object2.FirstConsultDate == null )
			{
				equal = false;
			}
			if ( Object1.DeceaseHistory != null && Object2.DeceaseHistory != null )
			{
				if (Object1.DeceaseHistory != Object2.DeceaseHistory)
					equal = false;
			}
			else if (Object1.DeceaseHistory == null ^ Object2.DeceaseHistory == null )
			{
				equal = false;
			}
			if ( Object1.DeceaseHistoryVn != null && Object2.DeceaseHistoryVn != null )
			{
				if (Object1.DeceaseHistoryVn != Object2.DeceaseHistoryVn)
					equal = false;
			}
			else if (Object1.DeceaseHistoryVn == null ^ Object2.DeceaseHistoryVn == null )
			{
				equal = false;
			}
			if ( Object1.Symptoms != null && Object2.Symptoms != null )
			{
				if (Object1.Symptoms != Object2.Symptoms)
					equal = false;
			}
			else if (Object1.Symptoms == null ^ Object2.Symptoms == null )
			{
				equal = false;
			}
			if ( Object1.SymptomsVn != null && Object2.SymptomsVn != null )
			{
				if (Object1.SymptomsVn != Object2.SymptomsVn)
					equal = false;
			}
			else if (Object1.SymptomsVn == null ^ Object2.SymptomsVn == null )
			{
				equal = false;
			}
			if ( Object1.PastMedHistory != null && Object2.PastMedHistory != null )
			{
				if (Object1.PastMedHistory != Object2.PastMedHistory)
					equal = false;
			}
			else if (Object1.PastMedHistory == null ^ Object2.PastMedHistory == null )
			{
				equal = false;
			}
			if ( Object1.PastMedHistoryVn != null && Object2.PastMedHistoryVn != null )
			{
				if (Object1.PastMedHistoryVn != Object2.PastMedHistoryVn)
					equal = false;
			}
			else if (Object1.PastMedHistoryVn == null ^ Object2.PastMedHistoryVn == null )
			{
				equal = false;
			}
			if ( Object1.CurrentMedications != null && Object2.CurrentMedications != null )
			{
				if (Object1.CurrentMedications != Object2.CurrentMedications)
					equal = false;
			}
			else if (Object1.CurrentMedications == null ^ Object2.CurrentMedications == null )
			{
				equal = false;
			}
			if ( Object1.PhysicalExam != null && Object2.PhysicalExam != null )
			{
				if (Object1.PhysicalExam != Object2.PhysicalExam)
					equal = false;
			}
			else if (Object1.PhysicalExam == null ^ Object2.PhysicalExam == null )
			{
				equal = false;
			}
			if ( Object1.PhysicalExamVn != null && Object2.PhysicalExamVn != null )
			{
				if (Object1.PhysicalExamVn != Object2.PhysicalExamVn)
					equal = false;
			}
			else if (Object1.PhysicalExamVn == null ^ Object2.PhysicalExamVn == null )
			{
				equal = false;
			}
			if ( Object1.Investigations != null && Object2.Investigations != null )
			{
				if (Object1.Investigations != Object2.Investigations)
					equal = false;
			}
			else if (Object1.Investigations == null ^ Object2.Investigations == null )
			{
				equal = false;
			}
			if ( Object1.InvestigationsVn != null && Object2.InvestigationsVn != null )
			{
				if (Object1.InvestigationsVn != Object2.InvestigationsVn)
					equal = false;
			}
			else if (Object1.InvestigationsVn == null ^ Object2.InvestigationsVn == null )
			{
				equal = false;
			}
			if ( Object1.DiagnosisDetail != null && Object2.DiagnosisDetail != null )
			{
				if (Object1.DiagnosisDetail != Object2.DiagnosisDetail)
					equal = false;
			}
			else if (Object1.DiagnosisDetail == null ^ Object2.DiagnosisDetail == null )
			{
				equal = false;
			}
			if ( Object1.DiagnosisDetailVn != null && Object2.DiagnosisDetailVn != null )
			{
				if (Object1.DiagnosisDetailVn != Object2.DiagnosisDetailVn)
					equal = false;
			}
			else if (Object1.DiagnosisDetailVn == null ^ Object2.DiagnosisDetailVn == null )
			{
				equal = false;
			}
			if ( Object1.Treatment != null && Object2.Treatment != null )
			{
				if (Object1.Treatment != Object2.Treatment)
					equal = false;
			}
			else if (Object1.Treatment == null ^ Object2.Treatment == null )
			{
				equal = false;
			}
			if ( Object1.TreatmentVn != null && Object2.TreatmentVn != null )
			{
				if (Object1.TreatmentVn != Object2.TreatmentVn)
					equal = false;
			}
			else if (Object1.TreatmentVn == null ^ Object2.TreatmentVn == null )
			{
				equal = false;
			}
			if ( Object1.ReviewPlan != null && Object2.ReviewPlan != null )
			{
				if (Object1.ReviewPlan != Object2.ReviewPlan)
					equal = false;
			}
			else if (Object1.ReviewPlan == null ^ Object2.ReviewPlan == null )
			{
				equal = false;
			}
			if ( Object1.ReviewPlanVn != null && Object2.ReviewPlanVn != null )
			{
				if (Object1.ReviewPlanVn != Object2.ReviewPlanVn)
					equal = false;
			}
			else if (Object1.ReviewPlanVn == null ^ Object2.ReviewPlanVn == null )
			{
				equal = false;
			}
			if ( Object1.CreateDate != null && Object2.CreateDate != null )
			{
				if (Object1.CreateDate != Object2.CreateDate)
					equal = false;
			}
			else if (Object1.CreateDate == null ^ Object2.CreateDate == null )
			{
				equal = false;
			}
			if ( Object1.CreateUser != null && Object2.CreateUser != null )
			{
				if (Object1.CreateUser != Object2.CreateUser)
					equal = false;
			}
			else if (Object1.CreateUser == null ^ Object2.CreateUser == null )
			{
				equal = false;
			}
			if ( Object1.UpdateDate != null && Object2.UpdateDate != null )
			{
				if (Object1.UpdateDate != Object2.UpdateDate)
					equal = false;
			}
			else if (Object1.UpdateDate == null ^ Object2.UpdateDate == null )
			{
				equal = false;
			}
			if ( Object1.UpdateUser != null && Object2.UpdateUser != null )
			{
				if (Object1.UpdateUser != Object2.UpdateUser)
					equal = false;
			}
			else if (Object1.UpdateUser == null ^ Object2.UpdateUser == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((MedReportBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static MedReportComparer GetComparer()
        {
            return new MedReportComparer();
        }
        */

        // Comparer delegates back to MedReport
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(MedReport rhs, MedReportColumn which)
        {
            switch (which)
            {
            	
            	
            	case MedReportColumn.MedId:
            		return this.MedId.CompareTo(rhs.MedId);
            		
            		                 
            	
            	
            	case MedReportColumn.PatientCode:
            		return this.PatientCode.CompareTo(rhs.PatientCode);
            		
            		                 
            	
            	
            	case MedReportColumn.Tid:
            		return this.Tid.CompareTo(rhs.Tid);
            		
            		                 
            	
            	
            	case MedReportColumn.OnsetDate:
            		return this.OnsetDate.Value.CompareTo(rhs.OnsetDate.Value);
            		
            		                 
            	
            	
            	case MedReportColumn.FirstConsultDate:
            		return this.FirstConsultDate.Value.CompareTo(rhs.FirstConsultDate.Value);
            		
            		                 
            	
            	
            	case MedReportColumn.DeceaseHistory:
            		return this.DeceaseHistory.CompareTo(rhs.DeceaseHistory);
            		
            		                 
            	
            	
            	case MedReportColumn.DeceaseHistoryVn:
            		return this.DeceaseHistoryVn.CompareTo(rhs.DeceaseHistoryVn);
            		
            		                 
            	
            	
            	case MedReportColumn.Symptoms:
            		return this.Symptoms.CompareTo(rhs.Symptoms);
            		
            		                 
            	
            	
            	case MedReportColumn.SymptomsVn:
            		return this.SymptomsVn.CompareTo(rhs.SymptomsVn);
            		
            		                 
            	
            	
            	case MedReportColumn.PastMedHistory:
            		return this.PastMedHistory.CompareTo(rhs.PastMedHistory);
            		
            		                 
            	
            	
            	case MedReportColumn.PastMedHistoryVn:
            		return this.PastMedHistoryVn.CompareTo(rhs.PastMedHistoryVn);
            		
            		                 
            	
            	
            	case MedReportColumn.CurrentMedications:
            		return this.CurrentMedications.CompareTo(rhs.CurrentMedications);
            		
            		                 
            	
            	
            	case MedReportColumn.PhysicalExam:
            		return this.PhysicalExam.CompareTo(rhs.PhysicalExam);
            		
            		                 
            	
            	
            	case MedReportColumn.PhysicalExamVn:
            		return this.PhysicalExamVn.CompareTo(rhs.PhysicalExamVn);
            		
            		                 
            	
            	
            	case MedReportColumn.Investigations:
            		return this.Investigations.CompareTo(rhs.Investigations);
            		
            		                 
            	
            	
            	case MedReportColumn.InvestigationsVn:
            		return this.InvestigationsVn.CompareTo(rhs.InvestigationsVn);
            		
            		                 
            	
            	
            	case MedReportColumn.DiagnosisDetail:
            		return this.DiagnosisDetail.CompareTo(rhs.DiagnosisDetail);
            		
            		                 
            	
            	
            	case MedReportColumn.DiagnosisDetailVn:
            		return this.DiagnosisDetailVn.CompareTo(rhs.DiagnosisDetailVn);
            		
            		                 
            	
            	
            	case MedReportColumn.Treatment:
            		return this.Treatment.CompareTo(rhs.Treatment);
            		
            		                 
            	
            	
            	case MedReportColumn.TreatmentVn:
            		return this.TreatmentVn.CompareTo(rhs.TreatmentVn);
            		
            		                 
            	
            	
            	case MedReportColumn.ReviewPlan:
            		return this.ReviewPlan.CompareTo(rhs.ReviewPlan);
            		
            		                 
            	
            	
            	case MedReportColumn.ReviewPlanVn:
            		return this.ReviewPlanVn.CompareTo(rhs.ReviewPlanVn);
            		
            		                 
            	
            	
            	case MedReportColumn.CreateDate:
            		return this.CreateDate.Value.CompareTo(rhs.CreateDate.Value);
            		
            		                 
            	
            	
            	case MedReportColumn.CreateUser:
            		return this.CreateUser.CompareTo(rhs.CreateUser);
            		
            		                 
            	
            	
            	case MedReportColumn.UpdateDate:
            		return this.UpdateDate.Value.CompareTo(rhs.UpdateDate.Value);
            		
            		                 
            	
            	
            	case MedReportColumn.UpdateUser:
            		return this.UpdateUser.CompareTo(rhs.UpdateUser);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<MedReportKey> Members
		
		// member variable for the EntityId property
		private MedReportKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual MedReportKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new MedReportKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("MedReport")
					.Append("|").Append( this.MedId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{27}{26}- MedId: {0}{26}- PatientCode: {1}{26}- Tid: {2}{26}- OnsetDate: {3}{26}- FirstConsultDate: {4}{26}- DeceaseHistory: {5}{26}- DeceaseHistoryVn: {6}{26}- Symptoms: {7}{26}- SymptomsVn: {8}{26}- PastMedHistory: {9}{26}- PastMedHistoryVn: {10}{26}- CurrentMedications: {11}{26}- PhysicalExam: {12}{26}- PhysicalExamVn: {13}{26}- Investigations: {14}{26}- InvestigationsVn: {15}{26}- DiagnosisDetail: {16}{26}- DiagnosisDetailVn: {17}{26}- Treatment: {18}{26}- TreatmentVn: {19}{26}- ReviewPlan: {20}{26}- ReviewPlanVn: {21}{26}- CreateDate: {22}{26}- CreateUser: {23}{26}- UpdateDate: {24}{26}- UpdateUser: {25}{26}{28}", 
				this.MedId,
				this.PatientCode,
				this.Tid,
				(this.OnsetDate == null) ? string.Empty : this.OnsetDate.ToString(),
				(this.FirstConsultDate == null) ? string.Empty : this.FirstConsultDate.ToString(),
				(this.DeceaseHistory == null) ? string.Empty : this.DeceaseHistory.ToString(),
				(this.DeceaseHistoryVn == null) ? string.Empty : this.DeceaseHistoryVn.ToString(),
				(this.Symptoms == null) ? string.Empty : this.Symptoms.ToString(),
				(this.SymptomsVn == null) ? string.Empty : this.SymptomsVn.ToString(),
				(this.PastMedHistory == null) ? string.Empty : this.PastMedHistory.ToString(),
				(this.PastMedHistoryVn == null) ? string.Empty : this.PastMedHistoryVn.ToString(),
				(this.CurrentMedications == null) ? string.Empty : this.CurrentMedications.ToString(),
				(this.PhysicalExam == null) ? string.Empty : this.PhysicalExam.ToString(),
				(this.PhysicalExamVn == null) ? string.Empty : this.PhysicalExamVn.ToString(),
				(this.Investigations == null) ? string.Empty : this.Investigations.ToString(),
				(this.InvestigationsVn == null) ? string.Empty : this.InvestigationsVn.ToString(),
				(this.DiagnosisDetail == null) ? string.Empty : this.DiagnosisDetail.ToString(),
				(this.DiagnosisDetailVn == null) ? string.Empty : this.DiagnosisDetailVn.ToString(),
				(this.Treatment == null) ? string.Empty : this.Treatment.ToString(),
				(this.TreatmentVn == null) ? string.Empty : this.TreatmentVn.ToString(),
				(this.ReviewPlan == null) ? string.Empty : this.ReviewPlan.ToString(),
				(this.ReviewPlanVn == null) ? string.Empty : this.ReviewPlanVn.ToString(),
				(this.CreateDate == null) ? string.Empty : this.CreateDate.ToString(),
				(this.CreateUser == null) ? string.Empty : this.CreateUser.ToString(),
				(this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString(),
				(this.UpdateUser == null) ? string.Empty : this.UpdateUser.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'MedReport' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class MedReportEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MedId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "MedReport"</remarks>
		public System.Int64 MedId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// PatientCode : 
		/// </summary>
		public System.String PatientCode = string.Empty;
		
		/// <summary>
		/// TID : 
		/// </summary>
		public System.String Tid = string.Empty;
		
		/// <summary>
		/// OnsetDate : 
		/// </summary>
		public System.DateTime? OnsetDate = null;
		
		/// <summary>
		/// FirstConsultDate : 
		/// </summary>
		public System.DateTime? FirstConsultDate = null;
		
		/// <summary>
		/// DeceaseHistory : 
		/// </summary>
		public System.String DeceaseHistory = null;
		
		/// <summary>
		/// DeceaseHistoryVN : 
		/// </summary>
		public System.String DeceaseHistoryVn = null;
		
		/// <summary>
		/// Symptoms : 
		/// </summary>
		public System.String Symptoms = null;
		
		/// <summary>
		/// SymptomsVN : 
		/// </summary>
		public System.String SymptomsVn = null;
		
		/// <summary>
		/// PastMedHistory : 
		/// </summary>
		public System.String PastMedHistory = null;
		
		/// <summary>
		/// PastMedHistoryVN : 
		/// </summary>
		public System.String PastMedHistoryVn = null;
		
		/// <summary>
		/// CurrentMedications : 
		/// </summary>
		public System.String CurrentMedications = null;
		
		/// <summary>
		/// PhysicalExam : 
		/// </summary>
		public System.String PhysicalExam = null;
		
		/// <summary>
		/// PhysicalExamVN : 
		/// </summary>
		public System.String PhysicalExamVn = null;
		
		/// <summary>
		/// Investigations : 
		/// </summary>
		public System.String Investigations = null;
		
		/// <summary>
		/// InvestigationsVN : 
		/// </summary>
		public System.String InvestigationsVn = null;
		
		/// <summary>
		/// DiagnosisDetail : 
		/// </summary>
		public System.String DiagnosisDetail = null;
		
		/// <summary>
		/// DiagnosisDetailVN : 
		/// </summary>
		public System.String DiagnosisDetailVn = null;
		
		/// <summary>
		/// Treatment : 
		/// </summary>
		public System.String Treatment = null;
		
		/// <summary>
		/// TreatmentVN : 
		/// </summary>
		public System.String TreatmentVn = null;
		
		/// <summary>
		/// ReviewPlan : 
		/// </summary>
		public System.String ReviewPlan = null;
		
		/// <summary>
		/// ReviewPlanVN : 
		/// </summary>
		public System.String ReviewPlanVn = null;
		
		/// <summary>
		/// CreateDate : 
		/// </summary>
		public System.DateTime? CreateDate = null;
		
		/// <summary>
		/// CreateUser : 
		/// </summary>
		public System.String CreateUser = null;
		
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		public System.DateTime? UpdateDate = null;
		
		/// <summary>
		/// UpdateUser : 
		/// </summary>
		public System.String UpdateUser = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			MedReportEntityData _tmp = new MedReportEntityData();
						
			_tmp.MedId = this.MedId;
			
			_tmp.PatientCode = this.PatientCode;
			_tmp.Tid = this.Tid;
			_tmp.OnsetDate = this.OnsetDate;
			_tmp.FirstConsultDate = this.FirstConsultDate;
			_tmp.DeceaseHistory = this.DeceaseHistory;
			_tmp.DeceaseHistoryVn = this.DeceaseHistoryVn;
			_tmp.Symptoms = this.Symptoms;
			_tmp.SymptomsVn = this.SymptomsVn;
			_tmp.PastMedHistory = this.PastMedHistory;
			_tmp.PastMedHistoryVn = this.PastMedHistoryVn;
			_tmp.CurrentMedications = this.CurrentMedications;
			_tmp.PhysicalExam = this.PhysicalExam;
			_tmp.PhysicalExamVn = this.PhysicalExamVn;
			_tmp.Investigations = this.Investigations;
			_tmp.InvestigationsVn = this.InvestigationsVn;
			_tmp.DiagnosisDetail = this.DiagnosisDetail;
			_tmp.DiagnosisDetailVn = this.DiagnosisDetailVn;
			_tmp.Treatment = this.Treatment;
			_tmp.TreatmentVn = this.TreatmentVn;
			_tmp.ReviewPlan = this.ReviewPlan;
			_tmp.ReviewPlanVn = this.ReviewPlanVn;
			_tmp.CreateDate = this.CreateDate;
			_tmp.CreateUser = this.CreateUser;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.UpdateUser = this.UpdateUser;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			MedReportEntityData _tmp = new MedReportEntityData();
						
			_tmp.MedId = this.MedId;
			
			_tmp.PatientCode = this.PatientCode;
			_tmp.Tid = this.Tid;
			_tmp.OnsetDate = this.OnsetDate;
			_tmp.FirstConsultDate = this.FirstConsultDate;
			_tmp.DeceaseHistory = this.DeceaseHistory;
			_tmp.DeceaseHistoryVn = this.DeceaseHistoryVn;
			_tmp.Symptoms = this.Symptoms;
			_tmp.SymptomsVn = this.SymptomsVn;
			_tmp.PastMedHistory = this.PastMedHistory;
			_tmp.PastMedHistoryVn = this.PastMedHistoryVn;
			_tmp.CurrentMedications = this.CurrentMedications;
			_tmp.PhysicalExam = this.PhysicalExam;
			_tmp.PhysicalExamVn = this.PhysicalExamVn;
			_tmp.Investigations = this.Investigations;
			_tmp.InvestigationsVn = this.InvestigationsVn;
			_tmp.DiagnosisDetail = this.DiagnosisDetail;
			_tmp.DiagnosisDetailVn = this.DiagnosisDetailVn;
			_tmp.Treatment = this.Treatment;
			_tmp.TreatmentVn = this.TreatmentVn;
			_tmp.ReviewPlan = this.ReviewPlan;
			_tmp.ReviewPlanVn = this.ReviewPlanVn;
			_tmp.CreateDate = this.CreateDate;
			_tmp.CreateUser = this.CreateUser;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.UpdateUser = this.UpdateUser;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MedReportColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(MedReportColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MedReportColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(MedReportColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MedReportColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(MedReportColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				MedReportEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new MedReportEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MedReportColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(MedReportColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				MedReportEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new MedReportEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region MedReportEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="MedReport"/> object.
	/// </remarks>
	public class MedReportEventArgs : System.EventArgs
	{
		private MedReportColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the MedReportEventArgs class.
		///</summary>
		public MedReportEventArgs(MedReportColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the MedReportEventArgs class.
		///</summary>
		public MedReportEventArgs(MedReportColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The MedReportColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="MedReportColumn" />
		public MedReportColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all MedReport related events.
	///</summary>
	public delegate void MedReportEventHandler(object sender, MedReportEventArgs e);
	
	#region MedReportComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class MedReportComparer : System.Collections.Generic.IComparer<MedReport>
	{
		MedReportColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:MedReportComparer"/> class.
        /// </summary>
		public MedReportComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:MedReportComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public MedReportComparer(MedReportColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="MedReport"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="MedReport"/> to compare.</param>
        /// <param name="b">The second <c>MedReport</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(MedReport a, MedReport b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(MedReport entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(MedReport a, MedReport b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public MedReportColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region MedReportKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="MedReport"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class MedReportKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the MedReportKey class.
		/// </summary>
		public MedReportKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the MedReportKey class.
		/// </summary>
		public MedReportKey(MedReportBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MedId = entity.MedId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the MedReportKey class.
		/// </summary>
		public MedReportKey(System.Int64 _medId)
		{
			#region Init Properties

			this.MedId = _medId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private MedReportBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public MedReportBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MedId property
		private System.Int64 _medId;
		
		/// <summary>
		/// Gets or sets the MedId property.
		/// </summary>
		public System.Int64 MedId
		{
			get { return _medId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MedId = value;
				
				_medId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MedId = ( values["MedId"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["MedId"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MedId", MedId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MedId: {0}{1}",
								MedId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region MedReportColumn Enum
	
	/// <summary>
	/// Enumerate the MedReport columns.
	/// </summary>
	[Serializable]
	public enum MedReportColumn : int
	{
		/// <summary>
		/// MedId : 
		/// </summary>
		[EnumTextValue("Med Id")]
		[ColumnEnum("MedId", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		MedId = 1,
		/// <summary>
		/// PatientCode : 
		/// </summary>
		[EnumTextValue("Patient Code")]
		[ColumnEnum("PatientCode", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		PatientCode = 2,
		/// <summary>
		/// Tid : 
		/// </summary>
		[EnumTextValue("Tid")]
		[ColumnEnum("TID", typeof(System.String), System.Data.DbType.String, false, false, false, 15)]
		Tid = 3,
		/// <summary>
		/// OnsetDate : 
		/// </summary>
		[EnumTextValue("Onset Date")]
		[ColumnEnum("OnsetDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		OnsetDate = 4,
		/// <summary>
		/// FirstConsultDate : 
		/// </summary>
		[EnumTextValue("First Consult Date")]
		[ColumnEnum("FirstConsultDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		FirstConsultDate = 5,
		/// <summary>
		/// DeceaseHistory : 
		/// </summary>
		[EnumTextValue("Decease History")]
		[ColumnEnum("DeceaseHistory", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		DeceaseHistory = 6,
		/// <summary>
		/// DeceaseHistoryVn : 
		/// </summary>
		[EnumTextValue("Decease History Vn")]
		[ColumnEnum("DeceaseHistoryVN", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		DeceaseHistoryVn = 7,
		/// <summary>
		/// Symptoms : 
		/// </summary>
		[EnumTextValue("Symptoms")]
		[ColumnEnum("Symptoms", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		Symptoms = 8,
		/// <summary>
		/// SymptomsVn : 
		/// </summary>
		[EnumTextValue("Symptoms Vn")]
		[ColumnEnum("SymptomsVN", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		SymptomsVn = 9,
		/// <summary>
		/// PastMedHistory : 
		/// </summary>
		[EnumTextValue("Past Med History")]
		[ColumnEnum("PastMedHistory", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		PastMedHistory = 10,
		/// <summary>
		/// PastMedHistoryVn : 
		/// </summary>
		[EnumTextValue("Past Med History Vn")]
		[ColumnEnum("PastMedHistoryVN", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		PastMedHistoryVn = 11,
		/// <summary>
		/// CurrentMedications : 
		/// </summary>
		[EnumTextValue("Current Medications")]
		[ColumnEnum("CurrentMedications", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		CurrentMedications = 12,
		/// <summary>
		/// PhysicalExam : 
		/// </summary>
		[EnumTextValue("Physical Exam")]
		[ColumnEnum("PhysicalExam", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		PhysicalExam = 13,
		/// <summary>
		/// PhysicalExamVn : 
		/// </summary>
		[EnumTextValue("Physical Exam Vn")]
		[ColumnEnum("PhysicalExamVN", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		PhysicalExamVn = 14,
		/// <summary>
		/// Investigations : 
		/// </summary>
		[EnumTextValue("Investigations")]
		[ColumnEnum("Investigations", typeof(System.String), System.Data.DbType.String, false, false, true, 1000)]
		Investigations = 15,
		/// <summary>
		/// InvestigationsVn : 
		/// </summary>
		[EnumTextValue("Investigations Vn")]
		[ColumnEnum("InvestigationsVN", typeof(System.String), System.Data.DbType.String, false, false, true, 1000)]
		InvestigationsVn = 16,
		/// <summary>
		/// DiagnosisDetail : 
		/// </summary>
		[EnumTextValue("Diagnosis Detail")]
		[ColumnEnum("DiagnosisDetail", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		DiagnosisDetail = 17,
		/// <summary>
		/// DiagnosisDetailVn : 
		/// </summary>
		[EnumTextValue("Diagnosis Detail Vn")]
		[ColumnEnum("DiagnosisDetailVN", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		DiagnosisDetailVn = 18,
		/// <summary>
		/// Treatment : 
		/// </summary>
		[EnumTextValue("Treatment")]
		[ColumnEnum("Treatment", typeof(System.String), System.Data.DbType.String, false, false, true, 1000)]
		Treatment = 19,
		/// <summary>
		/// TreatmentVn : 
		/// </summary>
		[EnumTextValue("Treatment Vn")]
		[ColumnEnum("TreatmentVN", typeof(System.String), System.Data.DbType.String, false, false, true, 1000)]
		TreatmentVn = 20,
		/// <summary>
		/// ReviewPlan : 
		/// </summary>
		[EnumTextValue("Review Plan")]
		[ColumnEnum("ReviewPlan", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		ReviewPlan = 21,
		/// <summary>
		/// ReviewPlanVn : 
		/// </summary>
		[EnumTextValue("Review Plan Vn")]
		[ColumnEnum("ReviewPlanVN", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		ReviewPlanVn = 22,
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[EnumTextValue("Create Date")]
		[ColumnEnum("CreateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreateDate = 23,
		/// <summary>
		/// CreateUser : 
		/// </summary>
		[EnumTextValue("Create User")]
		[ColumnEnum("CreateUser", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		CreateUser = 24,
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		[EnumTextValue("Update Date")]
		[ColumnEnum("UpdateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdateDate = 25,
		/// <summary>
		/// UpdateUser : 
		/// </summary>
		[EnumTextValue("Update User")]
		[ColumnEnum("UpdateUser", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		UpdateUser = 26
	}//End enum

	#endregion MedReportColumn Enum

} // end namespace
