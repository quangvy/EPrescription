
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Package.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using ePrescription.Entities.Validation;
#endregion

namespace ePrescription.Entities
{
	///<summary>
	/// An object representation of the 'Package' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class PackageBase : EntityBase, IPackage, IEntityId<PackageKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private PackageEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private PackageEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private PackageEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Package> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PackageEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PackageEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="PackageBase"/> instance.
		///</summary>
		public PackageBase()
		{
			this.entityData = new PackageEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="PackageBase"/> instance.
		///</summary>
		///<param name="_packageId"></param>
		///<param name="_name"></param>
		///<param name="_description"></param>
		///<param name="_sellPrice"></param>
		///<param name="_costPrice"></param>
		///<param name="_createdBy"></param>
		///<param name="_createdDate"></param>
		public PackageBase(System.String _packageId, System.String _name, System.String _description, 
			System.Decimal? _sellPrice, System.Decimal? _costPrice, System.String _createdBy, System.DateTime? _createdDate)
		{
			this.entityData = new PackageEntityData();
			this.backupData = null;

			this.PackageId = _packageId;
			this.Name = _name;
			this.Description = _description;
			this.SellPrice = _sellPrice;
			this.CostPrice = _costPrice;
			this.CreatedBy = _createdBy;
			this.CreatedDate = _createdDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Package"/> instance.
		///</summary>
		///<param name="_packageId"></param>
		///<param name="_name"></param>
		///<param name="_description"></param>
		///<param name="_sellPrice"></param>
		///<param name="_costPrice"></param>
		///<param name="_createdBy"></param>
		///<param name="_createdDate"></param>
		public static Package CreatePackage(System.String _packageId, System.String _name, System.String _description, 
			System.Decimal? _sellPrice, System.Decimal? _costPrice, System.String _createdBy, System.DateTime? _createdDate)
		{
			Package newPackage = new Package();
			newPackage.PackageId = _packageId;
			newPackage.Name = _name;
			newPackage.Description = _description;
			newPackage.SellPrice = _sellPrice;
			newPackage.CostPrice = _costPrice;
			newPackage.CreatedBy = _createdBy;
			newPackage.CreatedDate = _createdDate;
			return newPackage;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the PackageId property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "PackageId is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 10)]
		public virtual System.String PackageId
		{
			get
			{
				return this.entityData.PackageId; 
			}
			
			set
			{
				if (this.entityData.PackageId == value)
					return;
				
                OnPropertyChanging("PackageId");                    
				OnColumnChanging(PackageColumn.PackageId, this.entityData.PackageId);
				this.entityData.PackageId = value;
				this.EntityId.PackageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PackageColumn.PackageId, this.entityData.PackageId);
				OnPropertyChanged("PackageId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the PackageID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the PackageID property.</remarks>
		/// <value>This type is nvarchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalPackageId
		{
			get { return this.entityData.OriginalPackageId; }
			set { this.entityData.OriginalPackageId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "Name is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 15)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
				
                OnPropertyChanging("Name");                    
				OnColumnChanging(PackageColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PackageColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
				
                OnPropertyChanging("Description");                    
				OnColumnChanging(PackageColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PackageColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SellPrice property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SellPrice
		{
			get
			{
				return this.entityData.SellPrice; 
			}
			
			set
			{
				if (this.entityData.SellPrice == value)
					return;
				
                OnPropertyChanging("SellPrice");                    
				OnColumnChanging(PackageColumn.SellPrice, this.entityData.SellPrice);
				this.entityData.SellPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PackageColumn.SellPrice, this.entityData.SellPrice);
				OnPropertyChanged("SellPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CostPrice property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CostPrice
		{
			get
			{
				return this.entityData.CostPrice; 
			}
			
			set
			{
				if (this.entityData.CostPrice == value)
					return;
				
                OnPropertyChanging("CostPrice");                    
				OnColumnChanging(PackageColumn.CostPrice, this.entityData.CostPrice);
				this.entityData.CostPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PackageColumn.CostPrice, this.entityData.CostPrice);
				OnPropertyChanged("CostPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedBy property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String CreatedBy
		{
			get
			{
				return this.entityData.CreatedBy; 
			}
			
			set
			{
				if (this.entityData.CreatedBy == value)
					return;
				
                OnPropertyChanging("CreatedBy");                    
				OnColumnChanging(PackageColumn.CreatedBy, this.entityData.CreatedBy);
				this.entityData.CreatedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PackageColumn.CreatedBy, this.entityData.CreatedBy);
				OnPropertyChanged("CreatedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
				
                OnPropertyChanging("CreatedDate");                    
				OnColumnChanging(PackageColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PackageColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of PackageDetail objects
		///	which are related to this object through the relation PK_PackageDetail_Package
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PackageDetail> PackageDetailCollection
		{
			get { return entityData.PackageDetailCollection; }
			set { entityData.PackageDetailCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("PackageId", "Package Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PackageId", "Package Id", 10));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Name", "Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Name", "Name", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Description", "Description", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CreatedBy", "Created By", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Package"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"PackageID", "Name", "Description", "SellPrice", "CostPrice", "CreatedBy", "CreatedDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as PackageEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Package) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Package>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Package);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Package Entity 
		///</summary>
		protected virtual Package Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Package copy = new Package();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.PackageId = this.PackageId;
					copy.OriginalPackageId = this.OriginalPackageId;
				copy.Name = this.Name;
				copy.Description = this.Description;
				copy.SellPrice = this.SellPrice;
				copy.CostPrice = this.CostPrice;
				copy.CreatedBy = this.CreatedBy;
				copy.CreatedDate = this.CreatedDate;
			
		
			//deep copy nested objects
			copy.PackageDetailCollection = (TList<PackageDetail>) MakeCopyOf(this.PackageDetailCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Package Entity 
		///</summary>
		public virtual Package Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Package Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Package DeepCopy()
		{
			return EntityHelper.Clone<Package>(this as Package);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as PackageEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new PackageEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as PackageEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(PackageColumn column)
		{
			switch(column)
			{
					case PackageColumn.PackageId:
					return entityData.PackageId != _originalData.PackageId;
					case PackageColumn.Name:
					return entityData.Name != _originalData.Name;
					case PackageColumn.Description:
					return entityData.Description != _originalData.Description;
					case PackageColumn.SellPrice:
					return entityData.SellPrice != _originalData.SellPrice;
					case PackageColumn.CostPrice:
					return entityData.CostPrice != _originalData.CostPrice;
					case PackageColumn.CreatedBy:
					return entityData.CreatedBy != _originalData.CreatedBy;
					case PackageColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< PackageColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.PackageId != _originalData.PackageId;
			result = result || entityData.Name != _originalData.Name;
			result = result || entityData.Description != _originalData.Description;
			result = result || entityData.SellPrice != _originalData.SellPrice;
			result = result || entityData.CostPrice != _originalData.CostPrice;
			result = result || entityData.CreatedBy != _originalData.CreatedBy;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			return result;
		}	
		
		///<summary>
		///  Returns a Package Entity with the original data.
		///</summary>
		public Package GetOriginalEntity()
		{
			if (_originalData != null)
				return CreatePackage(
				_originalData.PackageId,
				_originalData.Name,
				_originalData.Description,
				_originalData.SellPrice,
				_originalData.CostPrice,
				_originalData.CreatedBy,
				_originalData.CreatedDate
				);
				
			return (Package)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="PackageBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is PackageBase)
				return ValueEquals(this, (PackageBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="PackageBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.PackageId.GetHashCode() ^ 
					this.Name.GetHashCode() ^ 
					((this.Description == null) ? string.Empty : this.Description.ToString()).GetHashCode() ^ 
					((this.SellPrice == null) ? string.Empty : this.SellPrice.ToString()).GetHashCode() ^ 
					((this.CostPrice == null) ? string.Empty : this.CostPrice.ToString()).GetHashCode() ^ 
					((this.CreatedBy == null) ? string.Empty : this.CreatedBy.ToString()).GetHashCode() ^ 
					((this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="PackageBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(PackageBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="PackageBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="PackageBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="PackageBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(PackageBase Object1, PackageBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.PackageId != Object2.PackageId)
				equal = false;
			if (Object1.Name != Object2.Name)
				equal = false;
			if ( Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object2.Description == null )
			{
				equal = false;
			}
			if ( Object1.SellPrice != null && Object2.SellPrice != null )
			{
				if (Object1.SellPrice != Object2.SellPrice)
					equal = false;
			}
			else if (Object1.SellPrice == null ^ Object2.SellPrice == null )
			{
				equal = false;
			}
			if ( Object1.CostPrice != null && Object2.CostPrice != null )
			{
				if (Object1.CostPrice != Object2.CostPrice)
					equal = false;
			}
			else if (Object1.CostPrice == null ^ Object2.CostPrice == null )
			{
				equal = false;
			}
			if ( Object1.CreatedBy != null && Object2.CreatedBy != null )
			{
				if (Object1.CreatedBy != Object2.CreatedBy)
					equal = false;
			}
			else if (Object1.CreatedBy == null ^ Object2.CreatedBy == null )
			{
				equal = false;
			}
			if ( Object1.CreatedDate != null && Object2.CreatedDate != null )
			{
				if (Object1.CreatedDate != Object2.CreatedDate)
					equal = false;
			}
			else if (Object1.CreatedDate == null ^ Object2.CreatedDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((PackageBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static PackageComparer GetComparer()
        {
            return new PackageComparer();
        }
        */

        // Comparer delegates back to Package
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Package rhs, PackageColumn which)
        {
            switch (which)
            {
            	
            	
            	case PackageColumn.PackageId:
            		return this.PackageId.CompareTo(rhs.PackageId);
            		
            		                 
            	
            	
            	case PackageColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case PackageColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case PackageColumn.SellPrice:
            		return this.SellPrice.Value.CompareTo(rhs.SellPrice.Value);
            		
            		                 
            	
            	
            	case PackageColumn.CostPrice:
            		return this.CostPrice.Value.CompareTo(rhs.CostPrice.Value);
            		
            		                 
            	
            	
            	case PackageColumn.CreatedBy:
            		return this.CreatedBy.CompareTo(rhs.CreatedBy);
            		
            		                 
            	
            	
            	case PackageColumn.CreatedDate:
            		return this.CreatedDate.Value.CompareTo(rhs.CreatedDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<PackageKey> Members
		
		// member variable for the EntityId property
		private PackageKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual PackageKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new PackageKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Package")
					.Append("|").Append( this.PackageId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- PackageId: {0}{7}- Name: {1}{7}- Description: {2}{7}- SellPrice: {3}{7}- CostPrice: {4}{7}- CreatedBy: {5}{7}- CreatedDate: {6}{7}{9}", 
				this.PackageId,
				this.Name,
				(this.Description == null) ? string.Empty : this.Description.ToString(),
				(this.SellPrice == null) ? string.Empty : this.SellPrice.ToString(),
				(this.CostPrice == null) ? string.Empty : this.CostPrice.ToString(),
				(this.CreatedBy == null) ? string.Empty : this.CreatedBy.ToString(),
				(this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Package' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class PackageEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// PackageID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Package"</remarks>
		public System.String PackageId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalPackageId;
		
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String Name = string.Empty;
		
		/// <summary>
		/// Description : 
		/// </summary>
		public System.String Description = null;
		
		/// <summary>
		/// SellPrice : 
		/// </summary>
		public System.Decimal? SellPrice = null;
		
		/// <summary>
		/// CostPrice : 
		/// </summary>
		public System.Decimal? CostPrice = null;
		
		/// <summary>
		/// CreatedBy : 
		/// </summary>
		public System.String CreatedBy = null;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		public System.DateTime? CreatedDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region PackageDetailCollection
		
		private TList<PackageDetail> _packageDetailPackageId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _packageDetailPackageId
		/// </summary>
		
		public TList<PackageDetail> PackageDetailCollection
		{
			get
			{
				if (_packageDetailPackageId == null)
				{
				_packageDetailPackageId = new TList<PackageDetail>();
				}
	
				return _packageDetailPackageId;
			}
			set { _packageDetailPackageId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			PackageEntityData _tmp = new PackageEntityData();
						
			_tmp.PackageId = this.PackageId;
			_tmp.OriginalPackageId = this.OriginalPackageId;
			
			_tmp.Name = this.Name;
			_tmp.Description = this.Description;
			_tmp.SellPrice = this.SellPrice;
			_tmp.CostPrice = this.CostPrice;
			_tmp.CreatedBy = this.CreatedBy;
			_tmp.CreatedDate = this.CreatedDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._packageDetailPackageId != null)
				_tmp.PackageDetailCollection = (TList<PackageDetail>) MakeCopyOf(this.PackageDetailCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			PackageEntityData _tmp = new PackageEntityData();
						
			_tmp.PackageId = this.PackageId;
			_tmp.OriginalPackageId = this.OriginalPackageId;
			
			_tmp.Name = this.Name;
			_tmp.Description = this.Description;
			_tmp.SellPrice = this.SellPrice;
			_tmp.CostPrice = this.CostPrice;
			_tmp.CreatedBy = this.CreatedBy;
			_tmp.CreatedDate = this.CreatedDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.PackageDetailCollection = (TList<PackageDetail>) MakeCopyOf(this.PackageDetailCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PackageColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(PackageColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PackageColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(PackageColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PackageColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(PackageColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				PackageEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new PackageEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PackageColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(PackageColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				PackageEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new PackageEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region PackageEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Package"/> object.
	/// </remarks>
	public class PackageEventArgs : System.EventArgs
	{
		private PackageColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the PackageEventArgs class.
		///</summary>
		public PackageEventArgs(PackageColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the PackageEventArgs class.
		///</summary>
		public PackageEventArgs(PackageColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The PackageColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="PackageColumn" />
		public PackageColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Package related events.
	///</summary>
	public delegate void PackageEventHandler(object sender, PackageEventArgs e);
	
	#region PackageComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class PackageComparer : System.Collections.Generic.IComparer<Package>
	{
		PackageColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:PackageComparer"/> class.
        /// </summary>
		public PackageComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:PackageComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public PackageComparer(PackageColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Package"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Package"/> to compare.</param>
        /// <param name="b">The second <c>Package</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Package a, Package b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Package entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Package a, Package b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public PackageColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region PackageKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Package"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class PackageKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the PackageKey class.
		/// </summary>
		public PackageKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the PackageKey class.
		/// </summary>
		public PackageKey(PackageBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.PackageId = entity.PackageId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the PackageKey class.
		/// </summary>
		public PackageKey(System.String _packageId)
		{
			#region Init Properties

			this.PackageId = _packageId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private PackageBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public PackageBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the PackageId property
		private System.String _packageId;
		
		/// <summary>
		/// Gets or sets the PackageId property.
		/// </summary>
		public System.String PackageId
		{
			get { return _packageId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.PackageId = value;
				
				_packageId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				PackageId = ( values["PackageId"] != null ) ? (System.String) EntityUtil.ChangeType(values["PackageId"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("PackageId", PackageId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("PackageId: {0}{1}",
								PackageId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region PackageColumn Enum
	
	/// <summary>
	/// Enumerate the Package columns.
	/// </summary>
	[Serializable]
	public enum PackageColumn : int
	{
		/// <summary>
		/// PackageId : 
		/// </summary>
		[EnumTextValue("Package Id")]
		[ColumnEnum("PackageID", typeof(System.String), System.Data.DbType.String, true, false, false, 10)]
		PackageId = 1,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 15)]
		Name = 2,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		Description = 3,
		/// <summary>
		/// SellPrice : 
		/// </summary>
		[EnumTextValue("Sell Price")]
		[ColumnEnum("SellPrice", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SellPrice = 4,
		/// <summary>
		/// CostPrice : 
		/// </summary>
		[EnumTextValue("Cost Price")]
		[ColumnEnum("CostPrice", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CostPrice = 5,
		/// <summary>
		/// CreatedBy : 
		/// </summary>
		[EnumTextValue("Created By")]
		[ColumnEnum("CreatedBy", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		CreatedBy = 6,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("Created Date")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreatedDate = 7
	}//End enum

	#endregion PackageColumn Enum

} // end namespace
