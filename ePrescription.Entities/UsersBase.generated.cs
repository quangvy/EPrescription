
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Users.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using ePrescription.Entities.Validation;
#endregion

namespace ePrescription.Entities
{
	///<summary>
	/// An object representation of the 'Users' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class UsersBase : EntityBase, IUsers, IEntityId<UsersKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private UsersEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private UsersEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private UsersEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Users> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event UsersEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event UsersEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="UsersBase"/> instance.
		///</summary>
		public UsersBase()
		{
			this.entityData = new UsersEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="UsersBase"/> instance.
		///</summary>
		///<param name="_userName"></param>
		///<param name="_password"></param>
		///<param name="_userRole"></param>
		///<param name="_fullName"></param>
		///<param name="_email"></param>
		///<param name="_displayName"></param>
		///<param name="_signature"></param>
		///<param name="_location"></param>
		///<param name="_isDisabled"></param>
		///<param name="_avatar"></param>
		///<param name="_mobilePhone"></param>
		public UsersBase(System.String _userName, System.String _password, System.String _userRole, 
			System.String _fullName, System.String _email, System.String _displayName, System.String _signature, System.String _location, 
			System.Boolean _isDisabled, System.String _avatar, System.String _mobilePhone)
		{
			this.entityData = new UsersEntityData();
			this.backupData = null;

			this.UserName = _userName;
			this.Password = _password;
			this.UserRole = _userRole;
			this.FullName = _fullName;
			this.Email = _email;
			this.DisplayName = _displayName;
			this.Signature = _signature;
			this.Location = _location;
			this.IsDisabled = _isDisabled;
			this.Avatar = _avatar;
			this.MobilePhone = _mobilePhone;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Users"/> instance.
		///</summary>
		///<param name="_userName"></param>
		///<param name="_password"></param>
		///<param name="_userRole"></param>
		///<param name="_fullName"></param>
		///<param name="_email"></param>
		///<param name="_displayName"></param>
		///<param name="_signature"></param>
		///<param name="_location"></param>
		///<param name="_isDisabled"></param>
		///<param name="_avatar"></param>
		///<param name="_mobilePhone"></param>
		public static Users CreateUsers(System.String _userName, System.String _password, System.String _userRole, 
			System.String _fullName, System.String _email, System.String _displayName, System.String _signature, System.String _location, 
			System.Boolean _isDisabled, System.String _avatar, System.String _mobilePhone)
		{
			Users newUsers = new Users();
			newUsers.UserName = _userName;
			newUsers.Password = _password;
			newUsers.UserRole = _userRole;
			newUsers.FullName = _fullName;
			newUsers.Email = _email;
			newUsers.DisplayName = _displayName;
			newUsers.Signature = _signature;
			newUsers.Location = _location;
			newUsers.IsDisabled = _isDisabled;
			newUsers.Avatar = _avatar;
			newUsers.MobilePhone = _mobilePhone;
			return newUsers;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the UserName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "UserName is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 50)]
		public virtual System.String UserName
		{
			get
			{
				return this.entityData.UserName; 
			}
			
			set
			{
				if (this.entityData.UserName == value)
					return;
				
                OnPropertyChanging("UserName");                    
				OnColumnChanging(UsersColumn.UserName, this.entityData.UserName);
				this.entityData.UserName = value;
				this.EntityId.UserName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.UserName, this.entityData.UserName);
				OnPropertyChanged("UserName");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the UserName property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the UserName property.</remarks>
		/// <value>This type is nvarchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalUserName
		{
			get { return this.entityData.OriginalUserName; }
			set { this.entityData.OriginalUserName = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the Password property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "Password is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 200)]
		public virtual System.String Password
		{
			get
			{
				return this.entityData.Password; 
			}
			
			set
			{
				if (this.entityData.Password == value)
					return;
				
                OnPropertyChanging("Password");                    
				OnColumnChanging(UsersColumn.Password, this.entityData.Password);
				this.entityData.Password = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.Password, this.entityData.Password);
				OnPropertyChanged("Password");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserRole property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "UserRole is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String UserRole
		{
			get
			{
				return this.entityData.UserRole; 
			}
			
			set
			{
				if (this.entityData.UserRole == value)
					return;
				
                OnPropertyChanging("UserRole");                    
				OnColumnChanging(UsersColumn.UserRole, this.entityData.UserRole);
				this.entityData.UserRole = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.UserRole, this.entityData.UserRole);
				OnPropertyChanged("UserRole");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FullName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "FullName is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String FullName
		{
			get
			{
				return this.entityData.FullName; 
			}
			
			set
			{
				if (this.entityData.FullName == value)
					return;
				
                OnPropertyChanging("FullName");                    
				OnColumnChanging(UsersColumn.FullName, this.entityData.FullName);
				this.entityData.FullName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.FullName, this.entityData.FullName);
				OnPropertyChanged("FullName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "Email is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
				
                OnPropertyChanging("Email");                    
				OnColumnChanging(UsersColumn.Email, this.entityData.Email);
				this.entityData.Email = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.Email, this.entityData.Email);
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DisplayName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "DisplayName is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String DisplayName
		{
			get
			{
				return this.entityData.DisplayName; 
			}
			
			set
			{
				if (this.entityData.DisplayName == value)
					return;
				
                OnPropertyChanging("DisplayName");                    
				OnColumnChanging(UsersColumn.DisplayName, this.entityData.DisplayName);
				this.entityData.DisplayName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.DisplayName, this.entityData.DisplayName);
				OnPropertyChanged("DisplayName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Signature property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String Signature
		{
			get
			{
				return this.entityData.Signature; 
			}
			
			set
			{
				if (this.entityData.Signature == value)
					return;
				
                OnPropertyChanging("Signature");                    
				OnColumnChanging(UsersColumn.Signature, this.entityData.Signature);
				this.entityData.Signature = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.Signature, this.entityData.Signature);
				OnPropertyChanged("Signature");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Location property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String Location
		{
			get
			{
				return this.entityData.Location; 
			}
			
			set
			{
				if (this.entityData.Location == value)
					return;
				
                OnPropertyChanging("Location");                    
				OnColumnChanging(UsersColumn.Location, this.entityData.Location);
				this.entityData.Location = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.Location, this.entityData.Location);
				OnPropertyChanged("Location");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsDisabled property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "IsDisabled is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean IsDisabled
		{
			get
			{
				return this.entityData.IsDisabled; 
			}
			
			set
			{
				if (this.entityData.IsDisabled == value)
					return;
				
                OnPropertyChanging("IsDisabled");                    
				OnColumnChanging(UsersColumn.IsDisabled, this.entityData.IsDisabled);
				this.entityData.IsDisabled = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.IsDisabled, this.entityData.IsDisabled);
				OnPropertyChanged("IsDisabled");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Avatar property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String Avatar
		{
			get
			{
				return this.entityData.Avatar; 
			}
			
			set
			{
				if (this.entityData.Avatar == value)
					return;
				
                OnPropertyChanging("Avatar");                    
				OnColumnChanging(UsersColumn.Avatar, this.entityData.Avatar);
				this.entityData.Avatar = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.Avatar, this.entityData.Avatar);
				OnPropertyChanged("Avatar");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MobilePhone property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MobilePhone
		{
			get
			{
				return this.entityData.MobilePhone; 
			}
			
			set
			{
				if (this.entityData.MobilePhone == value)
					return;
				
                OnPropertyChanging("MobilePhone");                    
				OnColumnChanging(UsersColumn.MobilePhone, this.entityData.MobilePhone);
				this.entityData.MobilePhone = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UsersColumn.MobilePhone, this.entityData.MobilePhone);
				OnPropertyChanged("MobilePhone");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("UserName", "User Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UserName", "User Name", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Password", "Password"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Password", "Password", 200));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("UserRole", "User Role"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UserRole", "User Role", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("FullName", "Full Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FullName", "Full Name", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Email", "Email"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Email", "Email", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DisplayName", "Display Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DisplayName", "Display Name", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Signature", "Signature", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Location", "Location", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Avatar", "Avatar", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MobilePhone", "Mobile Phone", 20));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Users"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"UserName", "Password", "UserRole", "FullName", "Email", "DisplayName", "Signature", "Location", "IsDisabled", "Avatar", "MobilePhone"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as UsersEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Users) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Users>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Users);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Users Entity 
		///</summary>
		protected virtual Users Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Users copy = new Users();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.UserName = this.UserName;
					copy.OriginalUserName = this.OriginalUserName;
				copy.Password = this.Password;
				copy.UserRole = this.UserRole;
				copy.FullName = this.FullName;
				copy.Email = this.Email;
				copy.DisplayName = this.DisplayName;
				copy.Signature = this.Signature;
				copy.Location = this.Location;
				copy.IsDisabled = this.IsDisabled;
				copy.Avatar = this.Avatar;
				copy.MobilePhone = this.MobilePhone;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Users Entity 
		///</summary>
		public virtual Users Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Users Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Users DeepCopy()
		{
			return EntityHelper.Clone<Users>(this as Users);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as UsersEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new UsersEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as UsersEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(UsersColumn column)
		{
			switch(column)
			{
					case UsersColumn.UserName:
					return entityData.UserName != _originalData.UserName;
					case UsersColumn.Password:
					return entityData.Password != _originalData.Password;
					case UsersColumn.UserRole:
					return entityData.UserRole != _originalData.UserRole;
					case UsersColumn.FullName:
					return entityData.FullName != _originalData.FullName;
					case UsersColumn.Email:
					return entityData.Email != _originalData.Email;
					case UsersColumn.DisplayName:
					return entityData.DisplayName != _originalData.DisplayName;
					case UsersColumn.Signature:
					return entityData.Signature != _originalData.Signature;
					case UsersColumn.Location:
					return entityData.Location != _originalData.Location;
					case UsersColumn.IsDisabled:
					return entityData.IsDisabled != _originalData.IsDisabled;
					case UsersColumn.Avatar:
					return entityData.Avatar != _originalData.Avatar;
					case UsersColumn.MobilePhone:
					return entityData.MobilePhone != _originalData.MobilePhone;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< UsersColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.UserName != _originalData.UserName;
			result = result || entityData.Password != _originalData.Password;
			result = result || entityData.UserRole != _originalData.UserRole;
			result = result || entityData.FullName != _originalData.FullName;
			result = result || entityData.Email != _originalData.Email;
			result = result || entityData.DisplayName != _originalData.DisplayName;
			result = result || entityData.Signature != _originalData.Signature;
			result = result || entityData.Location != _originalData.Location;
			result = result || entityData.IsDisabled != _originalData.IsDisabled;
			result = result || entityData.Avatar != _originalData.Avatar;
			result = result || entityData.MobilePhone != _originalData.MobilePhone;
			return result;
		}	
		
		///<summary>
		///  Returns a Users Entity with the original data.
		///</summary>
		public Users GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateUsers(
				_originalData.UserName,
				_originalData.Password,
				_originalData.UserRole,
				_originalData.FullName,
				_originalData.Email,
				_originalData.DisplayName,
				_originalData.Signature,
				_originalData.Location,
				_originalData.IsDisabled,
				_originalData.Avatar,
				_originalData.MobilePhone
				);
				
			return (Users)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="UsersBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is UsersBase)
				return ValueEquals(this, (UsersBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="UsersBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.UserName.GetHashCode() ^ 
					this.Password.GetHashCode() ^ 
					this.UserRole.GetHashCode() ^ 
					this.FullName.GetHashCode() ^ 
					this.Email.GetHashCode() ^ 
					this.DisplayName.GetHashCode() ^ 
					((this.Signature == null) ? string.Empty : this.Signature.ToString()).GetHashCode() ^ 
					((this.Location == null) ? string.Empty : this.Location.ToString()).GetHashCode() ^ 
					this.IsDisabled.GetHashCode() ^ 
					((this.Avatar == null) ? string.Empty : this.Avatar.ToString()).GetHashCode() ^ 
					((this.MobilePhone == null) ? string.Empty : this.MobilePhone.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="UsersBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(UsersBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="UsersBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="UsersBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="UsersBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(UsersBase Object1, UsersBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.UserName != Object2.UserName)
				equal = false;
			if (Object1.Password != Object2.Password)
				equal = false;
			if (Object1.UserRole != Object2.UserRole)
				equal = false;
			if (Object1.FullName != Object2.FullName)
				equal = false;
			if (Object1.Email != Object2.Email)
				equal = false;
			if (Object1.DisplayName != Object2.DisplayName)
				equal = false;
			if ( Object1.Signature != null && Object2.Signature != null )
			{
				if (Object1.Signature != Object2.Signature)
					equal = false;
			}
			else if (Object1.Signature == null ^ Object2.Signature == null )
			{
				equal = false;
			}
			if ( Object1.Location != null && Object2.Location != null )
			{
				if (Object1.Location != Object2.Location)
					equal = false;
			}
			else if (Object1.Location == null ^ Object2.Location == null )
			{
				equal = false;
			}
			if (Object1.IsDisabled != Object2.IsDisabled)
				equal = false;
			if ( Object1.Avatar != null && Object2.Avatar != null )
			{
				if (Object1.Avatar != Object2.Avatar)
					equal = false;
			}
			else if (Object1.Avatar == null ^ Object2.Avatar == null )
			{
				equal = false;
			}
			if ( Object1.MobilePhone != null && Object2.MobilePhone != null )
			{
				if (Object1.MobilePhone != Object2.MobilePhone)
					equal = false;
			}
			else if (Object1.MobilePhone == null ^ Object2.MobilePhone == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((UsersBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static UsersComparer GetComparer()
        {
            return new UsersComparer();
        }
        */

        // Comparer delegates back to Users
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Users rhs, UsersColumn which)
        {
            switch (which)
            {
            	
            	
            	case UsersColumn.UserName:
            		return this.UserName.CompareTo(rhs.UserName);
            		
            		                 
            	
            	
            	case UsersColumn.Password:
            		return this.Password.CompareTo(rhs.Password);
            		
            		                 
            	
            	
            	case UsersColumn.UserRole:
            		return this.UserRole.CompareTo(rhs.UserRole);
            		
            		                 
            	
            	
            	case UsersColumn.FullName:
            		return this.FullName.CompareTo(rhs.FullName);
            		
            		                 
            	
            	
            	case UsersColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case UsersColumn.DisplayName:
            		return this.DisplayName.CompareTo(rhs.DisplayName);
            		
            		                 
            	
            	
            	case UsersColumn.Signature:
            		return this.Signature.CompareTo(rhs.Signature);
            		
            		                 
            	
            	
            	case UsersColumn.Location:
            		return this.Location.CompareTo(rhs.Location);
            		
            		                 
            	
            	
            	case UsersColumn.IsDisabled:
            		return this.IsDisabled.CompareTo(rhs.IsDisabled);
            		
            		                 
            	
            	
            	case UsersColumn.Avatar:
            		return this.Avatar.CompareTo(rhs.Avatar);
            		
            		                 
            	
            	
            	case UsersColumn.MobilePhone:
            		return this.MobilePhone.CompareTo(rhs.MobilePhone);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<UsersKey> Members
		
		// member variable for the EntityId property
		private UsersKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual UsersKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new UsersKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Users")
					.Append("|").Append( this.UserName.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- UserName: {0}{11}- Password: {1}{11}- UserRole: {2}{11}- FullName: {3}{11}- Email: {4}{11}- DisplayName: {5}{11}- Signature: {6}{11}- Location: {7}{11}- IsDisabled: {8}{11}- Avatar: {9}{11}- MobilePhone: {10}{11}{13}", 
				this.UserName,
				this.Password,
				this.UserRole,
				this.FullName,
				this.Email,
				this.DisplayName,
				(this.Signature == null) ? string.Empty : this.Signature.ToString(),
				(this.Location == null) ? string.Empty : this.Location.ToString(),
				this.IsDisabled,
				(this.Avatar == null) ? string.Empty : this.Avatar.ToString(),
				(this.MobilePhone == null) ? string.Empty : this.MobilePhone.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Users' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class UsersEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// UserName : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Users"</remarks>
		public System.String UserName;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalUserName;
		
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// Password : 
		/// </summary>
		public System.String Password = string.Empty;
		
		/// <summary>
		/// UserRole : 
		/// </summary>
		public System.String UserRole = string.Empty;
		
		/// <summary>
		/// FullName : 
		/// </summary>
		public System.String FullName = string.Empty;
		
		/// <summary>
		/// Email : 
		/// </summary>
		public System.String Email = string.Empty;
		
		/// <summary>
		/// DisplayName : 
		/// </summary>
		public System.String DisplayName = string.Empty;
		
		/// <summary>
		/// Signature : 
		/// </summary>
		public System.String Signature = null;
		
		/// <summary>
		/// Location : 
		/// </summary>
		public System.String Location = null;
		
		/// <summary>
		/// IsDisabled : 
		/// </summary>
		public System.Boolean IsDisabled = false;
		
		/// <summary>
		/// Avatar : 
		/// </summary>
		public System.String Avatar = null;
		
		/// <summary>
		/// MobilePhone : 
		/// </summary>
		public System.String MobilePhone = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			UsersEntityData _tmp = new UsersEntityData();
						
			_tmp.UserName = this.UserName;
			_tmp.OriginalUserName = this.OriginalUserName;
			
			_tmp.Password = this.Password;
			_tmp.UserRole = this.UserRole;
			_tmp.FullName = this.FullName;
			_tmp.Email = this.Email;
			_tmp.DisplayName = this.DisplayName;
			_tmp.Signature = this.Signature;
			_tmp.Location = this.Location;
			_tmp.IsDisabled = this.IsDisabled;
			_tmp.Avatar = this.Avatar;
			_tmp.MobilePhone = this.MobilePhone;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			UsersEntityData _tmp = new UsersEntityData();
						
			_tmp.UserName = this.UserName;
			_tmp.OriginalUserName = this.OriginalUserName;
			
			_tmp.Password = this.Password;
			_tmp.UserRole = this.UserRole;
			_tmp.FullName = this.FullName;
			_tmp.Email = this.Email;
			_tmp.DisplayName = this.DisplayName;
			_tmp.Signature = this.Signature;
			_tmp.Location = this.Location;
			_tmp.IsDisabled = this.IsDisabled;
			_tmp.Avatar = this.Avatar;
			_tmp.MobilePhone = this.MobilePhone;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UsersColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(UsersColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UsersColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(UsersColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UsersColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(UsersColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				UsersEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new UsersEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UsersColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(UsersColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				UsersEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new UsersEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region UsersEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Users"/> object.
	/// </remarks>
	public class UsersEventArgs : System.EventArgs
	{
		private UsersColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the UsersEventArgs class.
		///</summary>
		public UsersEventArgs(UsersColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the UsersEventArgs class.
		///</summary>
		public UsersEventArgs(UsersColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The UsersColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="UsersColumn" />
		public UsersColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Users related events.
	///</summary>
	public delegate void UsersEventHandler(object sender, UsersEventArgs e);
	
	#region UsersComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class UsersComparer : System.Collections.Generic.IComparer<Users>
	{
		UsersColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:UsersComparer"/> class.
        /// </summary>
		public UsersComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:UsersComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public UsersComparer(UsersColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Users"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Users"/> to compare.</param>
        /// <param name="b">The second <c>Users</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Users a, Users b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Users entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Users a, Users b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public UsersColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region UsersKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Users"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class UsersKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the UsersKey class.
		/// </summary>
		public UsersKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the UsersKey class.
		/// </summary>
		public UsersKey(UsersBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.UserName = entity.UserName;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the UsersKey class.
		/// </summary>
		public UsersKey(System.String _userName)
		{
			#region Init Properties

			this.UserName = _userName;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private UsersBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public UsersBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the UserName property
		private System.String _userName;
		
		/// <summary>
		/// Gets or sets the UserName property.
		/// </summary>
		public System.String UserName
		{
			get { return _userName; }
			set
			{
				if ( this.Entity != null )
					this.Entity.UserName = value;
				
				_userName = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				UserName = ( values["UserName"] != null ) ? (System.String) EntityUtil.ChangeType(values["UserName"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("UserName", UserName);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("UserName: {0}{1}",
								UserName,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region UsersColumn Enum
	
	/// <summary>
	/// Enumerate the Users columns.
	/// </summary>
	[Serializable]
	public enum UsersColumn : int
	{
		/// <summary>
		/// UserName : 
		/// </summary>
		[EnumTextValue("User Name")]
		[ColumnEnum("UserName", typeof(System.String), System.Data.DbType.String, true, false, false, 50)]
		UserName = 1,
		/// <summary>
		/// Password : 
		/// </summary>
		[EnumTextValue("Password")]
		[ColumnEnum("Password", typeof(System.String), System.Data.DbType.String, false, false, false, 200)]
		Password = 2,
		/// <summary>
		/// UserRole : 
		/// </summary>
		[EnumTextValue("User Role")]
		[ColumnEnum("UserRole", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		UserRole = 3,
		/// <summary>
		/// FullName : 
		/// </summary>
		[EnumTextValue("Full Name")]
		[ColumnEnum("FullName", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		FullName = 4,
		/// <summary>
		/// Email : 
		/// </summary>
		[EnumTextValue("Email")]
		[ColumnEnum("Email", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Email = 5,
		/// <summary>
		/// DisplayName : 
		/// </summary>
		[EnumTextValue("Display Name")]
		[ColumnEnum("DisplayName", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		DisplayName = 6,
		/// <summary>
		/// Signature : 
		/// </summary>
		[EnumTextValue("Signature")]
		[ColumnEnum("Signature", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Signature = 7,
		/// <summary>
		/// Location : 
		/// </summary>
		[EnumTextValue("Location")]
		[ColumnEnum("Location", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		Location = 8,
		/// <summary>
		/// IsDisabled : 
		/// </summary>
		[EnumTextValue("Is Disabled")]
		[ColumnEnum("IsDisabled", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		IsDisabled = 9,
		/// <summary>
		/// Avatar : 
		/// </summary>
		[EnumTextValue("Avatar")]
		[ColumnEnum("Avatar", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Avatar = 10,
		/// <summary>
		/// MobilePhone : 
		/// </summary>
		[EnumTextValue("Mobile Phone")]
		[ColumnEnum("MobilePhone", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		MobilePhone = 11
	}//End enum

	#endregion UsersColumn Enum

} // end namespace
