/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VrLabReceive.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace ePrescription.Entities
{
	///<summary>
	/// An object representation of the 'Vr_LabReceive' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VrLabReceiveBase")]
	public abstract partial class VrLabReceiveBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// Id : 
		/// </summary>
		private System.Int64		  _id = (long)0;
		
		/// <summary>
		/// TID : 
		/// </summary>
		private System.String		  _tid = null;
		
		/// <summary>
		/// ReqID : 
		/// </summary>
		private System.String		  _reqId = null;
		
		/// <summary>
		/// Code : 
		/// </summary>
		private System.String		  _code = null;
		
		/// <summary>
		/// Description : 
		/// </summary>
		private System.String		  _description = null;
		
		/// <summary>
		/// ReqDoctor : 
		/// </summary>
		private System.String		  _reqDoctor = null;
		
		/// <summary>
		/// Billable : 
		/// </summary>
		private System.Boolean?		  _billable = null;
		
		/// <summary>
		/// Sample : 
		/// </summary>
		private System.String		  _sample = null;
		
		/// <summary>
		/// ColDate : 
		/// </summary>
		private System.DateTime?		  _colDate = null;
		
		/// <summary>
		/// ColTime : 
		/// </summary>
		private System.TimeSpan?		  _colTime = null;
		
		/// <summary>
		/// ReqDate : 
		/// </summary>
		private System.DateTime?		  _reqDate = null;
		
		/// <summary>
		/// SampleType : 
		/// </summary>
		private System.String		  _sampleType = null;
		
		/// <summary>
		/// ProviderType : 
		/// </summary>
		private System.String		  _providerType = null;
		
		/// <summary>
		/// StatId : 
		/// </summary>
		private System.Int64		  _statId = (long)0;
		
		/// <summary>
		/// PatientCode : 
		/// </summary>
		private System.String		  _patientCode = string.Empty;
		
		/// <summary>
		/// FirstName : 
		/// </summary>
		private System.String		  _firstName = string.Empty;
		
		/// <summary>
		/// LastName : 
		/// </summary>
		private System.String		  _lastName = string.Empty;
		
		/// <summary>
		/// DOB : 
		/// </summary>
		private System.DateTime		  _dob = DateTime.MinValue;
		
		/// <summary>
		/// Sex : 
		/// </summary>
		private System.String		  _sex = string.Empty;
		
		/// <summary>
		/// Nationality : 
		/// </summary>
		private System.String		  _nationality = string.Empty;
		
		/// <summary>
		/// ReqStatus : 
		/// </summary>
		private System.String		  _reqStatus = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VrLabReceiveBase"/> instance.
		///</summary>
		public VrLabReceiveBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VrLabReceiveBase"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_tid"></param>
		///<param name="_reqId"></param>
		///<param name="_code"></param>
		///<param name="_description"></param>
		///<param name="_reqDoctor"></param>
		///<param name="_billable"></param>
		///<param name="_sample"></param>
		///<param name="_colDate"></param>
		///<param name="_colTime"></param>
		///<param name="_reqDate"></param>
		///<param name="_sampleType"></param>
		///<param name="_providerType"></param>
		///<param name="_statId"></param>
		///<param name="_patientCode"></param>
		///<param name="_firstName"></param>
		///<param name="_lastName"></param>
		///<param name="_dob"></param>
		///<param name="_sex"></param>
		///<param name="_nationality"></param>
		///<param name="_reqStatus"></param>
		public VrLabReceiveBase(System.Int64 _id, System.String _tid, System.String _reqId, System.String _code, System.String _description, System.String _reqDoctor, System.Boolean? _billable, System.String _sample, System.DateTime? _colDate, System.TimeSpan? _colTime, System.DateTime? _reqDate, System.String _sampleType, System.String _providerType, System.Int64 _statId, System.String _patientCode, System.String _firstName, System.String _lastName, System.DateTime _dob, System.String _sex, System.String _nationality, System.String _reqStatus)
		{
			this._id = _id;
			this._tid = _tid;
			this._reqId = _reqId;
			this._code = _code;
			this._description = _description;
			this._reqDoctor = _reqDoctor;
			this._billable = _billable;
			this._sample = _sample;
			this._colDate = _colDate;
			this._colTime = _colTime;
			this._reqDate = _reqDate;
			this._sampleType = _sampleType;
			this._providerType = _providerType;
			this._statId = _statId;
			this._patientCode = _patientCode;
			this._firstName = _firstName;
			this._lastName = _lastName;
			this._dob = _dob;
			this._sex = _sex;
			this._nationality = _nationality;
			this._reqStatus = _reqStatus;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VrLabReceive"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_tid"></param>
		///<param name="_reqId"></param>
		///<param name="_code"></param>
		///<param name="_description"></param>
		///<param name="_reqDoctor"></param>
		///<param name="_billable"></param>
		///<param name="_sample"></param>
		///<param name="_colDate"></param>
		///<param name="_colTime"></param>
		///<param name="_reqDate"></param>
		///<param name="_sampleType"></param>
		///<param name="_providerType"></param>
		///<param name="_statId"></param>
		///<param name="_patientCode"></param>
		///<param name="_firstName"></param>
		///<param name="_lastName"></param>
		///<param name="_dob"></param>
		///<param name="_sex"></param>
		///<param name="_nationality"></param>
		///<param name="_reqStatus"></param>
		public static VrLabReceive CreateVrLabReceive(System.Int64 _id, System.String _tid, System.String _reqId, System.String _code, System.String _description, System.String _reqDoctor, System.Boolean? _billable, System.String _sample, System.DateTime? _colDate, System.TimeSpan? _colTime, System.DateTime? _reqDate, System.String _sampleType, System.String _providerType, System.Int64 _statId, System.String _patientCode, System.String _firstName, System.String _lastName, System.DateTime _dob, System.String _sex, System.String _nationality, System.String _reqStatus)
		{
			VrLabReceive newVrLabReceive = new VrLabReceive();
			newVrLabReceive.Id = _id;
			newVrLabReceive.Tid = _tid;
			newVrLabReceive.ReqId = _reqId;
			newVrLabReceive.Code = _code;
			newVrLabReceive.Description = _description;
			newVrLabReceive.ReqDoctor = _reqDoctor;
			newVrLabReceive.Billable = _billable;
			newVrLabReceive.Sample = _sample;
			newVrLabReceive.ColDate = _colDate;
			newVrLabReceive.ColTime = _colTime;
			newVrLabReceive.ReqDate = _reqDate;
			newVrLabReceive.SampleType = _sampleType;
			newVrLabReceive.ProviderType = _providerType;
			newVrLabReceive.StatId = _statId;
			newVrLabReceive.PatientCode = _patientCode;
			newVrLabReceive.FirstName = _firstName;
			newVrLabReceive.LastName = _lastName;
			newVrLabReceive.Dob = _dob;
			newVrLabReceive.Sex = _sex;
			newVrLabReceive.Nationality = _nationality;
			newVrLabReceive.ReqStatus = _reqStatus;
			return newVrLabReceive;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is bigint</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int64 Id
		{
			get
			{
				return this._id; 
			}
			set
			{
				if (_id == value)
					return;
					
				this._id = value;
				this._isDirty = true;
				
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TID property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Tid
		{
			get
			{
				return this._tid; 
			}
			set
			{
				if (_tid == value)
					return;
					
				this._tid = value;
				this._isDirty = true;
				
				OnPropertyChanged("Tid");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ReqID property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ReqId
		{
			get
			{
				return this._reqId; 
			}
			set
			{
				if (_reqId == value)
					return;
					
				this._reqId = value;
				this._isDirty = true;
				
				OnPropertyChanged("ReqId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Code property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Code
		{
			get
			{
				return this._code; 
			}
			set
			{
				if (_code == value)
					return;
					
				this._code = value;
				this._isDirty = true;
				
				OnPropertyChanged("Code");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Description
		{
			get
			{
				return this._description; 
			}
			set
			{
				if (_description == value)
					return;
					
				this._description = value;
				this._isDirty = true;
				
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ReqDoctor property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ReqDoctor
		{
			get
			{
				return this._reqDoctor; 
			}
			set
			{
				if (_reqDoctor == value)
					return;
					
				this._reqDoctor = value;
				this._isDirty = true;
				
				OnPropertyChanged("ReqDoctor");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Billable property. 
		///		
		/// </summary>
		/// <value>This type is bit</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsBillableNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Boolean? Billable
		{
			get
			{
				return this._billable; 
			}
			set
			{
				if (_billable == value && Billable != null )
					return;
					
				this._billable = value;
				this._isDirty = true;
				
				OnPropertyChanged("Billable");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Sample property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Sample
		{
			get
			{
				return this._sample; 
			}
			set
			{
				if (_sample == value)
					return;
					
				this._sample = value;
				this._isDirty = true;
				
				OnPropertyChanged("Sample");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ColDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsColDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? ColDate
		{
			get
			{
				return this._colDate; 
			}
			set
			{
				if (_colDate == value && ColDate != null )
					return;
					
				this._colDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("ColDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ColTime property. 
		///		
		/// </summary>
		/// <value>This type is time</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return new TimeSpan(1,0,0,0,0). It is up to the developer
		/// to check the value of IsColTimeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.TimeSpan? ColTime
		{
			get
			{
				return this._colTime; 
			}
			set
			{
				if (_colTime == value && ColTime != null )
					return;
					
				this._colTime = value;
				this._isDirty = true;
				
				OnPropertyChanged("ColTime");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ReqDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsReqDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? ReqDate
		{
			get
			{
				return this._reqDate; 
			}
			set
			{
				if (_reqDate == value && ReqDate != null )
					return;
					
				this._reqDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("ReqDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SampleType property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SampleType
		{
			get
			{
				return this._sampleType; 
			}
			set
			{
				if (_sampleType == value)
					return;
					
				this._sampleType = value;
				this._isDirty = true;
				
				OnPropertyChanged("SampleType");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ProviderType property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ProviderType
		{
			get
			{
				return this._providerType; 
			}
			set
			{
				if (_providerType == value)
					return;
					
				this._providerType = value;
				this._isDirty = true;
				
				OnPropertyChanged("ProviderType");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the StatId property. 
		///		
		/// </summary>
		/// <value>This type is bigint</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int64 StatId
		{
			get
			{
				return this._statId; 
			}
			set
			{
				if (_statId == value)
					return;
					
				this._statId = value;
				this._isDirty = true;
				
				OnPropertyChanged("StatId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the PatientCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String PatientCode
		{
			get
			{
				return this._patientCode; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "PatientCode does not allow null values.");
				if (_patientCode == value)
					return;
					
				this._patientCode = value;
				this._isDirty = true;
				
				OnPropertyChanged("PatientCode");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FirstName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FirstName
		{
			get
			{
				return this._firstName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "FirstName does not allow null values.");
				if (_firstName == value)
					return;
					
				this._firstName = value;
				this._isDirty = true;
				
				OnPropertyChanged("FirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LastName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String LastName
		{
			get
			{
				return this._lastName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "LastName does not allow null values.");
				if (_lastName == value)
					return;
					
				this._lastName = value;
				this._isDirty = true;
				
				OnPropertyChanged("LastName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DOB property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime Dob
		{
			get
			{
				return this._dob; 
			}
			set
			{
				if (_dob == value)
					return;
					
				this._dob = value;
				this._isDirty = true;
				
				OnPropertyChanged("Dob");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Sex property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Sex
		{
			get
			{
				return this._sex; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "Sex does not allow null values.");
				if (_sex == value)
					return;
					
				this._sex = value;
				this._isDirty = true;
				
				OnPropertyChanged("Sex");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Nationality property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Nationality
		{
			get
			{
				return this._nationality; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "Nationality does not allow null values.");
				if (_nationality == value)
					return;
					
				this._nationality = value;
				this._isDirty = true;
				
				OnPropertyChanged("Nationality");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ReqStatus property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ReqStatus
		{
			get
			{
				return this._reqStatus; 
			}
			set
			{
				if (_reqStatus == value)
					return;
					
				this._reqStatus = value;
				this._isDirty = true;
				
				OnPropertyChanged("ReqStatus");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "Vr_LabReceive"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VrLabReceiveBase Entity 
		///</summary>
		public virtual VrLabReceiveBase Copy()
		{
			//shallow copy entity
			VrLabReceive copy = new VrLabReceive();
				copy.Id = this.Id;
				copy.Tid = this.Tid;
				copy.ReqId = this.ReqId;
				copy.Code = this.Code;
				copy.Description = this.Description;
				copy.ReqDoctor = this.ReqDoctor;
				copy.Billable = this.Billable;
				copy.Sample = this.Sample;
				copy.ColDate = this.ColDate;
				copy.ColTime = this.ColTime;
				copy.ReqDate = this.ReqDate;
				copy.SampleType = this.SampleType;
				copy.ProviderType = this.ProviderType;
				copy.StatId = this.StatId;
				copy.PatientCode = this.PatientCode;
				copy.FirstName = this.FirstName;
				copy.LastName = this.LastName;
				copy.Dob = this.Dob;
				copy.Sex = this.Sex;
				copy.Nationality = this.Nationality;
				copy.ReqStatus = this.ReqStatus;
			copy.AcceptChanges();
			return (VrLabReceive)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VrLabReceiveBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VrLabReceiveBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VrLabReceiveBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VrLabReceiveBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VrLabReceiveBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VrLabReceiveBase Object1, VrLabReceiveBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.Tid != null && Object2.Tid != null )
			{
				if (Object1.Tid != Object2.Tid)
					equal = false;
			}
			else if (Object1.Tid == null ^ Object1.Tid == null )
			{
				equal = false;
			}
			if (Object1.ReqId != null && Object2.ReqId != null )
			{
				if (Object1.ReqId != Object2.ReqId)
					equal = false;
			}
			else if (Object1.ReqId == null ^ Object1.ReqId == null )
			{
				equal = false;
			}
			if (Object1.Code != null && Object2.Code != null )
			{
				if (Object1.Code != Object2.Code)
					equal = false;
			}
			else if (Object1.Code == null ^ Object1.Code == null )
			{
				equal = false;
			}
			if (Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object1.Description == null )
			{
				equal = false;
			}
			if (Object1.ReqDoctor != null && Object2.ReqDoctor != null )
			{
				if (Object1.ReqDoctor != Object2.ReqDoctor)
					equal = false;
			}
			else if (Object1.ReqDoctor == null ^ Object1.ReqDoctor == null )
			{
				equal = false;
			}
			if (Object1.Billable != null && Object2.Billable != null )
			{
				if (Object1.Billable != Object2.Billable)
					equal = false;
			}
			else if (Object1.Billable == null ^ Object1.Billable == null )
			{
				equal = false;
			}
			if (Object1.Sample != null && Object2.Sample != null )
			{
				if (Object1.Sample != Object2.Sample)
					equal = false;
			}
			else if (Object1.Sample == null ^ Object1.Sample == null )
			{
				equal = false;
			}
			if (Object1.ColDate != null && Object2.ColDate != null )
			{
				if (Object1.ColDate != Object2.ColDate)
					equal = false;
			}
			else if (Object1.ColDate == null ^ Object1.ColDate == null )
			{
				equal = false;
			}
			if (Object1.ColTime != null && Object2.ColTime != null )
			{
				if (Object1.ColTime != Object2.ColTime)
					equal = false;
			}
			else if (Object1.ColTime == null ^ Object1.ColTime == null )
			{
				equal = false;
			}
			if (Object1.ReqDate != null && Object2.ReqDate != null )
			{
				if (Object1.ReqDate != Object2.ReqDate)
					equal = false;
			}
			else if (Object1.ReqDate == null ^ Object1.ReqDate == null )
			{
				equal = false;
			}
			if (Object1.SampleType != null && Object2.SampleType != null )
			{
				if (Object1.SampleType != Object2.SampleType)
					equal = false;
			}
			else if (Object1.SampleType == null ^ Object1.SampleType == null )
			{
				equal = false;
			}
			if (Object1.ProviderType != null && Object2.ProviderType != null )
			{
				if (Object1.ProviderType != Object2.ProviderType)
					equal = false;
			}
			else if (Object1.ProviderType == null ^ Object1.ProviderType == null )
			{
				equal = false;
			}
			if (Object1.StatId != Object2.StatId)
				equal = false;
			if (Object1.PatientCode != Object2.PatientCode)
				equal = false;
			if (Object1.FirstName != Object2.FirstName)
				equal = false;
			if (Object1.LastName != Object2.LastName)
				equal = false;
			if (Object1.Dob != Object2.Dob)
				equal = false;
			if (Object1.Sex != Object2.Sex)
				equal = false;
			if (Object1.Nationality != Object2.Nationality)
				equal = false;
			if (Object1.ReqStatus != null && Object2.ReqStatus != null )
			{
				if (Object1.ReqStatus != Object2.ReqStatus)
					equal = false;
			}
			else if (Object1.ReqStatus == null ^ Object1.ReqStatus == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VrLabReceive entity, string propertyName)
		{
			switch (propertyName)
			{
				case "Id":
					return entity.Id;
				case "Tid":
					return entity.Tid;
				case "ReqId":
					return entity.ReqId;
				case "Code":
					return entity.Code;
				case "Description":
					return entity.Description;
				case "ReqDoctor":
					return entity.ReqDoctor;
				case "Billable":
					return entity.Billable;
				case "Sample":
					return entity.Sample;
				case "ColDate":
					return entity.ColDate;
				case "ColTime":
					return entity.ColTime;
				case "ReqDate":
					return entity.ReqDate;
				case "SampleType":
					return entity.SampleType;
				case "ProviderType":
					return entity.ProviderType;
				case "StatId":
					return entity.StatId;
				case "PatientCode":
					return entity.PatientCode;
				case "FirstName":
					return entity.FirstName;
				case "LastName":
					return entity.LastName;
				case "Dob":
					return entity.Dob;
				case "Sex":
					return entity.Sex;
				case "Nationality":
					return entity.Nationality;
				case "ReqStatus":
					return entity.ReqStatus;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VrLabReceive, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{22}{21}- Id: {0}{21}- Tid: {1}{21}- ReqId: {2}{21}- Code: {3}{21}- Description: {4}{21}- ReqDoctor: {5}{21}- Billable: {6}{21}- Sample: {7}{21}- ColDate: {8}{21}- ColTime: {9}{21}- ReqDate: {10}{21}- SampleType: {11}{21}- ProviderType: {12}{21}- StatId: {13}{21}- PatientCode: {14}{21}- FirstName: {15}{21}- LastName: {16}{21}- Dob: {17}{21}- Sex: {18}{21}- Nationality: {19}{21}- ReqStatus: {20}{21}", 
				this.Id,
				(this.Tid == null) ? string.Empty : this.Tid.ToString(),
			     
				(this.ReqId == null) ? string.Empty : this.ReqId.ToString(),
			     
				(this.Code == null) ? string.Empty : this.Code.ToString(),
			     
				(this.Description == null) ? string.Empty : this.Description.ToString(),
			     
				(this.ReqDoctor == null) ? string.Empty : this.ReqDoctor.ToString(),
			     
				(this.Billable == null) ? string.Empty : this.Billable.ToString(),
			     
				(this.Sample == null) ? string.Empty : this.Sample.ToString(),
			     
				(this.ColDate == null) ? string.Empty : this.ColDate.ToString(),
			     
				(this.ColTime == null) ? string.Empty : this.ColTime.ToString(),
			     
				(this.ReqDate == null) ? string.Empty : this.ReqDate.ToString(),
			     
				(this.SampleType == null) ? string.Empty : this.SampleType.ToString(),
			     
				(this.ProviderType == null) ? string.Empty : this.ProviderType.ToString(),
			     
				this.StatId,
				this.PatientCode,
				this.FirstName,
				this.LastName,
				this.Dob,
				this.Sex,
				this.Nationality,
				(this.ReqStatus == null) ? string.Empty : this.ReqStatus.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VrLabReceive columns.
	/// </summary>
	[Serializable]
	public enum VrLabReceiveColumn
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("Id", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		Id,
		/// <summary>
		/// TID : 
		/// </summary>
		[EnumTextValue("TID")]
		[ColumnEnum("TID", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Tid,
		/// <summary>
		/// ReqID : 
		/// </summary>
		[EnumTextValue("ReqID")]
		[ColumnEnum("ReqID", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		ReqId,
		/// <summary>
		/// Code : 
		/// </summary>
		[EnumTextValue("Code")]
		[ColumnEnum("Code", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		Code,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Description,
		/// <summary>
		/// ReqDoctor : 
		/// </summary>
		[EnumTextValue("ReqDoctor")]
		[ColumnEnum("ReqDoctor", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		ReqDoctor,
		/// <summary>
		/// Billable : 
		/// </summary>
		[EnumTextValue("Billable")]
		[ColumnEnum("Billable", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Billable,
		/// <summary>
		/// Sample : 
		/// </summary>
		[EnumTextValue("Sample")]
		[ColumnEnum("Sample", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Sample,
		/// <summary>
		/// ColDate : 
		/// </summary>
		[EnumTextValue("ColDate")]
		[ColumnEnum("ColDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ColDate,
		/// <summary>
		/// ColTime : 
		/// </summary>
		[EnumTextValue("ColTime")]
		[ColumnEnum("ColTime", typeof(System.TimeSpan), System.Data.DbType.Time, false, false, true)]
		ColTime,
		/// <summary>
		/// ReqDate : 
		/// </summary>
		[EnumTextValue("ReqDate")]
		[ColumnEnum("ReqDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ReqDate,
		/// <summary>
		/// SampleType : 
		/// </summary>
		[EnumTextValue("SampleType")]
		[ColumnEnum("SampleType", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		SampleType,
		/// <summary>
		/// ProviderType : 
		/// </summary>
		[EnumTextValue("ProviderType")]
		[ColumnEnum("ProviderType", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		ProviderType,
		/// <summary>
		/// StatId : 
		/// </summary>
		[EnumTextValue("StatId")]
		[ColumnEnum("StatId", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		StatId,
		/// <summary>
		/// PatientCode : 
		/// </summary>
		[EnumTextValue("PatientCode")]
		[ColumnEnum("PatientCode", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		PatientCode,
		/// <summary>
		/// FirstName : 
		/// </summary>
		[EnumTextValue("FirstName")]
		[ColumnEnum("FirstName", typeof(System.String), System.Data.DbType.String, false, false, false, 30)]
		FirstName,
		/// <summary>
		/// LastName : 
		/// </summary>
		[EnumTextValue("LastName")]
		[ColumnEnum("LastName", typeof(System.String), System.Data.DbType.String, false, false, false, 30)]
		LastName,
		/// <summary>
		/// DOB : 
		/// </summary>
		[EnumTextValue("DOB")]
		[ColumnEnum("DOB", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		Dob,
		/// <summary>
		/// Sex : 
		/// </summary>
		[EnumTextValue("Sex")]
		[ColumnEnum("Sex", typeof(System.String), System.Data.DbType.String, false, false, false, 10)]
		Sex,
		/// <summary>
		/// Nationality : 
		/// </summary>
		[EnumTextValue("Nationality")]
		[ColumnEnum("Nationality", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Nationality,
		/// <summary>
		/// ReqStatus : 
		/// </summary>
		[EnumTextValue("ReqStatus")]
		[ColumnEnum("ReqStatus", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		ReqStatus
	}//End enum

} // end namespace
