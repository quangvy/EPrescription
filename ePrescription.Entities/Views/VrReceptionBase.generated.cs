/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VrReception.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace ePrescription.Entities
{
	///<summary>
	/// An object representation of the 'VR_Reception' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VrReceptionBase")]
	public abstract partial class VrReceptionBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// PatientCode : 
		/// </summary>
		private System.String		  _patientCode = null;
		
		/// <summary>
		/// TransactionId : 
		/// </summary>
		private System.String		  _transactionId = string.Empty;
		
		/// <summary>
		/// FirstName : 
		/// </summary>
		private System.String		  _firstName = null;
		
		/// <summary>
		/// LastName : 
		/// </summary>
		private System.String		  _lastName = null;
		
		/// <summary>
		/// DateOfBirth : 
		/// </summary>
		private System.DateTime?		  _dateOfBirth = null;
		
		/// <summary>
		/// Sex : 
		/// </summary>
		private System.String		  _sex = null;
		
		/// <summary>
		/// PatientStart : 
		/// </summary>
		private System.Boolean?		  _patientStart = null;
		
		/// <summary>
		/// Nationality : 
		/// </summary>
		private System.String		  _nationality = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VrReceptionBase"/> instance.
		///</summary>
		public VrReceptionBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VrReceptionBase"/> instance.
		///</summary>
		///<param name="_patientCode"></param>
		///<param name="_transactionId"></param>
		///<param name="_firstName"></param>
		///<param name="_lastName"></param>
		///<param name="_dateOfBirth"></param>
		///<param name="_sex"></param>
		///<param name="_patientStart"></param>
		///<param name="_nationality"></param>
		public VrReceptionBase(System.String _patientCode, System.String _transactionId, System.String _firstName, System.String _lastName, System.DateTime? _dateOfBirth, System.String _sex, System.Boolean? _patientStart, System.String _nationality)
		{
			this._patientCode = _patientCode;
			this._transactionId = _transactionId;
			this._firstName = _firstName;
			this._lastName = _lastName;
			this._dateOfBirth = _dateOfBirth;
			this._sex = _sex;
			this._patientStart = _patientStart;
			this._nationality = _nationality;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VrReception"/> instance.
		///</summary>
		///<param name="_patientCode"></param>
		///<param name="_transactionId"></param>
		///<param name="_firstName"></param>
		///<param name="_lastName"></param>
		///<param name="_dateOfBirth"></param>
		///<param name="_sex"></param>
		///<param name="_patientStart"></param>
		///<param name="_nationality"></param>
		public static VrReception CreateVrReception(System.String _patientCode, System.String _transactionId, System.String _firstName, System.String _lastName, System.DateTime? _dateOfBirth, System.String _sex, System.Boolean? _patientStart, System.String _nationality)
		{
			VrReception newVrReception = new VrReception();
			newVrReception.PatientCode = _patientCode;
			newVrReception.TransactionId = _transactionId;
			newVrReception.FirstName = _firstName;
			newVrReception.LastName = _lastName;
			newVrReception.DateOfBirth = _dateOfBirth;
			newVrReception.Sex = _sex;
			newVrReception.PatientStart = _patientStart;
			newVrReception.Nationality = _nationality;
			return newVrReception;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the PatientCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String PatientCode
		{
			get
			{
				return this._patientCode; 
			}
			set
			{
				if (_patientCode == value)
					return;
					
				this._patientCode = value;
				this._isDirty = true;
				
				OnPropertyChanged("PatientCode");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TransactionId property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String TransactionId
		{
			get
			{
				return this._transactionId; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "TransactionId does not allow null values.");
				if (_transactionId == value)
					return;
					
				this._transactionId = value;
				this._isDirty = true;
				
				OnPropertyChanged("TransactionId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FirstName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FirstName
		{
			get
			{
				return this._firstName; 
			}
			set
			{
				if (_firstName == value)
					return;
					
				this._firstName = value;
				this._isDirty = true;
				
				OnPropertyChanged("FirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LastName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String LastName
		{
			get
			{
				return this._lastName; 
			}
			set
			{
				if (_lastName == value)
					return;
					
				this._lastName = value;
				this._isDirty = true;
				
				OnPropertyChanged("LastName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DateOfBirth property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDateOfBirthNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? DateOfBirth
		{
			get
			{
				return this._dateOfBirth; 
			}
			set
			{
				if (_dateOfBirth == value && DateOfBirth != null )
					return;
					
				this._dateOfBirth = value;
				this._isDirty = true;
				
				OnPropertyChanged("DateOfBirth");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Sex property. 
		///		
		/// </summary>
		/// <value>This type is char</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Sex
		{
			get
			{
				return this._sex; 
			}
			set
			{
				if (_sex == value)
					return;
					
				this._sex = value;
				this._isDirty = true;
				
				OnPropertyChanged("Sex");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the PatientStart property. 
		///		
		/// </summary>
		/// <value>This type is bit</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsPatientStartNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Boolean? PatientStart
		{
			get
			{
				return this._patientStart; 
			}
			set
			{
				if (_patientStart == value && PatientStart != null )
					return;
					
				this._patientStart = value;
				this._isDirty = true;
				
				OnPropertyChanged("PatientStart");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Nationality property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Nationality
		{
			get
			{
				return this._nationality; 
			}
			set
			{
				if (_nationality == value)
					return;
					
				this._nationality = value;
				this._isDirty = true;
				
				OnPropertyChanged("Nationality");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "VR_Reception"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VrReceptionBase Entity 
		///</summary>
		public virtual VrReceptionBase Copy()
		{
			//shallow copy entity
			VrReception copy = new VrReception();
				copy.PatientCode = this.PatientCode;
				copy.TransactionId = this.TransactionId;
				copy.FirstName = this.FirstName;
				copy.LastName = this.LastName;
				copy.DateOfBirth = this.DateOfBirth;
				copy.Sex = this.Sex;
				copy.PatientStart = this.PatientStart;
				copy.Nationality = this.Nationality;
			copy.AcceptChanges();
			return (VrReception)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VrReceptionBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VrReceptionBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VrReceptionBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VrReceptionBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VrReceptionBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VrReceptionBase Object1, VrReceptionBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.PatientCode != null && Object2.PatientCode != null )
			{
				if (Object1.PatientCode != Object2.PatientCode)
					equal = false;
			}
			else if (Object1.PatientCode == null ^ Object1.PatientCode == null )
			{
				equal = false;
			}
			if (Object1.TransactionId != Object2.TransactionId)
				equal = false;
			if (Object1.FirstName != null && Object2.FirstName != null )
			{
				if (Object1.FirstName != Object2.FirstName)
					equal = false;
			}
			else if (Object1.FirstName == null ^ Object1.FirstName == null )
			{
				equal = false;
			}
			if (Object1.LastName != null && Object2.LastName != null )
			{
				if (Object1.LastName != Object2.LastName)
					equal = false;
			}
			else if (Object1.LastName == null ^ Object1.LastName == null )
			{
				equal = false;
			}
			if (Object1.DateOfBirth != null && Object2.DateOfBirth != null )
			{
				if (Object1.DateOfBirth != Object2.DateOfBirth)
					equal = false;
			}
			else if (Object1.DateOfBirth == null ^ Object1.DateOfBirth == null )
			{
				equal = false;
			}
			if (Object1.Sex != null && Object2.Sex != null )
			{
				if (Object1.Sex != Object2.Sex)
					equal = false;
			}
			else if (Object1.Sex == null ^ Object1.Sex == null )
			{
				equal = false;
			}
			if (Object1.PatientStart != null && Object2.PatientStart != null )
			{
				if (Object1.PatientStart != Object2.PatientStart)
					equal = false;
			}
			else if (Object1.PatientStart == null ^ Object1.PatientStart == null )
			{
				equal = false;
			}
			if (Object1.Nationality != null && Object2.Nationality != null )
			{
				if (Object1.Nationality != Object2.Nationality)
					equal = false;
			}
			else if (Object1.Nationality == null ^ Object1.Nationality == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VrReception entity, string propertyName)
		{
			switch (propertyName)
			{
				case "PatientCode":
					return entity.PatientCode;
				case "TransactionId":
					return entity.TransactionId;
				case "FirstName":
					return entity.FirstName;
				case "LastName":
					return entity.LastName;
				case "DateOfBirth":
					return entity.DateOfBirth;
				case "Sex":
					return entity.Sex;
				case "PatientStart":
					return entity.PatientStart;
				case "Nationality":
					return entity.Nationality;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VrReception, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{9}{8}- PatientCode: {0}{8}- TransactionId: {1}{8}- FirstName: {2}{8}- LastName: {3}{8}- DateOfBirth: {4}{8}- Sex: {5}{8}- PatientStart: {6}{8}- Nationality: {7}{8}", 
				(this.PatientCode == null) ? string.Empty : this.PatientCode.ToString(),
			     
				this.TransactionId,
				(this.FirstName == null) ? string.Empty : this.FirstName.ToString(),
			     
				(this.LastName == null) ? string.Empty : this.LastName.ToString(),
			     
				(this.DateOfBirth == null) ? string.Empty : this.DateOfBirth.ToString(),
			     
				(this.Sex == null) ? string.Empty : this.Sex.ToString(),
			     
				(this.PatientStart == null) ? string.Empty : this.PatientStart.ToString(),
			     
				(this.Nationality == null) ? string.Empty : this.Nationality.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VrReception columns.
	/// </summary>
	[Serializable]
	public enum VrReceptionColumn
	{
		/// <summary>
		/// PatientCode : 
		/// </summary>
		[EnumTextValue("PatientCode")]
		[ColumnEnum("PatientCode", typeof(System.String), System.Data.DbType.String, false, false, true, 11)]
		PatientCode,
		/// <summary>
		/// TransactionId : 
		/// </summary>
		[EnumTextValue("TransactionId")]
		[ColumnEnum("TransactionId", typeof(System.String), System.Data.DbType.String, false, false, false, 15)]
		TransactionId,
		/// <summary>
		/// FirstName : 
		/// </summary>
		[EnumTextValue("FirstName")]
		[ColumnEnum("FirstName", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		FirstName,
		/// <summary>
		/// LastName : 
		/// </summary>
		[EnumTextValue("LastName")]
		[ColumnEnum("LastName", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		LastName,
		/// <summary>
		/// DateOfBirth : 
		/// </summary>
		[EnumTextValue("DateOfBirth")]
		[ColumnEnum("DateOfBirth", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DateOfBirth,
		/// <summary>
		/// Sex : 
		/// </summary>
		[EnumTextValue("Sex")]
		[ColumnEnum("Sex", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 1)]
		Sex,
		/// <summary>
		/// PatientStart : 
		/// </summary>
		[EnumTextValue("PatientStart")]
		[ColumnEnum("PatientStart", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		PatientStart,
		/// <summary>
		/// Nationality : 
		/// </summary>
		[EnumTextValue("Nationality")]
		[ColumnEnum("Nationality", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Nationality
	}//End enum

} // end namespace
