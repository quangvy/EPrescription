
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VitalSign.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using ePrescription.Entities.Validation;
#endregion

namespace ePrescription.Entities
{
	///<summary>
	/// An object representation of the 'VitalSign' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class VitalSignBase : EntityBase, IVitalSign, IEntityId<VitalSignKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private VitalSignEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private VitalSignEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private VitalSignEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<VitalSign> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event VitalSignEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event VitalSignEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VitalSignBase"/> instance.
		///</summary>
		public VitalSignBase()
		{
			this.entityData = new VitalSignEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="VitalSignBase"/> instance.
		///</summary>
		///<param name="_patientCode"></param>
		///<param name="_tid"></param>
		///<param name="_tempurature"></param>
		///<param name="_pulse"></param>
		///<param name="_respiratory"></param>
		///<param name="_bloodPressure"></param>
		///<param name="_sato2"></param>
		///<param name="_gcs"></param>
		///<param name="_height"></param>
		///<param name="_weight"></param>
		///<param name="_createDate"></param>
		///<param name="_updateDate"></param>
		///<param name="_updateUser"></param>
		public VitalSignBase(System.String _patientCode, System.String _tid, System.String _tempurature, 
			System.String _pulse, System.String _respiratory, System.String _bloodPressure, System.String _sato2, 
			System.String _gcs, System.String _height, System.String _weight, System.DateTime? _createDate, 
			System.DateTime? _updateDate, System.String _updateUser)
		{
			this.entityData = new VitalSignEntityData();
			this.backupData = null;

			this.PatientCode = _patientCode;
			this.Tid = _tid;
			this.Tempurature = _tempurature;
			this.Pulse = _pulse;
			this.Respiratory = _respiratory;
			this.BloodPressure = _bloodPressure;
			this.Sato2 = _sato2;
			this.Gcs = _gcs;
			this.Height = _height;
			this.Weight = _weight;
			this.CreateDate = _createDate;
			this.UpdateDate = _updateDate;
			this.UpdateUser = _updateUser;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VitalSign"/> instance.
		///</summary>
		///<param name="_patientCode"></param>
		///<param name="_tid"></param>
		///<param name="_tempurature"></param>
		///<param name="_pulse"></param>
		///<param name="_respiratory"></param>
		///<param name="_bloodPressure"></param>
		///<param name="_sato2"></param>
		///<param name="_gcs"></param>
		///<param name="_height"></param>
		///<param name="_weight"></param>
		///<param name="_createDate"></param>
		///<param name="_updateDate"></param>
		///<param name="_updateUser"></param>
		public static VitalSign CreateVitalSign(System.String _patientCode, System.String _tid, System.String _tempurature, 
			System.String _pulse, System.String _respiratory, System.String _bloodPressure, System.String _sato2, 
			System.String _gcs, System.String _height, System.String _weight, System.DateTime? _createDate, 
			System.DateTime? _updateDate, System.String _updateUser)
		{
			VitalSign newVitalSign = new VitalSign();
			newVitalSign.PatientCode = _patientCode;
			newVitalSign.Tid = _tid;
			newVitalSign.Tempurature = _tempurature;
			newVitalSign.Pulse = _pulse;
			newVitalSign.Respiratory = _respiratory;
			newVitalSign.BloodPressure = _bloodPressure;
			newVitalSign.Sato2 = _sato2;
			newVitalSign.Gcs = _gcs;
			newVitalSign.Height = _height;
			newVitalSign.Weight = _weight;
			newVitalSign.CreateDate = _createDate;
			newVitalSign.UpdateDate = _updateDate;
			newVitalSign.UpdateUser = _updateUser;
			return newVitalSign;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Vid property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		[Required(ErrorMessage = "Vid is required")]




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 Vid
		{
			get
			{
				return this.entityData.Vid; 
			}
			
			set
			{
				if (this.entityData.Vid == value)
					return;
				
                OnPropertyChanging("Vid");                    
				OnColumnChanging(VitalSignColumn.Vid, this.entityData.Vid);
				this.entityData.Vid = value;
				this.EntityId.Vid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VitalSignColumn.Vid, this.entityData.Vid);
				OnPropertyChanged("Vid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PatientCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "PatientCode is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String PatientCode
		{
			get
			{
				return this.entityData.PatientCode; 
			}
			
			set
			{
				if (this.entityData.PatientCode == value)
					return;
				
                OnPropertyChanging("PatientCode");                    
				OnColumnChanging(VitalSignColumn.PatientCode, this.entityData.PatientCode);
				this.entityData.PatientCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VitalSignColumn.PatientCode, this.entityData.PatientCode);
				OnPropertyChanged("PatientCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Tid property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		[Required(ErrorMessage = "Tid is required")]




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 15)]
		public virtual System.String Tid
		{
			get
			{
				return this.entityData.Tid; 
			}
			
			set
			{
				if (this.entityData.Tid == value)
					return;
				
                OnPropertyChanging("Tid");                    
				OnColumnChanging(VitalSignColumn.Tid, this.entityData.Tid);
				this.entityData.Tid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VitalSignColumn.Tid, this.entityData.Tid);
				OnPropertyChanged("Tid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Tempurature property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String Tempurature
		{
			get
			{
				return this.entityData.Tempurature; 
			}
			
			set
			{
				if (this.entityData.Tempurature == value)
					return;
				
                OnPropertyChanging("Tempurature");                    
				OnColumnChanging(VitalSignColumn.Tempurature, this.entityData.Tempurature);
				this.entityData.Tempurature = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VitalSignColumn.Tempurature, this.entityData.Tempurature);
				OnPropertyChanged("Tempurature");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Pulse property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String Pulse
		{
			get
			{
				return this.entityData.Pulse; 
			}
			
			set
			{
				if (this.entityData.Pulse == value)
					return;
				
                OnPropertyChanging("Pulse");                    
				OnColumnChanging(VitalSignColumn.Pulse, this.entityData.Pulse);
				this.entityData.Pulse = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VitalSignColumn.Pulse, this.entityData.Pulse);
				OnPropertyChanged("Pulse");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Respiratory property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String Respiratory
		{
			get
			{
				return this.entityData.Respiratory; 
			}
			
			set
			{
				if (this.entityData.Respiratory == value)
					return;
				
                OnPropertyChanging("Respiratory");                    
				OnColumnChanging(VitalSignColumn.Respiratory, this.entityData.Respiratory);
				this.entityData.Respiratory = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VitalSignColumn.Respiratory, this.entityData.Respiratory);
				OnPropertyChanged("Respiratory");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BloodPressure property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String BloodPressure
		{
			get
			{
				return this.entityData.BloodPressure; 
			}
			
			set
			{
				if (this.entityData.BloodPressure == value)
					return;
				
                OnPropertyChanging("BloodPressure");                    
				OnColumnChanging(VitalSignColumn.BloodPressure, this.entityData.BloodPressure);
				this.entityData.BloodPressure = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VitalSignColumn.BloodPressure, this.entityData.BloodPressure);
				OnPropertyChanged("BloodPressure");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Sato2 property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String Sato2
		{
			get
			{
				return this.entityData.Sato2; 
			}
			
			set
			{
				if (this.entityData.Sato2 == value)
					return;
				
                OnPropertyChanging("Sato2");                    
				OnColumnChanging(VitalSignColumn.Sato2, this.entityData.Sato2);
				this.entityData.Sato2 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VitalSignColumn.Sato2, this.entityData.Sato2);
				OnPropertyChanged("Sato2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Gcs property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String Gcs
		{
			get
			{
				return this.entityData.Gcs; 
			}
			
			set
			{
				if (this.entityData.Gcs == value)
					return;
				
                OnPropertyChanging("Gcs");                    
				OnColumnChanging(VitalSignColumn.Gcs, this.entityData.Gcs);
				this.entityData.Gcs = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VitalSignColumn.Gcs, this.entityData.Gcs);
				OnPropertyChanged("Gcs");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Height property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String Height
		{
			get
			{
				return this.entityData.Height; 
			}
			
			set
			{
				if (this.entityData.Height == value)
					return;
				
                OnPropertyChanging("Height");                    
				OnColumnChanging(VitalSignColumn.Height, this.entityData.Height);
				this.entityData.Height = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VitalSignColumn.Height, this.entityData.Height);
				OnPropertyChanged("Height");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Weight property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String Weight
		{
			get
			{
				return this.entityData.Weight; 
			}
			
			set
			{
				if (this.entityData.Weight == value)
					return;
				
                OnPropertyChanging("Weight");                    
				OnColumnChanging(VitalSignColumn.Weight, this.entityData.Weight);
				this.entityData.Weight = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VitalSignColumn.Weight, this.entityData.Weight);
				OnPropertyChanged("Weight");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreateDate
		{
			get
			{
				return this.entityData.CreateDate; 
			}
			
			set
			{
				if (this.entityData.CreateDate == value)
					return;
				
                OnPropertyChanging("CreateDate");                    
				OnColumnChanging(VitalSignColumn.CreateDate, this.entityData.CreateDate);
				this.entityData.CreateDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VitalSignColumn.CreateDate, this.entityData.CreateDate);
				OnPropertyChanged("CreateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdateDate
		{
			get
			{
				return this.entityData.UpdateDate; 
			}
			
			set
			{
				if (this.entityData.UpdateDate == value)
					return;
				
                OnPropertyChanging("UpdateDate");                    
				OnColumnChanging(VitalSignColumn.UpdateDate, this.entityData.UpdateDate);
				this.entityData.UpdateDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VitalSignColumn.UpdateDate, this.entityData.UpdateDate);
				OnPropertyChanged("UpdateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateUser property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String UpdateUser
		{
			get
			{
				return this.entityData.UpdateUser; 
			}
			
			set
			{
				if (this.entityData.UpdateUser == value)
					return;
				
                OnPropertyChanging("UpdateUser");                    
				OnColumnChanging(VitalSignColumn.UpdateUser, this.entityData.UpdateUser);
				this.entityData.UpdateUser = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VitalSignColumn.UpdateUser, this.entityData.UpdateUser);
				OnPropertyChanged("UpdateUser");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("PatientCode", "Patient Code"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PatientCode", "Patient Code", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Tid", "Tid"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Tid", "Tid", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Tempurature", "Tempurature", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Pulse", "Pulse", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Respiratory", "Respiratory", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BloodPressure", "Blood Pressure", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Sato2", "Sato2", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Gcs", "Gcs", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Height", "Height", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Weight", "Weight", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UpdateUser", "Update User", 20));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "VitalSign"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"VId", "PatientCode", "TID", "Tempurature", "Pulse", "Respiratory", "BloodPressure", "SatO2", "GCS", "Height", "Weight", "CreateDate", "UpdateDate", "UpdateUser"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as VitalSignEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (VitalSign) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<VitalSign>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as VitalSign);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VitalSign Entity 
		///</summary>
		protected virtual VitalSign Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			VitalSign copy = new VitalSign();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Vid = this.Vid;
				copy.PatientCode = this.PatientCode;
				copy.Tid = this.Tid;
				copy.Tempurature = this.Tempurature;
				copy.Pulse = this.Pulse;
				copy.Respiratory = this.Respiratory;
				copy.BloodPressure = this.BloodPressure;
				copy.Sato2 = this.Sato2;
				copy.Gcs = this.Gcs;
				copy.Height = this.Height;
				copy.Weight = this.Weight;
				copy.CreateDate = this.CreateDate;
				copy.UpdateDate = this.UpdateDate;
				copy.UpdateUser = this.UpdateUser;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed VitalSign Entity 
		///</summary>
		public virtual VitalSign Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed VitalSign Entity which is a deep copy of the current entity.
		///</summary>
		public virtual VitalSign DeepCopy()
		{
			return EntityHelper.Clone<VitalSign>(this as VitalSign);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as VitalSignEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new VitalSignEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as VitalSignEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(VitalSignColumn column)
		{
			switch(column)
			{
					case VitalSignColumn.Vid:
					return entityData.Vid != _originalData.Vid;
					case VitalSignColumn.PatientCode:
					return entityData.PatientCode != _originalData.PatientCode;
					case VitalSignColumn.Tid:
					return entityData.Tid != _originalData.Tid;
					case VitalSignColumn.Tempurature:
					return entityData.Tempurature != _originalData.Tempurature;
					case VitalSignColumn.Pulse:
					return entityData.Pulse != _originalData.Pulse;
					case VitalSignColumn.Respiratory:
					return entityData.Respiratory != _originalData.Respiratory;
					case VitalSignColumn.BloodPressure:
					return entityData.BloodPressure != _originalData.BloodPressure;
					case VitalSignColumn.Sato2:
					return entityData.Sato2 != _originalData.Sato2;
					case VitalSignColumn.Gcs:
					return entityData.Gcs != _originalData.Gcs;
					case VitalSignColumn.Height:
					return entityData.Height != _originalData.Height;
					case VitalSignColumn.Weight:
					return entityData.Weight != _originalData.Weight;
					case VitalSignColumn.CreateDate:
					return entityData.CreateDate != _originalData.CreateDate;
					case VitalSignColumn.UpdateDate:
					return entityData.UpdateDate != _originalData.UpdateDate;
					case VitalSignColumn.UpdateUser:
					return entityData.UpdateUser != _originalData.UpdateUser;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< VitalSignColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Vid != _originalData.Vid;
			result = result || entityData.PatientCode != _originalData.PatientCode;
			result = result || entityData.Tid != _originalData.Tid;
			result = result || entityData.Tempurature != _originalData.Tempurature;
			result = result || entityData.Pulse != _originalData.Pulse;
			result = result || entityData.Respiratory != _originalData.Respiratory;
			result = result || entityData.BloodPressure != _originalData.BloodPressure;
			result = result || entityData.Sato2 != _originalData.Sato2;
			result = result || entityData.Gcs != _originalData.Gcs;
			result = result || entityData.Height != _originalData.Height;
			result = result || entityData.Weight != _originalData.Weight;
			result = result || entityData.CreateDate != _originalData.CreateDate;
			result = result || entityData.UpdateDate != _originalData.UpdateDate;
			result = result || entityData.UpdateUser != _originalData.UpdateUser;
			return result;
		}	
		
		///<summary>
		///  Returns a VitalSign Entity with the original data.
		///</summary>
		public VitalSign GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateVitalSign(
				_originalData.PatientCode,
				_originalData.Tid,
				_originalData.Tempurature,
				_originalData.Pulse,
				_originalData.Respiratory,
				_originalData.BloodPressure,
				_originalData.Sato2,
				_originalData.Gcs,
				_originalData.Height,
				_originalData.Weight,
				_originalData.CreateDate,
				_originalData.UpdateDate,
				_originalData.UpdateUser
				);
				
			return (VitalSign)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="VitalSignBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is VitalSignBase)
				return ValueEquals(this, (VitalSignBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="VitalSignBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Vid.GetHashCode() ^ 
					this.PatientCode.GetHashCode() ^ 
					this.Tid.GetHashCode() ^ 
					((this.Tempurature == null) ? string.Empty : this.Tempurature.ToString()).GetHashCode() ^ 
					((this.Pulse == null) ? string.Empty : this.Pulse.ToString()).GetHashCode() ^ 
					((this.Respiratory == null) ? string.Empty : this.Respiratory.ToString()).GetHashCode() ^ 
					((this.BloodPressure == null) ? string.Empty : this.BloodPressure.ToString()).GetHashCode() ^ 
					((this.Sato2 == null) ? string.Empty : this.Sato2.ToString()).GetHashCode() ^ 
					((this.Gcs == null) ? string.Empty : this.Gcs.ToString()).GetHashCode() ^ 
					((this.Height == null) ? string.Empty : this.Height.ToString()).GetHashCode() ^ 
					((this.Weight == null) ? string.Empty : this.Weight.ToString()).GetHashCode() ^ 
					((this.CreateDate == null) ? string.Empty : this.CreateDate.ToString()).GetHashCode() ^ 
					((this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString()).GetHashCode() ^ 
					((this.UpdateUser == null) ? string.Empty : this.UpdateUser.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VitalSignBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VitalSignBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="VitalSignBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="VitalSignBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VitalSignBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(VitalSignBase Object1, VitalSignBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Vid != Object2.Vid)
				equal = false;
			if (Object1.PatientCode != Object2.PatientCode)
				equal = false;
			if (Object1.Tid != Object2.Tid)
				equal = false;
			if ( Object1.Tempurature != null && Object2.Tempurature != null )
			{
				if (Object1.Tempurature != Object2.Tempurature)
					equal = false;
			}
			else if (Object1.Tempurature == null ^ Object2.Tempurature == null )
			{
				equal = false;
			}
			if ( Object1.Pulse != null && Object2.Pulse != null )
			{
				if (Object1.Pulse != Object2.Pulse)
					equal = false;
			}
			else if (Object1.Pulse == null ^ Object2.Pulse == null )
			{
				equal = false;
			}
			if ( Object1.Respiratory != null && Object2.Respiratory != null )
			{
				if (Object1.Respiratory != Object2.Respiratory)
					equal = false;
			}
			else if (Object1.Respiratory == null ^ Object2.Respiratory == null )
			{
				equal = false;
			}
			if ( Object1.BloodPressure != null && Object2.BloodPressure != null )
			{
				if (Object1.BloodPressure != Object2.BloodPressure)
					equal = false;
			}
			else if (Object1.BloodPressure == null ^ Object2.BloodPressure == null )
			{
				equal = false;
			}
			if ( Object1.Sato2 != null && Object2.Sato2 != null )
			{
				if (Object1.Sato2 != Object2.Sato2)
					equal = false;
			}
			else if (Object1.Sato2 == null ^ Object2.Sato2 == null )
			{
				equal = false;
			}
			if ( Object1.Gcs != null && Object2.Gcs != null )
			{
				if (Object1.Gcs != Object2.Gcs)
					equal = false;
			}
			else if (Object1.Gcs == null ^ Object2.Gcs == null )
			{
				equal = false;
			}
			if ( Object1.Height != null && Object2.Height != null )
			{
				if (Object1.Height != Object2.Height)
					equal = false;
			}
			else if (Object1.Height == null ^ Object2.Height == null )
			{
				equal = false;
			}
			if ( Object1.Weight != null && Object2.Weight != null )
			{
				if (Object1.Weight != Object2.Weight)
					equal = false;
			}
			else if (Object1.Weight == null ^ Object2.Weight == null )
			{
				equal = false;
			}
			if ( Object1.CreateDate != null && Object2.CreateDate != null )
			{
				if (Object1.CreateDate != Object2.CreateDate)
					equal = false;
			}
			else if (Object1.CreateDate == null ^ Object2.CreateDate == null )
			{
				equal = false;
			}
			if ( Object1.UpdateDate != null && Object2.UpdateDate != null )
			{
				if (Object1.UpdateDate != Object2.UpdateDate)
					equal = false;
			}
			else if (Object1.UpdateDate == null ^ Object2.UpdateDate == null )
			{
				equal = false;
			}
			if ( Object1.UpdateUser != null && Object2.UpdateUser != null )
			{
				if (Object1.UpdateUser != Object2.UpdateUser)
					equal = false;
			}
			else if (Object1.UpdateUser == null ^ Object2.UpdateUser == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((VitalSignBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static VitalSignComparer GetComparer()
        {
            return new VitalSignComparer();
        }
        */

        // Comparer delegates back to VitalSign
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(VitalSign rhs, VitalSignColumn which)
        {
            switch (which)
            {
            	
            	
            	case VitalSignColumn.Vid:
            		return this.Vid.CompareTo(rhs.Vid);
            		
            		                 
            	
            	
            	case VitalSignColumn.PatientCode:
            		return this.PatientCode.CompareTo(rhs.PatientCode);
            		
            		                 
            	
            	
            	case VitalSignColumn.Tid:
            		return this.Tid.CompareTo(rhs.Tid);
            		
            		                 
            	
            	
            	case VitalSignColumn.Tempurature:
            		return this.Tempurature.CompareTo(rhs.Tempurature);
            		
            		                 
            	
            	
            	case VitalSignColumn.Pulse:
            		return this.Pulse.CompareTo(rhs.Pulse);
            		
            		                 
            	
            	
            	case VitalSignColumn.Respiratory:
            		return this.Respiratory.CompareTo(rhs.Respiratory);
            		
            		                 
            	
            	
            	case VitalSignColumn.BloodPressure:
            		return this.BloodPressure.CompareTo(rhs.BloodPressure);
            		
            		                 
            	
            	
            	case VitalSignColumn.Sato2:
            		return this.Sato2.CompareTo(rhs.Sato2);
            		
            		                 
            	
            	
            	case VitalSignColumn.Gcs:
            		return this.Gcs.CompareTo(rhs.Gcs);
            		
            		                 
            	
            	
            	case VitalSignColumn.Height:
            		return this.Height.CompareTo(rhs.Height);
            		
            		                 
            	
            	
            	case VitalSignColumn.Weight:
            		return this.Weight.CompareTo(rhs.Weight);
            		
            		                 
            	
            	
            	case VitalSignColumn.CreateDate:
            		return this.CreateDate.Value.CompareTo(rhs.CreateDate.Value);
            		
            		                 
            	
            	
            	case VitalSignColumn.UpdateDate:
            		return this.UpdateDate.Value.CompareTo(rhs.UpdateDate.Value);
            		
            		                 
            	
            	
            	case VitalSignColumn.UpdateUser:
            		return this.UpdateUser.CompareTo(rhs.UpdateUser);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<VitalSignKey> Members
		
		// member variable for the EntityId property
		private VitalSignKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual VitalSignKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new VitalSignKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("VitalSign")
					.Append("|").Append( this.Vid.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- Vid: {0}{14}- PatientCode: {1}{14}- Tid: {2}{14}- Tempurature: {3}{14}- Pulse: {4}{14}- Respiratory: {5}{14}- BloodPressure: {6}{14}- Sato2: {7}{14}- Gcs: {8}{14}- Height: {9}{14}- Weight: {10}{14}- CreateDate: {11}{14}- UpdateDate: {12}{14}- UpdateUser: {13}{14}{16}", 
				this.Vid,
				this.PatientCode,
				this.Tid,
				(this.Tempurature == null) ? string.Empty : this.Tempurature.ToString(),
				(this.Pulse == null) ? string.Empty : this.Pulse.ToString(),
				(this.Respiratory == null) ? string.Empty : this.Respiratory.ToString(),
				(this.BloodPressure == null) ? string.Empty : this.BloodPressure.ToString(),
				(this.Sato2 == null) ? string.Empty : this.Sato2.ToString(),
				(this.Gcs == null) ? string.Empty : this.Gcs.ToString(),
				(this.Height == null) ? string.Empty : this.Height.ToString(),
				(this.Weight == null) ? string.Empty : this.Weight.ToString(),
				(this.CreateDate == null) ? string.Empty : this.CreateDate.ToString(),
				(this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString(),
				(this.UpdateUser == null) ? string.Empty : this.UpdateUser.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'VitalSign' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class VitalSignEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// VId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "VitalSign"</remarks>
		public System.Int64 Vid;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// PatientCode : 
		/// </summary>
		public System.String PatientCode = string.Empty;
		
		/// <summary>
		/// TID : 
		/// </summary>
		public System.String Tid = string.Empty;
		
		/// <summary>
		/// Tempurature : 
		/// </summary>
		public System.String Tempurature = null;
		
		/// <summary>
		/// Pulse : 
		/// </summary>
		public System.String Pulse = null;
		
		/// <summary>
		/// Respiratory : 
		/// </summary>
		public System.String Respiratory = null;
		
		/// <summary>
		/// BloodPressure : 
		/// </summary>
		public System.String BloodPressure = null;
		
		/// <summary>
		/// SatO2 : 
		/// </summary>
		public System.String Sato2 = null;
		
		/// <summary>
		/// GCS : 
		/// </summary>
		public System.String Gcs = null;
		
		/// <summary>
		/// Height : 
		/// </summary>
		public System.String Height = null;
		
		/// <summary>
		/// Weight : 
		/// </summary>
		public System.String Weight = null;
		
		/// <summary>
		/// CreateDate : 
		/// </summary>
		public System.DateTime? CreateDate = null;
		
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		public System.DateTime? UpdateDate = null;
		
		/// <summary>
		/// UpdateUser : 
		/// </summary>
		public System.String UpdateUser = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			VitalSignEntityData _tmp = new VitalSignEntityData();
						
			_tmp.Vid = this.Vid;
			
			_tmp.PatientCode = this.PatientCode;
			_tmp.Tid = this.Tid;
			_tmp.Tempurature = this.Tempurature;
			_tmp.Pulse = this.Pulse;
			_tmp.Respiratory = this.Respiratory;
			_tmp.BloodPressure = this.BloodPressure;
			_tmp.Sato2 = this.Sato2;
			_tmp.Gcs = this.Gcs;
			_tmp.Height = this.Height;
			_tmp.Weight = this.Weight;
			_tmp.CreateDate = this.CreateDate;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.UpdateUser = this.UpdateUser;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			VitalSignEntityData _tmp = new VitalSignEntityData();
						
			_tmp.Vid = this.Vid;
			
			_tmp.PatientCode = this.PatientCode;
			_tmp.Tid = this.Tid;
			_tmp.Tempurature = this.Tempurature;
			_tmp.Pulse = this.Pulse;
			_tmp.Respiratory = this.Respiratory;
			_tmp.BloodPressure = this.BloodPressure;
			_tmp.Sato2 = this.Sato2;
			_tmp.Gcs = this.Gcs;
			_tmp.Height = this.Height;
			_tmp.Weight = this.Weight;
			_tmp.CreateDate = this.CreateDate;
			_tmp.UpdateDate = this.UpdateDate;
			_tmp.UpdateUser = this.UpdateUser;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VitalSignColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(VitalSignColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VitalSignColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(VitalSignColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VitalSignColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(VitalSignColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				VitalSignEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new VitalSignEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VitalSignColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(VitalSignColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				VitalSignEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new VitalSignEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region VitalSignEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="VitalSign"/> object.
	/// </remarks>
	public class VitalSignEventArgs : System.EventArgs
	{
		private VitalSignColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the VitalSignEventArgs class.
		///</summary>
		public VitalSignEventArgs(VitalSignColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the VitalSignEventArgs class.
		///</summary>
		public VitalSignEventArgs(VitalSignColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The VitalSignColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="VitalSignColumn" />
		public VitalSignColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all VitalSign related events.
	///</summary>
	public delegate void VitalSignEventHandler(object sender, VitalSignEventArgs e);
	
	#region VitalSignComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class VitalSignComparer : System.Collections.Generic.IComparer<VitalSign>
	{
		VitalSignColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:VitalSignComparer"/> class.
        /// </summary>
		public VitalSignComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:VitalSignComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public VitalSignComparer(VitalSignColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="VitalSign"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="VitalSign"/> to compare.</param>
        /// <param name="b">The second <c>VitalSign</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(VitalSign a, VitalSign b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(VitalSign entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(VitalSign a, VitalSign b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public VitalSignColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region VitalSignKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="VitalSign"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class VitalSignKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the VitalSignKey class.
		/// </summary>
		public VitalSignKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the VitalSignKey class.
		/// </summary>
		public VitalSignKey(VitalSignBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Vid = entity.Vid;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the VitalSignKey class.
		/// </summary>
		public VitalSignKey(System.Int64 _vid)
		{
			#region Init Properties

			this.Vid = _vid;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private VitalSignBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public VitalSignBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Vid property
		private System.Int64 _vid;
		
		/// <summary>
		/// Gets or sets the Vid property.
		/// </summary>
		public System.Int64 Vid
		{
			get { return _vid; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Vid = value;
				
				_vid = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Vid = ( values["Vid"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["Vid"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Vid", Vid);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Vid: {0}{1}",
								Vid,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region VitalSignColumn Enum
	
	/// <summary>
	/// Enumerate the VitalSign columns.
	/// </summary>
	[Serializable]
	public enum VitalSignColumn : int
	{
		/// <summary>
		/// Vid : 
		/// </summary>
		[EnumTextValue("Vid")]
		[ColumnEnum("VId", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		Vid = 1,
		/// <summary>
		/// PatientCode : 
		/// </summary>
		[EnumTextValue("Patient Code")]
		[ColumnEnum("PatientCode", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		PatientCode = 2,
		/// <summary>
		/// Tid : 
		/// </summary>
		[EnumTextValue("Tid")]
		[ColumnEnum("TID", typeof(System.String), System.Data.DbType.String, false, false, false, 15)]
		Tid = 3,
		/// <summary>
		/// Tempurature : 
		/// </summary>
		[EnumTextValue("Tempurature")]
		[ColumnEnum("Tempurature", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		Tempurature = 4,
		/// <summary>
		/// Pulse : 
		/// </summary>
		[EnumTextValue("Pulse")]
		[ColumnEnum("Pulse", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		Pulse = 5,
		/// <summary>
		/// Respiratory : 
		/// </summary>
		[EnumTextValue("Respiratory")]
		[ColumnEnum("Respiratory", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		Respiratory = 6,
		/// <summary>
		/// BloodPressure : 
		/// </summary>
		[EnumTextValue("Blood Pressure")]
		[ColumnEnum("BloodPressure", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		BloodPressure = 7,
		/// <summary>
		/// Sato2 : 
		/// </summary>
		[EnumTextValue("Sato2")]
		[ColumnEnum("SatO2", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		Sato2 = 8,
		/// <summary>
		/// Gcs : 
		/// </summary>
		[EnumTextValue("Gcs")]
		[ColumnEnum("GCS", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		Gcs = 9,
		/// <summary>
		/// Height : 
		/// </summary>
		[EnumTextValue("Height")]
		[ColumnEnum("Height", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		Height = 10,
		/// <summary>
		/// Weight : 
		/// </summary>
		[EnumTextValue("Weight")]
		[ColumnEnum("Weight", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		Weight = 11,
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[EnumTextValue("Create Date")]
		[ColumnEnum("CreateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreateDate = 12,
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		[EnumTextValue("Update Date")]
		[ColumnEnum("UpdateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdateDate = 13,
		/// <summary>
		/// UpdateUser : 
		/// </summary>
		[EnumTextValue("Update User")]
		[ColumnEnum("UpdateUser", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		UpdateUser = 14
	}//End enum

	#endregion VitalSignColumn Enum

} // end namespace
